// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2017/3/23 ¤U¤È 02:02:29 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Users\tony\Downloads\Skype4COM\Skype4COM.dll (1)
// LIBID: {03282B5D-B38F-469D-849A-09B0A7F4881B}
// LCID: 0
// Helpfile: C:\Program Files (x86)\Common Files\Skype\Skype4COM.chm
// HelpString: Skype4COM 1.0 Type Library.
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   SKYPE4COMLib_TLBH
#define   SKYPE4COMLib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Skype4comlib_tlb
{

// *********************************************************************//
// HelpString: Skype4COM 1.0 Type Library.
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SKYPE4COMLib;
extern __declspec (package) const GUID IID_IApplication;
extern __declspec (package) const GUID IID_IApplicationStreamCollection;
extern __declspec (package) const GUID IID_IApplicationStream;
extern __declspec (package) const GUID IID_IUserCollection;
extern __declspec (package) const GUID IID_IUser;
extern __declspec (package) const GUID GUID_TUserSex;
extern __declspec (package) const GUID GUID_TBuddyStatus;
extern __declspec (package) const GUID GUID_TOnlineStatus;
extern __declspec (package) const GUID IID_ICall;
extern __declspec (package) const GUID GUID_TCallType;
extern __declspec (package) const GUID GUID_TCallStatus;
extern __declspec (package) const GUID GUID_TCallFailureReason;
extern __declspec (package) const GUID IID_IParticipantCollection;
extern __declspec (package) const GUID IID_IParticipant;
extern __declspec (package) const GUID GUID_TCallVideoStatus;
extern __declspec (package) const GUID GUID_TCallVideoSendStatus;
extern __declspec (package) const GUID GUID_TCallIoDeviceType;
extern __declspec (package) const GUID IID_ICallChannel;
extern __declspec (package) const GUID GUID_TCallChannelType;
extern __declspec (package) const GUID IID_ICallChannelManager;
extern __declspec (package) const GUID IID_ISkype;
extern __declspec (package) const GUID GUID_TUserStatus;
extern __declspec (package) const GUID GUID_TConnectionStatus;
extern __declspec (package) const GUID IID_IConversion;
extern __declspec (package) const GUID GUID_TAttachmentStatus;
extern __declspec (package) const GUID GUID_TChatLeaveReason;
extern __declspec (package) const GUID GUID_TChatStatus;
extern __declspec (package) const GUID GUID_TVoicemailType;
extern __declspec (package) const GUID GUID_TVoicemailStatus;
extern __declspec (package) const GUID GUID_TVoicemailFailureReason;
extern __declspec (package) const GUID GUID_TChatMessageStatus;
extern __declspec (package) const GUID GUID_TChatMessageType;
extern __declspec (package) const GUID GUID_TGroupType;
extern __declspec (package) const GUID GUID_TSmsMessageStatus;
extern __declspec (package) const GUID GUID_TSmsMessageType;
extern __declspec (package) const GUID GUID_TSmsTargetStatus;
extern __declspec (package) const GUID IID_ICallCollection;
extern __declspec (package) const GUID IID_IChatMessageCollection;
extern __declspec (package) const GUID IID_IChatMessage;
extern __declspec (package) const GUID IID_IChat;
extern __declspec (package) const GUID IID_IChatMemberCollection;
extern __declspec (package) const GUID IID_IChatMember;
extern __declspec (package) const GUID GUID_TChatMemberRole;
extern __declspec (package) const GUID GUID_TChatType;
extern __declspec (package) const GUID GUID_TChatMyStatus;
extern __declspec (package) const GUID IID_ICommand;
extern __declspec (package) const GUID IID_IChatCollection;
extern __declspec (package) const GUID IID_IConference;
extern __declspec (package) const GUID IID_IConferenceCollection;
extern __declspec (package) const GUID IID_IVoicemailCollection;
extern __declspec (package) const GUID IID_IVoicemail;
extern __declspec (package) const GUID GUID_TCallHistory;
extern __declspec (package) const GUID IID_IProfile;
extern __declspec (package) const GUID IID_IGroupCollection;
extern __declspec (package) const GUID IID_IGroup;
extern __declspec (package) const GUID IID_ISettings;
extern __declspec (package) const GUID IID_IClient;
extern __declspec (package) const GUID IID_IPluginEvent;
extern __declspec (package) const GUID GUID_TPluginContext;
extern __declspec (package) const GUID GUID_TPluginContactType;
extern __declspec (package) const GUID IID_IPluginMenuItem;
extern __declspec (package) const GUID GUID_TApiSecurityContext;
extern __declspec (package) const GUID IID_ISmsMessage;
extern __declspec (package) const GUID GUID_TSmsFailureReason;
extern __declspec (package) const GUID IID_ISmsTargetCollection;
extern __declspec (package) const GUID IID_ISmsTarget;
extern __declspec (package) const GUID IID_ISmsChunkCollection;
extern __declspec (package) const GUID IID_ISmsChunk;
extern __declspec (package) const GUID IID_ISmsMessageCollection;
extern __declspec (package) const GUID IID_IFileTransferCollection;
extern __declspec (package) const GUID IID_IFileTransfer;
extern __declspec (package) const GUID GUID_TFileTransferType;
extern __declspec (package) const GUID GUID_TFileTransferStatus;
extern __declspec (package) const GUID GUID_TFileTransferFailureReason;
extern __declspec (package) const GUID IID_ICallChannelCollection;
extern __declspec (package) const GUID IID_ICallChannelMessage;
extern __declspec (package) const GUID IID_ISkypeApplication;
extern __declspec (package) const GUID IID_ISkypeCall;
extern __declspec (package) const GUID IID_ISkypeChat;
extern __declspec (package) const GUID IID_ISkypeChatMessage;
extern __declspec (package) const GUID IID_ISkypeChatMember;
extern __declspec (package) const GUID IID_ISkypeConference;
extern __declspec (package) const GUID IID_ISkypeFileTransfer;
extern __declspec (package) const GUID IID_ISkypeSms;
extern __declspec (package) const GUID IID_ISkypeUser;
extern __declspec (package) const GUID IID_ISkypeVoicemail;
extern __declspec (package) const GUID DIID__ISkypeEvents;
extern __declspec (package) const GUID DIID__ICallChannelManagerEvents;
extern __declspec (package) const GUID IID_ISkypePlugin;
extern __declspec (package) const GUID CLSID_Skype;
extern __declspec (package) const GUID CLSID_User;
extern __declspec (package) const GUID CLSID_UserCollection;
extern __declspec (package) const GUID CLSID_Conversion;
extern __declspec (package) const GUID CLSID_Call;
extern __declspec (package) const GUID CLSID_CallCollection;
extern __declspec (package) const GUID CLSID_Chat;
extern __declspec (package) const GUID CLSID_ChatCollection;
extern __declspec (package) const GUID CLSID_Participant;
extern __declspec (package) const GUID CLSID_ParticipantCollection;
extern __declspec (package) const GUID CLSID_Conference;
extern __declspec (package) const GUID CLSID_ConferenceCollection;
extern __declspec (package) const GUID CLSID_Voicemail;
extern __declspec (package) const GUID CLSID_VoicemailCollection;
extern __declspec (package) const GUID CLSID_App;
extern __declspec (package) const GUID CLSID_ApplicationStream;
extern __declspec (package) const GUID CLSID_ApplicationStreamCollection;
extern __declspec (package) const GUID CLSID_ChatMessage;
extern __declspec (package) const GUID CLSID_ChatMessageCollection;
extern __declspec (package) const GUID CLSID_Profile;
extern __declspec (package) const GUID CLSID_Group;
extern __declspec (package) const GUID CLSID_GroupCollection;
extern __declspec (package) const GUID CLSID_Settings;
extern __declspec (package) const GUID CLSID_Client;
extern __declspec (package) const GUID CLSID_Command;
extern __declspec (package) const GUID CLSID_CallChannel;
extern __declspec (package) const GUID CLSID_CallChannelCollection;
extern __declspec (package) const GUID CLSID_CallChannelManager;
extern __declspec (package) const GUID CLSID_CallChannelMessage;
extern __declspec (package) const GUID CLSID_IEProtocolHandler;
extern __declspec (package) const GUID CLSID_SmsMessage;
extern __declspec (package) const GUID CLSID_SmsMessageCollection;
extern __declspec (package) const GUID CLSID_SmsChunk;
extern __declspec (package) const GUID CLSID_SmsChunkCollection;
extern __declspec (package) const GUID CLSID_SmsTarget;
extern __declspec (package) const GUID CLSID_SmsTargetCollection;
extern __declspec (package) const GUID CLSID_PluginMenuItem;
extern __declspec (package) const GUID CLSID_PluginEvent;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TUserSex;
enum      TBuddyStatus;
enum      TOnlineStatus;
enum      TCallType;
enum      TCallStatus;
enum      TCallFailureReason;
enum      TCallVideoStatus;
enum      TCallVideoSendStatus;
enum      TCallIoDeviceType;
enum      TCallChannelType;
enum      TUserStatus;
enum      TConnectionStatus;
enum      TAttachmentStatus;
enum      TChatLeaveReason;
enum      TChatStatus;
enum      TVoicemailType;
enum      TVoicemailStatus;
enum      TVoicemailFailureReason;
enum      TChatMessageStatus;
enum      TChatMessageType;
enum      TGroupType;
enum      TSmsMessageStatus;
enum      TSmsMessageType;
enum      TSmsTargetStatus;
enum      TChatMemberRole;
enum      TChatType;
enum      TChatMyStatus;
enum      TCallHistory;
enum      TPluginContext;
enum      TPluginContactType;
enum      TApiSecurityContext;
enum      TSmsFailureReason;
enum      TFileTransferType;
enum      TFileTransferStatus;
enum      TFileTransferFailureReason;
interface DECLSPEC_UUID("{F9ADA565-2FAD-424D-878C-7AD12DF9E617}") IApplication;
typedef TComInterface<IApplication, &IID_IApplication> IApplicationPtr;

interface DECLSPEC_UUID("{D8F1BCC4-2A73-47B9-83B3-D4D299CA5BC6}") IApplicationStreamCollection;
typedef TComInterface<IApplicationStreamCollection, &IID_IApplicationStreamCollection> IApplicationStreamCollectionPtr;

interface DECLSPEC_UUID("{E072F615-F833-4BCA-B473-CEE44D302030}") IApplicationStream;
typedef TComInterface<IApplicationStream, &IID_IApplicationStream> IApplicationStreamPtr;

interface DECLSPEC_UUID("{EC163200-44EB-483B-907F-A8C1CF56B8EE}") IUserCollection;
typedef TComInterface<IUserCollection, &IID_IUserCollection> IUserCollectionPtr;

interface DECLSPEC_UUID("{D0BC5168-A518-4192-9D20-0B907B23C4D1}") IUser;
typedef TComInterface<IUser, &IID_IUser> IUserPtr;

interface DECLSPEC_UUID("{76036886-436C-405F-A96E-7835CCFB82F3}") ICall;
typedef TComInterface<ICall, &IID_ICall> ICallPtr;

interface DECLSPEC_UUID("{F825FE12-9826-4BD2-BF7E-1ED95B8480FE}") IParticipantCollection;
typedef TComInterface<IParticipantCollection, &IID_IParticipantCollection> IParticipantCollectionPtr;

interface DECLSPEC_UUID("{F1B2AD09-1961-4336-A6BF-93010B73DE72}") IParticipant;
typedef TComInterface<IParticipant, &IID_IParticipant> IParticipantPtr;

interface DECLSPEC_UUID("{B76C04C9-0EB1-4748-B0C0-D01DEB595906}") ICallChannel;
typedef TComInterface<ICallChannel, &IID_ICallChannel> ICallChannelPtr;

interface DECLSPEC_UUID("{30C27C77-525F-4A3F-B9DD-C5A77C67250D}") ICallChannelManager;
typedef TComInterface<ICallChannelManager, &IID_ICallChannelManager> ICallChannelManagerPtr;

interface DECLSPEC_UUID("{B1878BFE-53D3-402E-8C86-190B19AF70D5}") ISkype;
typedef TComInterface<ISkype, &IID_ISkype> ISkypePtr;

interface DECLSPEC_UUID("{8D82F88A-B307-4074-8ED5-11C3BD213452}") IConversion;
typedef TComInterface<IConversion, &IID_IConversion> IConversionPtr;

interface DECLSPEC_UUID("{72E1EC13-0DF9-48AE-8A31-E2900D85BA55}") ICallCollection;
typedef TComInterface<ICallCollection, &IID_ICallCollection> ICallCollectionPtr;

interface DECLSPEC_UUID("{9511117A-7BCA-4669-BE96-6EA6866975C1}") IChatMessageCollection;
typedef TComInterface<IChatMessageCollection, &IID_IChatMessageCollection> IChatMessageCollectionPtr;

interface DECLSPEC_UUID("{4CFF5C70-3C95-4566-824A-FA164586D535}") IChatMessage;
typedef TComInterface<IChatMessage, &IID_IChatMessage> IChatMessagePtr;

interface DECLSPEC_UUID("{8C24106C-3368-4580-93E5-5ED4ACCDE306}") IChat;
typedef TComInterface<IChat, &IID_IChat> IChatPtr;

interface DECLSPEC_UUID("{8FFC686B-2E5E-4763-8B03-FF4FD3A0C4DA}") IChatMemberCollection;
typedef TComInterface<IChatMemberCollection, &IID_IChatMemberCollection> IChatMemberCollectionPtr;

interface DECLSPEC_UUID("{9E9F0473-94C2-4FDD-85D2-43E3478765F9}") IChatMember;
typedef TComInterface<IChatMember, &IID_IChatMember> IChatMemberPtr;

interface DECLSPEC_UUID("{48E046A8-31D7-4E5F-A611-47BF32B86405}") ICommand;
typedef TComInterface<ICommand, &IID_ICommand> ICommandPtr;

interface DECLSPEC_UUID("{052A4165-010A-457D-A874-E661B6322846}") IChatCollection;
typedef TComInterface<IChatCollection, &IID_IChatCollection> IChatCollectionPtr;

interface DECLSPEC_UUID("{AEB48497-5090-479C-8BE0-BD51597156A1}") IConference;
typedef TComInterface<IConference, &IID_IConference> IConferencePtr;

interface DECLSPEC_UUID("{F3E0C529-7D4F-4AF5-B501-27D25D4D2825}") IConferenceCollection;
typedef TComInterface<IConferenceCollection, &IID_IConferenceCollection> IConferenceCollectionPtr;

interface DECLSPEC_UUID("{21494848-BBD5-4192-BE32-57D1A19D8E94}") IVoicemailCollection;
typedef TComInterface<IVoicemailCollection, &IID_IVoicemailCollection> IVoicemailCollectionPtr;

interface DECLSPEC_UUID("{120B425E-6313-4924-B5A9-3E9F2E444A00}") IVoicemail;
typedef TComInterface<IVoicemail, &IID_IVoicemail> IVoicemailPtr;

interface DECLSPEC_UUID("{B9A3D72F-04C1-4878-993C-D89F83E20569}") IProfile;
typedef TComInterface<IProfile, &IID_IProfile> IProfilePtr;

interface DECLSPEC_UUID("{4C5C99DC-09CF-4A9C-BD94-8D655454A1F4}") IGroupCollection;
typedef TComInterface<IGroupCollection, &IID_IGroupCollection> IGroupCollectionPtr;

interface DECLSPEC_UUID("{84513274-9C49-4AAA-B8FC-316EB32CFE95}") IGroup;
typedef TComInterface<IGroup, &IID_IGroup> IGroupPtr;

interface DECLSPEC_UUID("{2BC8C53B-3312-4A77-AC87-31DF18A1EC51}") ISettings;
typedef TComInterface<ISettings, &IID_ISettings> ISettingsPtr;

interface DECLSPEC_UUID("{838731B0-88E7-4BED-81DC-B35CA8433341}") IClient;
typedef TComInterface<IClient, &IID_IClient> IClientPtr;

interface DECLSPEC_UUID("{4DF5F83A-0ABA-417D-A6FC-62A68AE06EF7}") IPluginEvent;
typedef TComInterface<IPluginEvent, &IID_IPluginEvent> IPluginEventPtr;

interface DECLSPEC_UUID("{C4BDF667-3FF7-4B44-A9F4-F3937E3E6D86}") IPluginMenuItem;
typedef TComInterface<IPluginMenuItem, &IID_IPluginMenuItem> IPluginMenuItemPtr;

interface DECLSPEC_UUID("{82D97F2A-0E17-40F3-8E01-24937F936FF4}") ISmsMessage;
typedef TComInterface<ISmsMessage, &IID_ISmsMessage> ISmsMessagePtr;

interface DECLSPEC_UUID("{A2365EF3-4805-4DD3-A9D4-1A8AE3E17D84}") ISmsTargetCollection;
typedef TComInterface<ISmsTargetCollection, &IID_ISmsTargetCollection> ISmsTargetCollectionPtr;

interface DECLSPEC_UUID("{A9B9C33A-49A6-41D5-B13F-2AA4F284F406}") ISmsTarget;
typedef TComInterface<ISmsTarget, &IID_ISmsTarget> ISmsTargetPtr;

interface DECLSPEC_UUID("{BBDA7D2D-B1C2-4AF9-AB5B-D762341D8903}") ISmsChunkCollection;
typedef TComInterface<ISmsChunkCollection, &IID_ISmsChunkCollection> ISmsChunkCollectionPtr;

interface DECLSPEC_UUID("{A9062508-C926-4415-ABB7-A5A46DB34456}") ISmsChunk;
typedef TComInterface<ISmsChunk, &IID_ISmsChunk> ISmsChunkPtr;

interface DECLSPEC_UUID("{1D5BAB2E-69CC-4136-8E02-FC20767DC9E2}") ISmsMessageCollection;
typedef TComInterface<ISmsMessageCollection, &IID_ISmsMessageCollection> ISmsMessageCollectionPtr;

interface DECLSPEC_UUID("{70A59A25-E823-4C3F-8F33-775008895EE3}") IFileTransferCollection;
typedef TComInterface<IFileTransferCollection, &IID_IFileTransferCollection> IFileTransferCollectionPtr;

interface DECLSPEC_UUID("{4D36B368-B88C-45FA-B136-3EF77B2EAD39}") IFileTransfer;
typedef TComInterface<IFileTransfer, &IID_IFileTransfer> IFileTransferPtr;

interface DECLSPEC_UUID("{8CB09087-E389-4C6D-A6A2-7D4BCA8545D9}") ICallChannelCollection;
typedef TComInterface<ICallChannelCollection, &IID_ICallChannelCollection> ICallChannelCollectionPtr;

interface DECLSPEC_UUID("{0EF6FD5D-607D-4EA3-9C90-683D73449E9D}") ICallChannelMessage;
typedef TComInterface<ICallChannelMessage, &IID_ICallChannelMessage> ICallChannelMessagePtr;

interface DECLSPEC_UUID("{55A5200C-B2E8-4795-A6FA-858CA3FE2F26}") ISkypeApplication;
typedef TComInterface<ISkypeApplication, &IID_ISkypeApplication> ISkypeApplicationPtr;

interface DECLSPEC_UUID("{54590FC3-0405-4A2D-B4A5-BEAC026577F2}") ISkypeCall;
typedef TComInterface<ISkypeCall, &IID_ISkypeCall> ISkypeCallPtr;

interface DECLSPEC_UUID("{3F6758D2-1D3C-4A8F-BD99-6FC6B0E2DC8F}") ISkypeChat;
typedef TComInterface<ISkypeChat, &IID_ISkypeChat> ISkypeChatPtr;

interface DECLSPEC_UUID("{A569B841-CC8A-4C12-B937-CBC17D9E64F0}") ISkypeChatMessage;
typedef TComInterface<ISkypeChatMessage, &IID_ISkypeChatMessage> ISkypeChatMessagePtr;

interface DECLSPEC_UUID("{6CF6DBDE-AB7C-4635-96ED-2FF525AB4457}") ISkypeChatMember;
typedef TComInterface<ISkypeChatMember, &IID_ISkypeChatMember> ISkypeChatMemberPtr;

interface DECLSPEC_UUID("{30678F8A-C104-40C0-A6AE-7C150E83300E}") ISkypeConference;
typedef TComInterface<ISkypeConference, &IID_ISkypeConference> ISkypeConferencePtr;

interface DECLSPEC_UUID("{2B929860-6AF4-40DF-9D77-308CA7C23E66}") ISkypeFileTransfer;
typedef TComInterface<ISkypeFileTransfer, &IID_ISkypeFileTransfer> ISkypeFileTransferPtr;

interface DECLSPEC_UUID("{6D0B4547-771D-4C4F-B3E8-98A33FD24D2B}") ISkypeSms;
typedef TComInterface<ISkypeSms, &IID_ISkypeSms> ISkypeSmsPtr;

interface DECLSPEC_UUID("{C219279C-F557-4BAD-B3BE-750E91CA9944}") ISkypeUser;
typedef TComInterface<ISkypeUser, &IID_ISkypeUser> ISkypeUserPtr;

interface DECLSPEC_UUID("{4D33E14E-9921-4860-92F4-5DC1586F403C}") ISkypeVoicemail;
typedef TComInterface<ISkypeVoicemail, &IID_ISkypeVoicemail> ISkypeVoicemailPtr;

interface DECLSPEC_UUID("{F4F90CDD-C620-4118-945E-CAA1BBEBA435}") _ISkypeEvents;
typedef TComInterface<_ISkypeEvents, &DIID__ISkypeEvents> _ISkypeEventsPtr;

interface DECLSPEC_UUID("{497ABB45-20AE-49D1-A39D-CBE84A31B20C}") _ICallChannelManagerEvents;
typedef TComInterface<_ICallChannelManagerEvents, &DIID__ICallChannelManagerEvents> _ICallChannelManagerEventsPtr;

interface DECLSPEC_UUID("{B77A3D1F-6847-402F-BB82-A0564379088E}") ISkypePlugin;
typedef TComInterface<ISkypePlugin, &IID_ISkypePlugin> ISkypePluginPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ISkype Skype;
typedef ISkypePtr SkypePtr;
typedef IUser User;
typedef IUserPtr UserPtr;
typedef IUserCollection UserCollection;
typedef IUserCollectionPtr UserCollectionPtr;
typedef IConversion Conversion;
typedef IConversionPtr ConversionPtr;
typedef ICall Call;
typedef ICallPtr CallPtr;
typedef ICallCollection CallCollection;
typedef ICallCollectionPtr CallCollectionPtr;
typedef IChat Chat;
typedef IChatPtr ChatPtr;
typedef IChatCollection ChatCollection;
typedef IChatCollectionPtr ChatCollectionPtr;
typedef IParticipant Participant;
typedef IParticipantPtr ParticipantPtr;
typedef IParticipantCollection ParticipantCollection;
typedef IParticipantCollectionPtr ParticipantCollectionPtr;
typedef IConference Conference;
typedef IConferencePtr ConferencePtr;
typedef IConferenceCollection ConferenceCollection;
typedef IConferenceCollectionPtr ConferenceCollectionPtr;
typedef IVoicemail Voicemail;
typedef IVoicemailPtr VoicemailPtr;
typedef IVoicemailCollection VoicemailCollection;
typedef IVoicemailCollectionPtr VoicemailCollectionPtr;
typedef IApplication App;
typedef IApplicationPtr AppPtr;
typedef IApplicationStream ApplicationStream;
typedef IApplicationStreamPtr ApplicationStreamPtr;
typedef IApplicationStreamCollection ApplicationStreamCollection;
typedef IApplicationStreamCollectionPtr ApplicationStreamCollectionPtr;
typedef IChatMessage ChatMessage;
typedef IChatMessagePtr ChatMessagePtr;
typedef IChatMessageCollection ChatMessageCollection;
typedef IChatMessageCollectionPtr ChatMessageCollectionPtr;
typedef IProfile Profile;
typedef IProfilePtr ProfilePtr;
typedef IGroup Group;
typedef IGroupPtr GroupPtr;
typedef IGroupCollection GroupCollection;
typedef IGroupCollectionPtr GroupCollectionPtr;
typedef ISettings Settings;
typedef ISettingsPtr SettingsPtr;
typedef IClient Client;
typedef IClientPtr ClientPtr;
typedef ICommand Command;
typedef ICommandPtr CommandPtr;
typedef ICallChannel CallChannel;
typedef ICallChannelPtr CallChannelPtr;
typedef ICallChannelCollection CallChannelCollection;
typedef ICallChannelCollectionPtr CallChannelCollectionPtr;
typedef ICallChannelManager CallChannelManager;
typedef ICallChannelManagerPtr CallChannelManagerPtr;
typedef ICallChannelMessage CallChannelMessage;
typedef ICallChannelMessagePtr CallChannelMessagePtr;
typedef IUnknown IEProtocolHandler;
typedef IUnknownPtr IEProtocolHandlerPtr;
typedef ISmsMessage SmsMessage;
typedef ISmsMessagePtr SmsMessagePtr;
typedef ISmsMessageCollection SmsMessageCollection;
typedef ISmsMessageCollectionPtr SmsMessageCollectionPtr;
typedef ISmsChunk SmsChunk;
typedef ISmsChunkPtr SmsChunkPtr;
typedef ISmsChunkCollection SmsChunkCollection;
typedef ISmsChunkCollectionPtr SmsChunkCollectionPtr;
typedef ISmsTarget SmsTarget;
typedef ISmsTargetPtr SmsTargetPtr;
typedef ISmsTargetCollection SmsTargetCollection;
typedef ISmsTargetCollectionPtr SmsTargetCollectionPtr;
typedef IPluginMenuItem PluginMenuItem;
typedef IPluginMenuItemPtr PluginMenuItemPtr;
typedef IPluginEvent PluginEvent;
typedef IPluginEventPtr PluginEventPtr;

#define LIBID_OF_Skype (&LIBID_SKYPE4COMLib)
#define LIBID_OF_User (&LIBID_SKYPE4COMLib)
#define LIBID_OF_UserCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Conversion (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Call (&LIBID_SKYPE4COMLib)
#define LIBID_OF_CallCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Chat (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ChatCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Participant (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ParticipantCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Conference (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ConferenceCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Voicemail (&LIBID_SKYPE4COMLib)
#define LIBID_OF_VoicemailCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_App (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ApplicationStream (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ApplicationStreamCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ChatMessage (&LIBID_SKYPE4COMLib)
#define LIBID_OF_ChatMessageCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Profile (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Group (&LIBID_SKYPE4COMLib)
#define LIBID_OF_GroupCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Settings (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Client (&LIBID_SKYPE4COMLib)
#define LIBID_OF_Command (&LIBID_SKYPE4COMLib)
#define LIBID_OF_CallChannel (&LIBID_SKYPE4COMLib)
#define LIBID_OF_CallChannelCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_CallChannelManager (&LIBID_SKYPE4COMLib)
#define LIBID_OF_CallChannelMessage (&LIBID_SKYPE4COMLib)
#define LIBID_OF_IEProtocolHandler (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsMessage (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsMessageCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsChunk (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsChunkCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsTarget (&LIBID_SKYPE4COMLib)
#define LIBID_OF_SmsTargetCollection (&LIBID_SKYPE4COMLib)
#define LIBID_OF_PluginMenuItem (&LIBID_SKYPE4COMLib)
#define LIBID_OF_PluginEvent (&LIBID_SKYPE4COMLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TUserSex
{
  usexUnknown = 0xFFFFFFFF, 
  usexMale = 0, 
  usexFemale = 1
} TUserSex;

typedef enum TBuddyStatus
{
  budUnknown = 0xFFFFFFFF, 
  budNeverBeenFriend = 0, 
  budDeletedFriend = 1, 
  budPendingAuthorization = 2, 
  budFriend = 3
} TBuddyStatus;

typedef enum TOnlineStatus
{
  olsUnknown = 0xFFFFFFFF, 
  olsOffline = 0, 
  olsOnline = 1, 
  olsAway = 2, 
  olsNotAvailable = 3, 
  olsDoNotDisturb = 4, 
  olsSkypeOut = 5, 
  olsSkypeMe = 6
} TOnlineStatus;

typedef enum TCallType
{
  cltUnknown = 0xFFFFFFFF, 
  cltIncomingPSTN = 0, 
  cltOutgoingPSTN = 1, 
  cltIncomingP2P = 2, 
  cltOutgoingP2P = 3
} TCallType;

typedef enum TCallStatus
{
  clsUnknown = 0xFFFFFFFF, 
  clsUnplaced = 0, 
  clsRouting = 1, 
  clsEarlyMedia = 2, 
  clsFailed = 3, 
  clsRinging = 4, 
  clsInProgress = 5, 
  clsOnHold = 6, 
  clsFinished = 7, 
  clsMissed = 8, 
  clsRefused = 9, 
  clsBusy = 10, 
  clsCancelled = 11, 
  clsLocalHold = 12, 
  clsRemoteHold = 13, 
  clsVoicemailBufferingGreeting = 14, 
  clsVoicemailPlayingGreeting = 15, 
  clsVoicemailRecording = 16, 
  clsVoicemailUploading = 17, 
  clsVoicemailSent = 18, 
  clsVoicemailCancelled = 19, 
  clsVoicemailFailed = 20, 
  clsTransferring = 21, 
  clsTransferred = 22
} TCallStatus;

typedef enum TCallFailureReason
{
  cfrUnknown = 0xFFFFFFFF, 
  cfrMiscError = 0, 
  cfrUserDoesNotExist = 1, 
  cfrUserIsOffline = 2, 
  cfrNoProxyFound = 3, 
  cfrSessionTerminated = 4, 
  cfrNoCommonCodec = 5, 
  cfrSoundIOError = 6, 
  cfrRemoteDeviceError = 7, 
  cfrBlockedByRecipient = 8, 
  cfrRecipientNotFriend = 9, 
  cfrNotAuthorizedByRecipient = 10, 
  cfrSoundRecordingError = 11
} TCallFailureReason;

typedef enum TCallVideoStatus
{
  cvsUnknown = 0xFFFFFFFF, 
  cvsNone = 0, 
  cvsSendEnabled = 1, 
  cvsReceiveEnabled = 2, 
  cvsBothEnabled = 3
} TCallVideoStatus;

typedef enum TCallVideoSendStatus
{
  vssUnknown = 0xFFFFFFFF, 
  vssNotAvailable = 0, 
  vssAvailable = 1, 
  vssStarting = 2, 
  vssRejected = 3, 
  vssRunning = 4, 
  vssStopping = 5, 
  vssPaused = 6
} TCallVideoSendStatus;

typedef enum TCallIoDeviceType
{
  callIoDeviceTypeUnknown = 0xFFFFFFFF, 
  callIoDeviceTypeSoundcard = 0, 
  callIoDeviceTypePort = 1, 
  callIoDeviceTypeFile = 2
} TCallIoDeviceType;

typedef enum TCallChannelType
{
  cctUnknown = 0xFFFFFFFF, 
  cctDatagram = 0, 
  cctReliable = 1
} TCallChannelType;

typedef enum TUserStatus
{
  cusUnknown = 0xFFFFFFFF, 
  cusOffline = 0, 
  cusOnline = 1, 
  cusAway = 2, 
  cusNotAvailable = 3, 
  cusDoNotDisturb = 4, 
  cusInvisible = 5, 
  cusLoggedOut = 6, 
  cusSkypeMe = 7
} TUserStatus;

typedef enum TConnectionStatus
{
  conUnknown = 0xFFFFFFFF, 
  conOffline = 0, 
  conConnecting = 1, 
  conPausing = 2, 
  conOnline = 3
} TConnectionStatus;

typedef enum TAttachmentStatus
{
  apiAttachUnknown = 0xFFFFFFFF, 
  apiAttachSuccess = 0, 
  apiAttachPendingAuthorization = 1, 
  apiAttachRefused = 2, 
  apiAttachNotAvailable = 3, 
  apiAttachAvailable = 4
} TAttachmentStatus;

typedef enum TChatLeaveReason
{
  leaUnknown = 0xFFFFFFFF, 
  leaUserNotFound = 0, 
  leaUserIncapable = 1, 
  leaAdderNotFriend = 2, 
  leaAddedNotAuthorized = 3, 
  leaAddDeclined = 4, 
  leaUnsubscribe = 5
} TChatLeaveReason;

typedef enum TChatStatus
{
  chsUnknown = 0xFFFFFFFF, 
  chsLegacyDialog = 0, 
  chsDialog = 1, 
  chsMultiNeedAccept = 2, 
  chsMultiSubscribed = 3, 
  chsUnsubscribed = 4
} TChatStatus;

typedef enum TVoicemailType
{
  vmtUnknown = 0xFFFFFFFF, 
  vmtIncoming = 0, 
  vmtDefaultGreeting = 1, 
  vmtCustomGreeting = 2, 
  vmtOutgoing = 3
} TVoicemailType;

typedef enum TVoicemailStatus
{
  vmsUnknown = 0xFFFFFFFF, 
  vmsNotDownloaded = 0, 
  vmsDownloading = 1, 
  vmsUnplayed = 2, 
  vmsBuffering = 3, 
  vmsPlaying = 4, 
  vmsPlayed = 5, 
  vmsBlank = 6, 
  vmsRecording = 7, 
  vmsRecorded = 8, 
  vmsUploading = 9, 
  vmsUploaded = 10, 
  vmsDeleting = 11, 
  vmsFailed = 12
} TVoicemailStatus;

typedef enum TVoicemailFailureReason
{
  vmrUnknown = 0xFFFFFFFF, 
  vmrNoError = 0, 
  vmrMiscError = 1, 
  vmrConnectError = 2, 
  vmrNoPrivilege = 3, 
  vmrNoVoicemail = 4, 
  vmrFileReadError = 5, 
  vmrFileWriteError = 6, 
  vmrRecordingError = 7, 
  vmrPlaybackError = 8
} TVoicemailFailureReason;

typedef enum TChatMessageStatus
{
  cmsUnknown = 0xFFFFFFFF, 
  cmsSending = 0, 
  cmsSent = 1, 
  cmsReceived = 2, 
  cmsRead = 3
} TChatMessageStatus;

typedef enum TChatMessageType
{
  cmeUnknown = 0xFFFFFFFF, 
  cmeCreatedChatWith = 0, 
  cmeSawMembers = 1, 
  cmeAddedMembers = 2, 
  cmeSetTopic = 3, 
  cmeSaid = 4, 
  cmeLeft = 5, 
  cmeEmoted = 6, 
  cmePostedContacts = 7, 
  cmeGapInChat = 8, 
  cmeSetRole = 9, 
  cmeKicked = 10, 
  cmeSetOptions = 11, 
  cmeKickBanned = 12, 
  cmeJoinedAsApplicant = 13, 
  cmeSetPicture = 14, 
  cmeSetGuidelines = 15
} TChatMessageType;

typedef enum TGroupType
{
  grpUnknown = 0xFFFFFFFF, 
  grpCustomGroup = 0, 
  grpAllUsers = 1, 
  grpAllFriends = 2, 
  grpSkypeFriends = 3, 
  grpSkypeOutFriends = 4, 
  grpOnlineFriends = 5, 
  grpPendingAuthorizationFriends = 6, 
  grpRecentlyContactedUsers = 7, 
  grpUsersWaitingMyAuthorization = 8, 
  grpUsersAuthorizedByMe = 9, 
  grpUsersBlockedByMe = 10, 
  grpUngroupedFriends = 11, 
  grpSharedGroup = 12, 
  grpProposedSharedGroup = 13
} TGroupType;

typedef enum TSmsMessageStatus
{
  smsMessageStatusUnknown = 0xFFFFFFFF, 
  smsMessageStatusReceived = 0, 
  smsMessageStatusRead = 1, 
  smsMessageStatusComposing = 2, 
  smsMessageStatusSendingToServer = 3, 
  smsMessageStatusSentToServer = 4, 
  smsMessageStatusDelivered = 5, 
  smsMessageStatusSomeTargetsFailed = 6, 
  smsMessageStatusFailed = 7
} TSmsMessageStatus;

typedef enum TSmsMessageType
{
  smsMessageTypeUnknown = 0xFFFFFFFF, 
  smsMessageTypeIncoming = 0, 
  smsMessageTypeOutgoing = 1, 
  smsMessageTypeCCRequest = 2, 
  smsMessageTypeCCSubmit = 3
} TSmsMessageType;

typedef enum TSmsTargetStatus
{
  smsTargetStatusUnknown = 0xFFFFFFFF, 
  smsTargetStatusUndefined = 0, 
  smsTargetStatusAnalyzing = 1, 
  smsTargetStatusAcceptable = 2, 
  smsTargetStatusNotRoutable = 3, 
  smsTargetStatusDeliveryPending = 4, 
  smsTargetStatusDeliverySuccessful = 5, 
  smsTargetStatusDeliveryFailed = 6
} TSmsTargetStatus;

typedef enum TChatMemberRole
{
  chatMemberRoleUnknown = 0xFFFFFFFF, 
  chatMemberRoleCreator = 0, 
  chatMemberRoleMaster = 1, 
  chatMemberRoleHelper = 2, 
  chatMemberRoleUser = 3, 
  chatMemberRoleListener = 4, 
  chatMemberRoleApplicant = 5
} TChatMemberRole;

typedef enum TChatType
{
  chatTypeUnknown = 0xFFFFFFFF, 
  chatTypeDialog = 0, 
  chatTypeLegacyDialog = 1, 
  chatTypeLegacyUnsubscribed = 2, 
  chatTypeMultiChat = 3, 
  chatTypeSharedGroup = 4
} TChatType;

typedef enum TChatMyStatus
{
  chatStatusUnknown = 0xFFFFFFFF, 
  chatStatusConnecting = 0, 
  chatStatusWaitingRemoteAccept = 1, 
  chatStatusAcceptRequired = 2, 
  chatStatusPasswordRequired = 3, 
  chatStatusSubscribed = 4, 
  chatStatusUnsubscribed = 5, 
  chatStatusDisbanded = 6, 
  chatStatusQueuedBecauseChatIsFull = 7, 
  chatStatusApplicationDenied = 8, 
  chatStatusKicked = 9, 
  chatStatusBanned = 10, 
  chatStatusRetryConnecting = 11
} TChatMyStatus;

typedef enum TCallHistory
{
  chsAllCalls = 0, 
  chsMissedCalls = 1, 
  chsIncomingCalls = 2, 
  chsOutgoingCalls = 3
} TCallHistory;

typedef enum TPluginContext
{
  pluginContextUnknown = 0xFFFFFFFF, 
  pluginContextChat = 0, 
  pluginContextCall = 1, 
  pluginContextContact = 2, 
  pluginContextMyself = 3, 
  pluginContextTools = 4
} TPluginContext;

typedef enum TPluginContactType
{
  pluginContactTypeUnknown = 0xFFFFFFFF, 
  pluginContactTypeAll = 0, 
  pluginContactTypeSkype = 1, 
  pluginContactTypeSkypeOut = 2
} TPluginContactType;

typedef enum TApiSecurityContext
{
  apiContextUnknown = 0, 
  apiContextVoice = 1, 
  apiContextMessaging = 2, 
  apiContextAccount = 4, 
  apiContextContacts = 8
} TApiSecurityContext;

typedef enum TSmsFailureReason
{
  smsFailureReasonUnknown = 0xFFFFFFFF, 
  smsFailureReasonMiscError = 0, 
  smsFailureReasonServerConnectFailed = 1, 
  smsFailureReasonNoSmsCapability = 2, 
  smsFailureReasonInsufficientFunds = 3, 
  smsFailureReasonInvalidConfirmationCode = 4, 
  smsFailureReasonUserBlocked = 5, 
  smsFailureReasonIPBlocked = 6, 
  smsFailureReasonNodeBlocked = 7
} TSmsFailureReason;

typedef enum TFileTransferType
{
  fileTransferTypeIncoming = 0, 
  fileTransferTypeOutgoing = 1
} TFileTransferType;

typedef enum TFileTransferStatus
{
  fileTransferStatusNew = 0, 
  fileTransferStatusConnecting = 1, 
  fileTransferStatusWaitingForAccept = 2, 
  fileTransferStatusTransferring = 3, 
  fileTransferStatusTransferringOverRelay = 4, 
  fileTransferStatusPaused = 5, 
  fileTransferStatusRemotelyPaused = 6, 
  fileTransferStatusCancelled = 7, 
  fileTransferStatusCompleted = 8, 
  fileTransferStatusFailed = 9
} TFileTransferStatus;

typedef enum TFileTransferFailureReason
{
  fileTransferFailureReasonSenderNotAuthorized = 1, 
  fileTransferFailureReasonRemotelyCancelled = 2, 
  fileTransferFailureReasonFailedRead = 3, 
  fileTransferFailureReasonFailedRemoteRead = 4, 
  fileTransferFailureReasonFailedWrite = 5, 
  fileTransferFailureReasonFailedRemoteWrite = 6, 
  fileTransferFailureReasonRemoteDoesNotSupportFT = 7, 
  fileTransferFailureReasonRemoteOfflineTooLong = 8
} TFileTransferFailureReason;

// *********************************************************************//
// Interface: IApplication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9ADA565-2FAD-424D-878C-7AD12DF9E617}
// *********************************************************************//
interface IApplication  : public IDispatch
{
public:
  // [1] Returns application name.
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Creates application.
  virtual HRESULT STDMETHODCALLTYPE Create(void) = 0;
  // [3] Deletes application.
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0;
  // [4] Returns application streams.
  virtual HRESULT STDMETHODCALLTYPE get_Streams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;
  // [5] Returns application connectable users.
  virtual HRESULT STDMETHODCALLTYPE get_ConnectableUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [6] Returns currently connecting users.
  virtual HRESULT STDMETHODCALLTYPE get_ConnectingUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [7] Connects application to user.
  virtual HRESULT STDMETHODCALLTYPE Connect(BSTR Username/*[in]*/, 
                                            VARIANT_BOOL WaitConnected/*[in,def,opt]*/) = 0;
  // [8] Returns application sending streams.
  virtual HRESULT STDMETHODCALLTYPE get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;
  // [9] Returns application receiving streams.
  virtual HRESULT STDMETHODCALLTYPE get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;
  // [10] Sends datagram to application streams.
  virtual HRESULT STDMETHODCALLTYPE SendDatagram(BSTR Text/*[in]*/, 
                                                 Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in,def,opt]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_Streams(void)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_Streams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ConnectableUsers(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ConnectableUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ConnectingUsers(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ConnectingUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_SendingStreams(void)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_SendingStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ReceivedStreams(void)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_ReceivedStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* Streams = {read = get_Streams};
  __property   Skype4comlib_tlb::IUserCollection* ConnectableUsers = {read = get_ConnectableUsers};
  __property   Skype4comlib_tlb::IUserCollection* ConnectingUsers = {read = get_ConnectingUsers};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* SendingStreams = {read = get_SendingStreams};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* ReceivedStreams = {read = get_ReceivedStreams};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IApplicationStreamCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D8F1BCC4-2A73-47B9-83B3-D4D299CA5BC6}
// *********************************************************************//
interface IApplicationStreamCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IApplicationStream* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStream* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IApplicationStream* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IApplicationStream**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IApplicationStream
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E072F615-F833-4BCA-B473-CEE44D302030}
// *********************************************************************//
interface IApplicationStream  : public IDispatch
{
public:
  // [1] Returns application name.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationName(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns stream handle.
  virtual HRESULT STDMETHODCALLTYPE get_Handle(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Reads stream.
  virtual HRESULT STDMETHODCALLTYPE Read(BSTR* pText/*[out,retval]*/) = 0;
  // [4] Writes stream.
  virtual HRESULT STDMETHODCALLTYPE Write(BSTR Text/*[in]*/) = 0;
  // [5] Send datagram on stream.
  virtual HRESULT STDMETHODCALLTYPE SendDatagram(BSTR Text/*[in]*/) = 0;
  // [6] Returns stream data length.
  virtual HRESULT STDMETHODCALLTYPE get_DataLength(long* pVal/*[out,retval]*/) = 0;
  // [7] Disconnect stream.
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0;
  // [8] Returns stream partner handle.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerHandle(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ApplicationName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ApplicationName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Handle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Handle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall Read(void)
  {
    BSTR pText = 0;
    OLECHECK(this->Read((BSTR*)&pText));
    return pText;
  }

  long __fastcall get_DataLength(void)
  {
    long pVal;
    OLECHECK(this->get_DataLength((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ApplicationName = {read = get_ApplicationName};
  __property   BSTR            Handle = {read = get_Handle};
  __property   long            DataLength = {read = get_DataLength};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUserCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC163200-44EB-483B-907F-A8C1CF56B8EE}
// *********************************************************************//
interface IUserCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IUser* pUser/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0BC5168-A518-4192-9D20-0B907B23C4D1}
// *********************************************************************//
interface IUser  : public IDispatch
{
public:
  // [1] Returns/sets user handle.
  virtual HRESULT STDMETHODCALLTYPE get_Handle(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets user handle.
  virtual HRESULT STDMETHODCALLTYPE set_Handle(BSTR pVal/*[in]*/) = 0;
  // [2] Returns user full name.
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns user birthday.
  virtual HRESULT STDMETHODCALLTYPE get_Birthday(DATE* pVal/*[out,retval]*/) = 0;
  // [4] Returns user sex.
  virtual HRESULT STDMETHODCALLTYPE get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/) = 0;
  // [5] Returns user country.
  virtual HRESULT STDMETHODCALLTYPE get_Country(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns user province.
  virtual HRESULT STDMETHODCALLTYPE get_Province(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] Returns user city.
  virtual HRESULT STDMETHODCALLTYPE get_City(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns user home phone number.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneHome(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns user office phone number.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneOffice(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns user mobile phone number.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneMobile(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns user homepage.
  virtual HRESULT STDMETHODCALLTYPE get_Homepage(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns user about text.
  virtual HRESULT STDMETHODCALLTYPE get_About(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] Returns true if user has call equipment.
  virtual HRESULT STDMETHODCALLTYPE get_HasCallEquipment(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [14] Returns user buddy status.
  virtual HRESULT STDMETHODCALLTYPE get_BuddyStatus(Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/) = 0;
  // [14] Returns user buddy status.
  virtual HRESULT STDMETHODCALLTYPE set_BuddyStatus(Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/) = 0;
  // [15] Returns true if user is authorized by current user.
  virtual HRESULT STDMETHODCALLTYPE get_IsAuthorized(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [15] Returns true if user is authorized by current user.
  virtual HRESULT STDMETHODCALLTYPE set_IsAuthorized(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [16] Returns true if user is blocked by current user.
  virtual HRESULT STDMETHODCALLTYPE get_IsBlocked(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [16] Returns true if user is blocked by current user.
  virtual HRESULT STDMETHODCALLTYPE set_IsBlocked(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [17] Returns user display name.
  virtual HRESULT STDMETHODCALLTYPE get_DisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [18] Returns user online status.
  virtual HRESULT STDMETHODCALLTYPE get_OnlineStatus(Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/) = 0;
  // [19] Returns timestamp when user was last seen online.
  virtual HRESULT STDMETHODCALLTYPE get_LastOnline(DATE* pVal/*[out,retval]*/) = 0;
  // [20] Returns user country code.
  virtual HRESULT STDMETHODCALLTYPE get_CountryCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns received authorization request text.
  virtual HRESULT STDMETHODCALLTYPE get_ReceivedAuthRequest(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] Returns/sets users speed dial code.
  virtual HRESULT STDMETHODCALLTYPE get_SpeedDial(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] Returns/sets users speed dial code.
  virtual HRESULT STDMETHODCALLTYPE set_SpeedDial(BSTR pVal/*[in]*/) = 0;
  // [23] Returns true if it is possible to send voicemail to user.
  virtual HRESULT STDMETHODCALLTYPE get_CanLeaveVoicemail(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [24] Returns user mood text.
  virtual HRESULT STDMETHODCALLTYPE get_MoodText(BSTR* pVal/*[out,retval]*/) = 0;
  // [25] Returns user aliases.
  virtual HRESULT STDMETHODCALLTYPE get_Aliases(BSTR* pVal/*[out,retval]*/) = 0;
  // [26] Returns user timezone.
  virtual HRESULT STDMETHODCALLTYPE get_Timezone(long* pVal/*[out,retval]*/) = 0;
  // [27] Returns user call forward active status.
  virtual HRESULT STDMETHODCALLTYPE get_IsCallForwardActive(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [28] Returns user language name.
  virtual HRESULT STDMETHODCALLTYPE get_Language(BSTR* pVal/*[out,retval]*/) = 0;
  // [29] Returns user language code.
  virtual HRESULT STDMETHODCALLTYPE get_LanguageCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [30] Returns user video capabilty.
  virtual HRESULT STDMETHODCALLTYPE get_IsVideoCapable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [31] Returns true if user is SkypeOut contact.
  virtual HRESULT STDMETHODCALLTYPE get_IsSkypeOutContact(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [32] Returns user authenticated buddies count.
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfAuthBuddies(long* pVal/*[out,retval]*/) = 0;
  // [17] Returns user display name.
  virtual HRESULT STDMETHODCALLTYPE set_DisplayName(BSTR pVal/*[in]*/) = 0;
  // [35] Returns user rich mood text.
  virtual HRESULT STDMETHODCALLTYPE get_RichMoodText(BSTR* pVal/*[out,retval]*/) = 0;
  // [36] Returns true if user user can receive voicemails.
  virtual HRESULT STDMETHODCALLTYPE get_IsVoicemailCapable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Handle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Handle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FullName((BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_Birthday(void)
  {
    DATE pVal;
    OLECHECK(this->get_Birthday((DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void)
  {
    Skype4comlib_tlb::TUserSex pVal;
    OLECHECK(this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Country(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Country((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Province(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Province((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_City(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_City((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneHome(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneHome((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneOffice(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneOffice((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneMobile(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneMobile((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Homepage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Homepage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_About(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_About((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_HasCallEquipment(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_HasCallEquipment((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TBuddyStatus __fastcall get_BuddyStatus(void)
  {
    Skype4comlib_tlb::TBuddyStatus pVal;
    OLECHECK(this->get_BuddyStatus((Skype4comlib_tlb::TBuddyStatus*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsAuthorized(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsAuthorized((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsBlocked(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsBlocked((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DisplayName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TOnlineStatus __fastcall get_OnlineStatus(void)
  {
    Skype4comlib_tlb::TOnlineStatus pVal;
    OLECHECK(this->get_OnlineStatus((Skype4comlib_tlb::TOnlineStatus*)&pVal));
    return pVal;
  }

  DATE __fastcall get_LastOnline(void)
  {
    DATE pVal;
    OLECHECK(this->get_LastOnline((DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CountryCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CountryCode((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ReceivedAuthRequest(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ReceivedAuthRequest((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SpeedDial(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SpeedDial((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CanLeaveVoicemail(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CanLeaveVoicemail((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_MoodText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_MoodText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Aliases(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Aliases((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Timezone(void)
  {
    long pVal;
    OLECHECK(this->get_Timezone((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsCallForwardActive(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsCallForwardActive((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Language(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Language((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LanguageCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LanguageCode((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsVideoCapable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsVideoCapable((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsSkypeOutContact(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsSkypeOutContact((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_NumberOfAuthBuddies(void)
  {
    long pVal;
    OLECHECK(this->get_NumberOfAuthBuddies((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RichMoodText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RichMoodText((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsVoicemailCapable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsVoicemailCapable((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            FullName = {read = get_FullName};
  __property   DATE            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   VARIANT_BOOL    HasCallEquipment = {read = get_HasCallEquipment};
  __property   Skype4comlib_tlb::TBuddyStatus BuddyStatus = {read = get_BuddyStatus, write = set_BuddyStatus};
  __property   VARIANT_BOOL    IsAuthorized = {read = get_IsAuthorized, write = set_IsAuthorized};
  __property   VARIANT_BOOL    IsBlocked = {read = get_IsBlocked, write = set_IsBlocked};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TOnlineStatus OnlineStatus = {read = get_OnlineStatus};
  __property   DATE            LastOnline = {read = get_LastOnline};
  __property   BSTR            CountryCode = {read = get_CountryCode};
  __property   BSTR            ReceivedAuthRequest = {read = get_ReceivedAuthRequest};
  __property   BSTR            SpeedDial = {read = get_SpeedDial};
  __property   VARIANT_BOOL    CanLeaveVoicemail = {read = get_CanLeaveVoicemail};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   BSTR            Aliases = {read = get_Aliases};
  __property   long            Timezone = {read = get_Timezone};
  __property   VARIANT_BOOL    IsCallForwardActive = {read = get_IsCallForwardActive};
  __property   BSTR            Language = {read = get_Language};
  __property   BSTR            LanguageCode = {read = get_LanguageCode};
  __property   VARIANT_BOOL    IsVideoCapable = {read = get_IsVideoCapable};
  __property   VARIANT_BOOL    IsSkypeOutContact = {read = get_IsSkypeOutContact};
  __property   long            NumberOfAuthBuddies = {read = get_NumberOfAuthBuddies};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};
  __property   VARIANT_BOOL    IsVoicemailCapable = {read = get_IsVoicemailCapable};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICall
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76036886-436C-405F-A96E-7835CCFB82F3}
// *********************************************************************//
interface ICall  : public IDispatch
{
public:
  // [1] Returns call id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns call timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_Timestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [3] Returns call partner handle.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerHandle(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns call partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns call conference id.
  virtual HRESULT STDMETHODCALLTYPE get_ConferenceId(long* pVal/*[out,retval]*/) = 0;
  // [6] Returns call type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/) = 0;
  // [7] Returns call status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;
  // [7] Returns call status.
  virtual HRESULT STDMETHODCALLTYPE set_Status(Skype4comlib_tlb::TCallStatus pVal/*[in]*/) = 0;
  // [8] Returns call failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_FailureReason(Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/) = 0;
  // [9] Returns call subject.
  virtual HRESULT STDMETHODCALLTYPE get_Subject(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns call PSTN number.
  virtual HRESULT STDMETHODCALLTYPE get_PstnNumber(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns call duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_Duration(long* pVal/*[out,retval]*/) = 0;
  // [12] Returns call PSTN status.
  virtual HRESULT STDMETHODCALLTYPE get_PstnStatus(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] Marks call seen.
  virtual HRESULT STDMETHODCALLTYPE set_Seen(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [14] Puts call on hold.
  virtual HRESULT STDMETHODCALLTYPE Hold(void) = 0;
  // [15] Resumes the held call.
  virtual HRESULT STDMETHODCALLTYPE Resume(void) = 0;
  // [16] Ends the call.
  virtual HRESULT STDMETHODCALLTYPE Finish(void) = 0;
  // [17] Answers the call.
  virtual HRESULT STDMETHODCALLTYPE Answer(void) = 0;
  // [18] Sends valus as DTMF.
  virtual HRESULT STDMETHODCALLTYPE set_DTMF(BSTR Param1/*[in]*/) = 0;
  // [19] Returns conference call participants.
  virtual HRESULT STDMETHODCALLTYPE get_Participants(Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/) = 0;
  // [20] Joins the call to conference.
  virtual HRESULT STDMETHODCALLTYPE Join(long Id/*[in]*/) = 0;
  // [21] Returns voicemail duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_VmDuration(long* pVal/*[out,retval]*/) = 0;
  // [22] Returns voicemail allowed duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_VmAllowedDuration(long* pVal/*[out,retval]*/) = 0;
  // [23] Returns call video status.
  virtual HRESULT STDMETHODCALLTYPE get_VideoStatus(Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/) = 0;
  // [24] Returns call video send status.
  virtual HRESULT STDMETHODCALLTYPE get_VideoSendStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/) = 0;
  // [25] Returns call video receive status.
  virtual HRESULT STDMETHODCALLTYPE get_VideoReceiveStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/) = 0;
  // [26] Starts video send.
  virtual HRESULT STDMETHODCALLTYPE StartVideoSend(void) = 0;
  // [27] Stops video send.
  virtual HRESULT STDMETHODCALLTYPE StopVideoSend(void) = 0;
  // [28] Starts video receive.
  virtual HRESULT STDMETHODCALLTYPE StartVideoReceive(void) = 0;
  // [29] Stops video receive.
  virtual HRESULT STDMETHODCALLTYPE StopVideoReceive(void) = 0;
  // [30] Redirects call to voicemail.
  virtual HRESULT STDMETHODCALLTYPE RedirectToVoicemail(void) = 0;
  // [31] Forwards call.
  virtual HRESULT STDMETHODCALLTYPE Forward(void) = 0;
  // [32] Returns call rate.
  virtual HRESULT STDMETHODCALLTYPE get_Rate(long* pVal/*[out,retval]*/) = 0;
  // [33] Returns call rate currency.
  virtual HRESULT STDMETHODCALLTYPE get_RateCurrency(BSTR* pVal/*[out,retval]*/) = 0;
  // [34] Returns call rate precision.
  virtual HRESULT STDMETHODCALLTYPE get_RatePrecision(long* pVal/*[out,retval]*/) = 0;
  // [35] Returns/sets call input sound device.
  virtual HRESULT STDMETHODCALLTYPE get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/) = 0;
  // [35] Returns/sets call input sound device.
  virtual HRESULT STDMETHODCALLTYPE set_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                    BSTR pVal/*[in]*/) = 0;
  // [36] Returns/sets call output sound device.
  virtual HRESULT STDMETHODCALLTYPE get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [36] Returns/sets call output sound device.
  virtual HRESULT STDMETHODCALLTYPE set_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                     BSTR pVal/*[in]*/) = 0;
  // [37] Returns/sets call microphone sound device.
  virtual HRESULT STDMETHODCALLTYPE get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [37] Returns/sets call microphone sound device.
  virtual HRESULT STDMETHODCALLTYPE set_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                         BSTR pVal/*[in]*/) = 0;
  // [38] Returns call sound input status.
  virtual HRESULT STDMETHODCALLTYPE get_InputStatus(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [39] Returns call forwarder identity.
  virtual HRESULT STDMETHODCALLTYPE get_ForwardedBy(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] Marks call seen.
  virtual HRESULT STDMETHODCALLTYPE get_Seen(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [40] Returns true if call can be transferred.
  virtual HRESULT STDMETHODCALLTYPE get_CanTransfer(BSTR Target/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [41] Returns call transfer status.
  virtual HRESULT STDMETHODCALLTYPE get_TransferStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;
  // [42] Returns true if call transfer is active.
  virtual HRESULT STDMETHODCALLTYPE get_TransferActive(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [43] Returns call transferrer identity.
  virtual HRESULT STDMETHODCALLTYPE get_TransferredBy(BSTR* pVal/*[out,retval]*/) = 0;
  // [44] Returns call transfer target identity.
  virtual HRESULT STDMETHODCALLTYPE get_TransferredTo(BSTR* pVal/*[out,retval]*/) = 0;
  // [45] Transfers the call to target user.
  virtual HRESULT STDMETHODCALLTYPE Transfer(BSTR Target/*[in]*/) = 0;
  // [46] Returns the target number for incoming SkypeIN calls.
  virtual HRESULT STDMETHODCALLTYPE get_TargetIdentity(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  DATE __fastcall get_Timestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_Timestamp((DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerDisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerDisplayName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ConferenceId(void)
  {
    long pVal;
    OLECHECK(this->get_ConferenceId((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TCallType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TCallType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallFailureReason __fastcall get_FailureReason(void)
  {
    Skype4comlib_tlb::TCallFailureReason pVal;
    OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TCallFailureReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Subject(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Subject((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PstnNumber(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PstnNumber((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Duration(void)
  {
    long pVal;
    OLECHECK(this->get_Duration((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PstnStatus(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PstnStatus((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IParticipantCollection* __fastcall get_Participants(void)
  {
    Skype4comlib_tlb::IParticipantCollection* pVal;
    OLECHECK(this->get_Participants((Skype4comlib_tlb::IParticipantCollection**)&pVal));
    return pVal;
  }

  long __fastcall get_VmDuration(void)
  {
    long pVal;
    OLECHECK(this->get_VmDuration((long*)&pVal));
    return pVal;
  }

  long __fastcall get_VmAllowedDuration(void)
  {
    long pVal;
    OLECHECK(this->get_VmAllowedDuration((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoStatus __fastcall get_VideoStatus(void)
  {
    Skype4comlib_tlb::TCallVideoStatus pVal;
    OLECHECK(this->get_VideoStatus((Skype4comlib_tlb::TCallVideoStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoSendStatus(void)
  {
    Skype4comlib_tlb::TCallVideoSendStatus pVal;
    OLECHECK(this->get_VideoSendStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoReceiveStatus(void)
  {
    Skype4comlib_tlb::TCallVideoSendStatus pVal;
    OLECHECK(this->get_VideoReceiveStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
    return pVal;
  }

  long __fastcall get_Rate(void)
  {
    long pVal;
    OLECHECK(this->get_Rate((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RateCurrency(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RateCurrency((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_RatePrecision(void)
  {
    long pVal;
    OLECHECK(this->get_RatePrecision((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputDevice(DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OutputDevice(DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CaptureMicDevice(DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_InputStatus(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_InputStatus((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ForwardedBy(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ForwardedBy((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Seen(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Seen((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CanTransfer(BSTR Target/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CanTransfer(Target, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall get_TransferStatus(void)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->get_TransferStatus((Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_TransferActive(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_TransferActive((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TransferredBy(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TransferredBy((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TransferredTo(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TransferredTo((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TargetIdentity(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TargetIdentity((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   long            ConferenceId = {read = get_ConferenceId};
  __property   Skype4comlib_tlb::TCallType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TCallStatus Status = {read = get_Status, write = set_Status};
  __property   Skype4comlib_tlb::TCallFailureReason FailureReason = {read = get_FailureReason};
  __property   BSTR            Subject = {read = get_Subject};
  __property   BSTR            PstnNumber = {read = get_PstnNumber};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            PstnStatus = {read = get_PstnStatus};
  __property   VARIANT_BOOL    Seen = {read = get_Seen, write = set_Seen};
  __property   BSTR            DTMF = {write = set_DTMF};
  __property   Skype4comlib_tlb::IParticipantCollection* Participants = {read = get_Participants};
  __property   long            VmDuration = {read = get_VmDuration};
  __property   long            VmAllowedDuration = {read = get_VmAllowedDuration};
  __property   Skype4comlib_tlb::TCallVideoStatus VideoStatus = {read = get_VideoStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoSendStatus = {read = get_VideoSendStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoReceiveStatus = {read = get_VideoReceiveStatus};
  __property   long            Rate = {read = get_Rate};
  __property   BSTR            RateCurrency = {read = get_RateCurrency};
  __property   long            RatePrecision = {read = get_RatePrecision};
  __property   VARIANT_BOOL    InputStatus = {read = get_InputStatus};
  __property   BSTR            ForwardedBy = {read = get_ForwardedBy};
  __property   Skype4comlib_tlb::TCallStatus TransferStatus = {read = get_TransferStatus};
  __property   VARIANT_BOOL    TransferActive = {read = get_TransferActive};
  __property   BSTR            TransferredBy = {read = get_TransferredBy};
  __property   BSTR            TransferredTo = {read = get_TransferredTo};
  __property   BSTR            TargetIdentity = {read = get_TargetIdentity};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IParticipantCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F825FE12-9826-4BD2-BF7E-1ED95B8480FE}
// *********************************************************************//
interface IParticipantCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IParticipant* pParticipant/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IParticipant** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IParticipant* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IParticipant* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IParticipant**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IParticipant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1B2AD09-1961-4336-A6BF-93010B73DE72}
// *********************************************************************//
interface IParticipant  : public IDispatch
{
public:
  // [1] Returns conference participant handle.
  virtual HRESULT STDMETHODCALLTYPE get_Handle(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns conference participant display name.
  virtual HRESULT STDMETHODCALLTYPE get_DisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns conference participant call type.
  virtual HRESULT STDMETHODCALLTYPE get_CallType(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/) = 0;
  // [4] Returns conference participant call status.
  virtual HRESULT STDMETHODCALLTYPE get_CallStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Handle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Handle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DisplayName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallType __fastcall get_CallType(void)
  {
    Skype4comlib_tlb::TCallType pVal;
    OLECHECK(this->get_CallType((Skype4comlib_tlb::TCallType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall get_CallStatus(void)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->get_CallStatus((Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }


  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TCallType CallType = {read = get_CallType};
  __property   Skype4comlib_tlb::TCallStatus CallStatus = {read = get_CallStatus};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICallChannel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B76C04C9-0EB1-4748-B0C0-D01DEB595906}
// *********************************************************************//
interface ICallChannel  : public IDispatch
{
public:
  // [2] Call channel type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/) = 0;
  // [2] Call channel type.
  virtual HRESULT STDMETHODCALLTYPE set_Type(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/) = 0;
  // [3] Sends text message over channel.
  virtual HRESULT STDMETHODCALLTYPE SendTextMessage(BSTR Text) = 0;
  // [4] Returns channel data stream.
  virtual HRESULT STDMETHODCALLTYPE get_Stream(Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/) = 0;
  // [5] Returns channel manager object.
  virtual HRESULT STDMETHODCALLTYPE get_Manager(Skype4comlib_tlb::ICallChannelManager** pVal/*[out,retval]*/) = 0;
  // [6] Returns channel call object.
  virtual HRESULT STDMETHODCALLTYPE get_Call(Skype4comlib_tlb::ICall** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TCallChannelType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TCallChannelType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TCallChannelType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStream* __fastcall get_Stream(void)
  {
    Skype4comlib_tlb::IApplicationStream* pVal;
    OLECHECK(this->get_Stream((Skype4comlib_tlb::IApplicationStream**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallChannelManager* __fastcall get_Manager(void)
  {
    Skype4comlib_tlb::ICallChannelManager* pVal;
    OLECHECK(this->get_Manager((Skype4comlib_tlb::ICallChannelManager**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICall* __fastcall get_Call(void)
  {
    Skype4comlib_tlb::ICall* pVal;
    OLECHECK(this->get_Call((Skype4comlib_tlb::ICall**)&pVal));
    return pVal;
  }


  __property   Skype4comlib_tlb::TCallChannelType Type = {read = get_Type, write = set_Type};
  __property   Skype4comlib_tlb::IApplicationStream* Stream = {read = get_Stream};
  __property   Skype4comlib_tlb::ICallChannelManager* Manager = {read = get_Manager};
  __property   Skype4comlib_tlb::ICall* Call = {read = get_Call};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICallChannelManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C27C77-525F-4A3F-B9DD-C5A77C67250D}
// *********************************************************************//
interface ICallChannelManager  : public IDispatch
{
public:
  // [1] Connects to Skype.
  virtual HRESULT STDMETHODCALLTYPE Connect(Skype4comlib_tlb::ISkype* pSkype/*[in]*/) = 0;
  // [2] Disconnects from Skype.
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0;
  // [3] Returns call data channels.
  virtual HRESULT STDMETHODCALLTYPE get_Channels(Skype4comlib_tlb::ICallChannelCollection** pVal/*[out,retval]*/) = 0;
  // [6] Returns/sets default data channel type.
  virtual HRESULT STDMETHODCALLTYPE get_ChannelType(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/) = 0;
  // [6] Returns/sets default data channel type.
  virtual HRESULT STDMETHODCALLTYPE set_ChannelType(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/) = 0;
  // [7] Returns/sets application name.
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets application name.
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/) = 0;
  // [8] Creates application context.
  virtual HRESULT STDMETHODCALLTYPE CreateApplication(BSTR ApplicationName/*[in,def,opt]*/) = 0;
  // [9] Returns application context creation status.
  virtual HRESULT STDMETHODCALLTYPE get_Created(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::ICallChannelCollection* __fastcall get_Channels(void)
  {
    Skype4comlib_tlb::ICallChannelCollection* pVal;
    OLECHECK(this->get_Channels((Skype4comlib_tlb::ICallChannelCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallChannelType __fastcall get_ChannelType(void)
  {
    Skype4comlib_tlb::TCallChannelType pVal;
    OLECHECK(this->get_ChannelType((Skype4comlib_tlb::TCallChannelType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Created(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Created((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   Skype4comlib_tlb::ICallChannelCollection* Channels = {read = get_Channels};
  __property   Skype4comlib_tlb::TCallChannelType ChannelType = {read = get_ChannelType, write = set_ChannelType};
  __property   BSTR            Name = {read = get_Name};
  __property   VARIANT_BOOL    Created = {read = get_Created};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkype
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1878BFE-53D3-402E-8C86-190B19AF70D5}
// *********************************************************************//
interface ISkype  : public IDispatch
{
public:
  // [1] Returns/sets Skype API wait timeout in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE get_Timeout(long* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets Skype API wait timeout in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE set_Timeout(long pVal/*[in]*/) = 0;
  // [2] Returns/sets USER, CALL, CHAT, CHATMESSAGE or VOICEMAIL object property value.
  virtual HRESULT STDMETHODCALLTYPE get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                                 BSTR PropName/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets USER, CALL, CHAT, CHATMESSAGE or VOICEMAIL object property value.
  virtual HRESULT STDMETHODCALLTYPE set_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                                 BSTR PropName/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [3] Returns/sets general variable value.
  virtual HRESULT STDMETHODCALLTYPE get_Variable(BSTR Name/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets general variable value.
  virtual HRESULT STDMETHODCALLTYPE set_Variable(BSTR Name/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [4] Returns current user handle.
  virtual HRESULT STDMETHODCALLTYPE get_CurrentUserHandle(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns/sets current user online status.
  virtual HRESULT STDMETHODCALLTYPE get_CurrentUserStatus(Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/) = 0;
  // [5] Returns/sets current user online status.
  virtual HRESULT STDMETHODCALLTYPE set_CurrentUserStatus(Skype4comlib_tlb::TUserStatus pVal/*[in]*/) = 0;
  // [6] Returns connection status.
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets mute status.
  virtual HRESULT STDMETHODCALLTYPE get_Mute(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets mute status.
  virtual HRESULT STDMETHODCALLTYPE set_Mute(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [8] Returns Skype application version.
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns current user privilege.
  virtual HRESULT STDMETHODCALLTYPE get_Privilege(BSTR Name/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] Returns current user object.
  virtual HRESULT STDMETHODCALLTYPE get_CurrentUser(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [11] Returns conversion object.
  virtual HRESULT STDMETHODCALLTYPE get_Convert(Skype4comlib_tlb::IConversion** pVal/*[out,retval]*/) = 0;
  // [12] Returns collection of users in the friends list.
  virtual HRESULT STDMETHODCALLTYPE get_Friends(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [13] Returns collection of users found as the result of search operation.
  virtual HRESULT STDMETHODCALLTYPE SearchForUsers(BSTR Target/*[in]*/, 
                                                   Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [14] Returns collection of calls in the call history.
  virtual HRESULT STDMETHODCALLTYPE get_Calls(BSTR Target/*[in,def,opt]*/, 
                                              Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [15] Returns collection of currently active calls.
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [16] Returns collection of missed calls.
  virtual HRESULT STDMETHODCALLTYPE get_MissedCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [17] Returns chat messages.
  virtual HRESULT STDMETHODCALLTYPE get_Messages(BSTR Target/*[in,def,opt]*/, 
                                                 Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [18] Returns collection of missed messages.
  virtual HRESULT STDMETHODCALLTYPE get_MissedMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [19] Returns Skype API attachment status.
  virtual HRESULT STDMETHODCALLTYPE get_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/) = 0;
  // [20] Returns/sets Skype API protocol version.
  virtual HRESULT STDMETHODCALLTYPE get_Protocol(long* pVal/*[out,retval]*/) = 0;
  // [20] Returns/sets Skype API protocol version.
  virtual HRESULT STDMETHODCALLTYPE set_Protocol(long pVal/*[in]*/) = 0;
  // [21] Connects to Skype API.
  virtual HRESULT STDMETHODCALLTYPE Attach(long Protocol/*[in,def,opt]*/, 
                                           VARIANT_BOOL Wait/*[in,def,opt]*/) = 0;
  // [22] Calls specified target and returns a new call object.
  virtual HRESULT STDMETHODCALLTYPE PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                              BSTR Target3/*[in,def,opt]*/, 
                                              BSTR Target4/*[in,def,opt]*/, 
                                              Skype4comlib_tlb::ICall** pCall/*[out,retval]*/) = 0;
  // [23] Sends IM message to specified user and returns a new message object.
  virtual HRESULT STDMETHODCALLTYPE SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/, 
                                                Skype4comlib_tlb::IChatMessage** pMessage/*[out,retval]*/) = 0;
  // [24] Returns a new user object.
  virtual HRESULT STDMETHODCALLTYPE get_User(BSTR Username/*[in,def,opt]*/, 
                                             Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [25] Returns a new message object.
  virtual HRESULT STDMETHODCALLTYPE get_Message(long Id/*[in,def,opt]*/, 
                                                Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/) = 0;
  // [26] Returns a new call object.
  virtual HRESULT STDMETHODCALLTYPE get_Call(long Id/*[in,def,opt]*/, 
                                             Skype4comlib_tlb::ICall** pVal/*[out,retval]*/) = 0;
  // [27] Sends Skype API command.
  virtual HRESULT STDMETHODCALLTYPE SendCommand(Skype4comlib_tlb::ICommand* pCommand/*[in]*/) = 0;
  // [28] Returns user IM conversations.
  virtual HRESULT STDMETHODCALLTYPE get_Chats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/) = 0;
  // [29] Returns new chat object.
  virtual HRESULT STDMETHODCALLTYPE get_Chat(BSTR Name/*[in,def,opt]*/, 
                                             Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;
  // [30] Changes current user online status.
  virtual HRESULT STDMETHODCALLTYPE ChangeUserStatus(Skype4comlib_tlb::TUserStatus newVal/*[in]*/) = 0;
  // [31] Returns a new conference object.
  virtual HRESULT STDMETHODCALLTYPE get_Conference(long Id/*[in,def,opt]*/, 
                                                   Skype4comlib_tlb::IConference** pVal/*[out,retval]*/) = 0;
  // [32] Returns collection of conferences.
  virtual HRESULT STDMETHODCALLTYPE get_Conferences(Skype4comlib_tlb::IConferenceCollection** pVal/*[out,retval]*/) = 0;
  // [33] Returns user profile property value.
  virtual HRESULT STDMETHODCALLTYPE get_Profile(BSTR Property/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [33] Returns user profile property value.
  virtual HRESULT STDMETHODCALLTYPE set_Profile(BSTR Property/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [34] Returns active chats.
  virtual HRESULT STDMETHODCALLTYPE get_ActiveChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/) = 0;
  // [35] Returns missed chats.
  virtual HRESULT STDMETHODCALLTYPE get_MissedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/) = 0;
  // [36] Returns most recent chats.
  virtual HRESULT STDMETHODCALLTYPE get_RecentChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/) = 0;
  // [37] Returns bookmarked chats.
  virtual HRESULT STDMETHODCALLTYPE get_BookmarkedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/) = 0;
  // [38] Creates a new chat with a single user.
  virtual HRESULT STDMETHODCALLTYPE CreateChatWith(BSTR Username/*[in]*/, 
                                                   Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;
  // [39] Creates a new chat with multiple members.
  virtual HRESULT STDMETHODCALLTYPE CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/, 
                                                       Skype4comlib_tlb::IChat** pChat/*[out,retval]*/) = 0;
  // [40] Retuns voicemails.
  virtual HRESULT STDMETHODCALLTYPE get_Voicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/) = 0;
  // [41] Sends voicemail to specified user.
  virtual HRESULT STDMETHODCALLTYPE SendVoicemail(BSTR Username/*[in]*/, 
                                                  Skype4comlib_tlb::IVoicemail** pVoicemail/*[out,retval]*/) = 0;
  // [42] Returns users waiting authorization.
  virtual HRESULT STDMETHODCALLTYPE get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [43] Clears chat history.
  virtual HRESULT STDMETHODCALLTYPE ClearChatHistory(void) = 0;
  // [44] Clears voicemail history.
  virtual HRESULT STDMETHODCALLTYPE ClearVoicemailHistory(void) = 0;
  // [45] Clears call history.
  virtual HRESULT STDMETHODCALLTYPE ClearCallHistory(BSTR Username/*[in,def,opt]*/, 
                                                     Skype4comlib_tlb::TCallHistory Type/*[in,def,opt]*/) = 0;
  // [46] Returns/sets automatic command identifiers.
  virtual HRESULT STDMETHODCALLTYPE get_CommandId(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [46] Returns/sets automatic command identifiers.
  virtual HRESULT STDMETHODCALLTYPE set_CommandId(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [47] Returns new application object.
  virtual HRESULT STDMETHODCALLTYPE get_Application(BSTR Name/*[in]*/, 
                                                    Skype4comlib_tlb::IApplication** pVal/*[out,retval]*/) = 0;
  // [48] Returns user greeting.
  virtual HRESULT STDMETHODCALLTYPE get_Greeting(BSTR Username/*[in,def,opt]*/, 
                                                 Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/) = 0;
  // [49] Enables/disables internal API cache.
  virtual HRESULT STDMETHODCALLTYPE get_Cache(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [49] Enables/disables internal API cache.
  virtual HRESULT STDMETHODCALLTYPE set_Cache(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [50] Empties command cache.
  virtual HRESULT STDMETHODCALLTYPE ResetCache(void) = 0;
  // [51] Returns logged-in user profile object.
  virtual HRESULT STDMETHODCALLTYPE get_CurrentUserProfile(Skype4comlib_tlb::IProfile** pVal/*[out,retval]*/) = 0;
  // [52] Returns all contact groups.
  virtual HRESULT STDMETHODCALLTYPE get_Groups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/) = 0;
  // [53] Returns user defined contact groups.
  virtual HRESULT STDMETHODCALLTYPE get_CustomGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/) = 0;
  // [54] Returns predefined contact groups.
  virtual HRESULT STDMETHODCALLTYPE get_HardwiredGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/) = 0;
  // [55] Creates a new custom group.
  virtual HRESULT STDMETHODCALLTYPE CreateGroup(BSTR GroupName/*[in]*/, 
                                                Skype4comlib_tlb::IGroup** pGroup/*[out,retval]*/) = 0;
  // [56] Deletes a custom group.
  virtual HRESULT STDMETHODCALLTYPE DeleteGroup(long GroupId/*[in]*/) = 0;
  // [57] Returns settings object.
  virtual HRESULT STDMETHODCALLTYPE get_Settings(Skype4comlib_tlb::ISettings** pVal/*[out,retval]*/) = 0;
  // [58] Returns client object.
  virtual HRESULT STDMETHODCALLTYPE get_Client(Skype4comlib_tlb::IClient** pVal/*[out,retval]*/) = 0;
  // [59] Sets application display name.
  virtual HRESULT STDMETHODCALLTYPE set_FriendlyName(BSTR Param1/*[in]*/) = 0;
  // [60] Returns a new command object.
  virtual HRESULT STDMETHODCALLTYPE get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                                BSTR Reply/*[in,def,opt]*/, 
                                                VARIANT_BOOL Block/*[in,def,opt]*/, 
                                                long Timeout/*[in,def,opt]*/, 
                                                Skype4comlib_tlb::ICommand** pVal/*[out,retval]*/) = 0;
  // [61] Returns voicemail object.
  virtual HRESULT STDMETHODCALLTYPE get_Voicemail(long Id/*[in]*/, 
                                                  Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/) = 0;
  // [62] Returns missed voicemails.
  virtual HRESULT STDMETHODCALLTYPE get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/) = 0;
  // [63] Enables API security contexts.
  virtual HRESULT STDMETHODCALLTYPE EnableApiSecurityContext(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/) = 0;
  // [64] Checks for enabled API security contexts.
  virtual HRESULT STDMETHODCALLTYPE get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/, 
                                                                  VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [65] Returns new SMS object.
  virtual HRESULT STDMETHODCALLTYPE CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                              BSTR TargetNumbers/*[in]*/, 
                                              Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/) = 0;
  // [66] Returns SMS messages.
  virtual HRESULT STDMETHODCALLTYPE get_Smss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/) = 0;
  // [67] Returns missed SMS messages.
  virtual HRESULT STDMETHODCALLTYPE get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/) = 0;
  // [68] Sends a SMS messages.
  virtual HRESULT STDMETHODCALLTYPE SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                                            BSTR ReplyToNumber/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/) = 0;
  // [69] Search for Skype users.
  virtual HRESULT STDMETHODCALLTYPE AsyncSearchUsers(BSTR Target/*[in]*/, 
                                                     long* pCookie/*[out,retval]*/) = 0;
  // [70] Returns API wrapper version.
  virtual HRESULT STDMETHODCALLTYPE get_ApiWrapperVersion(BSTR* pVal/*[out,retval]*/) = 0;
  // [71] Returns/sets silent mode.
  virtual HRESULT STDMETHODCALLTYPE get_SilentMode(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [71] Returns/sets silent mode.
  virtual HRESULT STDMETHODCALLTYPE set_SilentMode(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [72] Returns file transfers.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/) = 0;
  // [73] Returns active file transfers.
  virtual HRESULT STDMETHODCALLTYPE get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/) = 0;
  // [74] Returns focused contacts.
  virtual HRESULT STDMETHODCALLTYPE get_FocusedContacts(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [75] Returns chat mathing the blob.
  virtual HRESULT STDMETHODCALLTYPE FindChatUsingBlob(BSTR Blob/*[in]*/, 
                                                      Skype4comlib_tlb::IChat** pChat/*[out,retval]*/) = 0;
  // [76] Returns chat mathing the blob, optionally creating the chat.
  virtual HRESULT STDMETHODCALLTYPE CreateChatUsingBlob(BSTR Blob/*[in]*/, 
                                                        Skype4comlib_tlb::IChat** pChat/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_PredictiveDialerCountry(BSTR* pVal/*[out,retval]*/) = 0; // [77]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Timeout(void)
  {
    long pVal;
    OLECHECK(this->get_Timeout((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Property(ObjectType, ObjectId, PropName, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Variable(BSTR Name/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Variable(Name, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CurrentUserHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CurrentUserHandle((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserStatus __fastcall get_CurrentUserStatus(void)
  {
    Skype4comlib_tlb::TUserStatus pVal;
    OLECHECK(this->get_CurrentUserStatus((Skype4comlib_tlb::TUserStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TConnectionStatus __fastcall get_ConnectionStatus(void)
  {
    Skype4comlib_tlb::TConnectionStatus pVal;
    OLECHECK(this->get_ConnectionStatus((Skype4comlib_tlb::TConnectionStatus*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Mute(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Mute((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Version((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Privilege(BSTR Name/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Privilege(Name, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_CurrentUser(void)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_CurrentUser((Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IConversion* __fastcall get_Convert(void)
  {
    Skype4comlib_tlb::IConversion* pVal;
    OLECHECK(this->get_Convert((Skype4comlib_tlb::IConversion**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Friends(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Friends((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall SearchForUsers(BSTR Target/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->SearchForUsers(Target, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_Calls(BSTR Target/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_Calls(Target, (Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_ActiveCalls(void)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_MissedCalls(void)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_MissedCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_Messages(BSTR Target/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_Messages(Target, (Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_MissedMessages(void)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_MissedMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TAttachmentStatus __fastcall get_AttachmentStatus(void)
  {
    Skype4comlib_tlb::TAttachmentStatus pVal;
    OLECHECK(this->get_AttachmentStatus((Skype4comlib_tlb::TAttachmentStatus*)&pVal));
    return pVal;
  }

  long __fastcall get_Protocol(void)
  {
    long pVal;
    OLECHECK(this->get_Protocol((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICall* __fastcall PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                                BSTR Target3/*[in,def,opt]*/, 
                                                BSTR Target4/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::ICall* pCall;
    OLECHECK(this->PlaceCall(Target, Target2, Target3, Target4, (Skype4comlib_tlb::ICall**)&pCall));
    return pCall;
  }

  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessage* pMessage;
    OLECHECK(this->SendMessage(Username, Text, (Skype4comlib_tlb::IChatMessage**)&pMessage));
    return pMessage;
  }

  Skype4comlib_tlb::IUser* __fastcall get_User(BSTR Username/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_User(Username, (Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessage* __fastcall get_Message(long Id/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IChatMessage* pVal;
    OLECHECK(this->get_Message(Id, (Skype4comlib_tlb::IChatMessage**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICall* __fastcall get_Call(long Id/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::ICall* pVal;
    OLECHECK(this->get_Call(Id, (Skype4comlib_tlb::ICall**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatCollection* __fastcall get_Chats(void)
  {
    Skype4comlib_tlb::IChatCollection* pVal;
    OLECHECK(this->get_Chats((Skype4comlib_tlb::IChatCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall get_Chat(BSTR Name/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->get_Chat(Name, (Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IConference* __fastcall get_Conference(long Id/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IConference* pVal;
    OLECHECK(this->get_Conference(Id, (Skype4comlib_tlb::IConference**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IConferenceCollection* __fastcall get_Conferences(void)
  {
    Skype4comlib_tlb::IConferenceCollection* pVal;
    OLECHECK(this->get_Conferences((Skype4comlib_tlb::IConferenceCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Profile(BSTR Property/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Profile(Property, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatCollection* __fastcall get_ActiveChats(void)
  {
    Skype4comlib_tlb::IChatCollection* pVal;
    OLECHECK(this->get_ActiveChats((Skype4comlib_tlb::IChatCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatCollection* __fastcall get_MissedChats(void)
  {
    Skype4comlib_tlb::IChatCollection* pVal;
    OLECHECK(this->get_MissedChats((Skype4comlib_tlb::IChatCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatCollection* __fastcall get_RecentChats(void)
  {
    Skype4comlib_tlb::IChatCollection* pVal;
    OLECHECK(this->get_RecentChats((Skype4comlib_tlb::IChatCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatCollection* __fastcall get_BookmarkedChats(void)
  {
    Skype4comlib_tlb::IChatCollection* pVal;
    OLECHECK(this->get_BookmarkedChats((Skype4comlib_tlb::IChatCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall CreateChatWith(BSTR Username/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->CreateChatWith(Username, (Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pChat;
    OLECHECK(this->CreateChatMultiple(pMembers, (Skype4comlib_tlb::IChat**)&pChat));
    return pChat;
  }

  Skype4comlib_tlb::IVoicemailCollection* __fastcall get_Voicemails(void)
  {
    Skype4comlib_tlb::IVoicemailCollection* pVal;
    OLECHECK(this->get_Voicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IVoicemail* __fastcall SendVoicemail(BSTR Username/*[in]*/)
  {
    Skype4comlib_tlb::IVoicemail* pVoicemail;
    OLECHECK(this->SendVoicemail(Username, (Skype4comlib_tlb::IVoicemail**)&pVoicemail));
    return pVoicemail;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_UsersWaitingAuthorization(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_UsersWaitingAuthorization((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CommandId(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CommandId((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplication* __fastcall get_Application(BSTR Name/*[in]*/)
  {
    Skype4comlib_tlb::IApplication* pVal;
    OLECHECK(this->get_Application(Name, (Skype4comlib_tlb::IApplication**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IVoicemail* __fastcall get_Greeting(BSTR Username/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IVoicemail* pVal;
    OLECHECK(this->get_Greeting(Username, (Skype4comlib_tlb::IVoicemail**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Cache(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Cache((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IProfile* __fastcall get_CurrentUserProfile(void)
  {
    Skype4comlib_tlb::IProfile* pVal;
    OLECHECK(this->get_CurrentUserProfile((Skype4comlib_tlb::IProfile**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IGroupCollection* __fastcall get_Groups(void)
  {
    Skype4comlib_tlb::IGroupCollection* pVal;
    OLECHECK(this->get_Groups((Skype4comlib_tlb::IGroupCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IGroupCollection* __fastcall get_CustomGroups(void)
  {
    Skype4comlib_tlb::IGroupCollection* pVal;
    OLECHECK(this->get_CustomGroups((Skype4comlib_tlb::IGroupCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IGroupCollection* __fastcall get_HardwiredGroups(void)
  {
    Skype4comlib_tlb::IGroupCollection* pVal;
    OLECHECK(this->get_HardwiredGroups((Skype4comlib_tlb::IGroupCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IGroup* __fastcall CreateGroup(BSTR GroupName/*[in]*/)
  {
    Skype4comlib_tlb::IGroup* pGroup;
    OLECHECK(this->CreateGroup(GroupName, (Skype4comlib_tlb::IGroup**)&pGroup));
    return pGroup;
  }

  Skype4comlib_tlb::ISettings* __fastcall get_Settings(void)
  {
    Skype4comlib_tlb::ISettings* pVal;
    OLECHECK(this->get_Settings((Skype4comlib_tlb::ISettings**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IClient* __fastcall get_Client(void)
  {
    Skype4comlib_tlb::IClient* pVal;
    OLECHECK(this->get_Client((Skype4comlib_tlb::IClient**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICommand* __fastcall get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                                     BSTR Reply/*[in,def,opt]*/, 
                                                     VARIANT_BOOL Block/*[in,def,opt]*/, 
                                                     long Timeout/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::ICommand* pVal;
    OLECHECK(this->get_Command(Id, Command, Reply, Block, Timeout, (Skype4comlib_tlb::ICommand**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IVoicemail* __fastcall get_Voicemail(long Id/*[in]*/)
  {
    Skype4comlib_tlb::IVoicemail* pVal;
    OLECHECK(this->get_Voicemail(Id, (Skype4comlib_tlb::IVoicemail**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IVoicemailCollection* __fastcall get_MissedVoicemails(void)
  {
    Skype4comlib_tlb::IVoicemailCollection* pVal;
    OLECHECK(this->get_MissedVoicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ApiSecurityContextEnabled(Context, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessage* __fastcall CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                                      BSTR TargetNumbers/*[in]*/)
  {
    Skype4comlib_tlb::ISmsMessage* pMessage;
    OLECHECK(this->CreateSms(MessageType, TargetNumbers, (Skype4comlib_tlb::ISmsMessage**)&pMessage));
    return pMessage;
  }

  Skype4comlib_tlb::ISmsMessageCollection* __fastcall get_Smss(void)
  {
    Skype4comlib_tlb::ISmsMessageCollection* pVal;
    OLECHECK(this->get_Smss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessageCollection* __fastcall get_MissedSmss(void)
  {
    Skype4comlib_tlb::ISmsMessageCollection* pVal;
    OLECHECK(this->get_MissedSmss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessage* __fastcall SendSms(BSTR TargetNumbers/*[in]*/, 
                                                    BSTR MessageText/*[in]*/, 
                                                    BSTR ReplyToNumber/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::ISmsMessage* pMessage;
    OLECHECK(this->SendSms(TargetNumbers, MessageText, ReplyToNumber, (Skype4comlib_tlb::ISmsMessage**)&pMessage));
    return pMessage;
  }

  long __fastcall AsyncSearchUsers(BSTR Target/*[in]*/)
  {
    long pCookie;
    OLECHECK(this->AsyncSearchUsers(Target, (long*)&pCookie));
    return pCookie;
  }

  BSTR __fastcall get_ApiWrapperVersion(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ApiWrapperVersion((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SilentMode(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SilentMode((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IFileTransferCollection* __fastcall get_FileTransfers(void)
  {
    Skype4comlib_tlb::IFileTransferCollection* pVal;
    OLECHECK(this->get_FileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IFileTransferCollection* __fastcall get_ActiveFileTransfers(void)
  {
    Skype4comlib_tlb::IFileTransferCollection* pVal;
    OLECHECK(this->get_ActiveFileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_FocusedContacts(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_FocusedContacts((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall FindChatUsingBlob(BSTR Blob/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pChat;
    OLECHECK(this->FindChatUsingBlob(Blob, (Skype4comlib_tlb::IChat**)&pChat));
    return pChat;
  }

  Skype4comlib_tlb::IChat* __fastcall CreateChatUsingBlob(BSTR Blob/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pChat;
    OLECHECK(this->CreateChatUsingBlob(Blob, (Skype4comlib_tlb::IChat**)&pChat));
    return pChat;
  }

  BSTR __fastcall get_PredictiveDialerCountry(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PredictiveDialerCountry((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   BSTR            CurrentUserHandle = {read = get_CurrentUserHandle};
  __property   Skype4comlib_tlb::TUserStatus CurrentUserStatus = {read = get_CurrentUserStatus, write = set_CurrentUserStatus};
  __property   Skype4comlib_tlb::TConnectionStatus ConnectionStatus = {read = get_ConnectionStatus};
  __property   VARIANT_BOOL    Mute = {read = get_Mute, write = set_Mute};
  __property   BSTR            Version = {read = get_Version};
  __property   Skype4comlib_tlb::IUser* CurrentUser = {read = get_CurrentUser};
  __property   Skype4comlib_tlb::IConversion* Convert = {read = get_Convert};
  __property   Skype4comlib_tlb::IUserCollection* Friends = {read = get_Friends};
  __property   Skype4comlib_tlb::ICallCollection* ActiveCalls = {read = get_ActiveCalls};
  __property   Skype4comlib_tlb::ICallCollection* MissedCalls = {read = get_MissedCalls};
  __property   Skype4comlib_tlb::IChatMessageCollection* MissedMessages = {read = get_MissedMessages};
  __property   Skype4comlib_tlb::TAttachmentStatus AttachmentStatus = {read = get_AttachmentStatus};
  __property   long            Protocol = {read = get_Protocol, write = set_Protocol};
  __property   Skype4comlib_tlb::IChatCollection* Chats = {read = get_Chats};
  __property   Skype4comlib_tlb::IConferenceCollection* Conferences = {read = get_Conferences};
  __property   Skype4comlib_tlb::IChatCollection* ActiveChats = {read = get_ActiveChats};
  __property   Skype4comlib_tlb::IChatCollection* MissedChats = {read = get_MissedChats};
  __property   Skype4comlib_tlb::IChatCollection* RecentChats = {read = get_RecentChats};
  __property   Skype4comlib_tlb::IChatCollection* BookmarkedChats = {read = get_BookmarkedChats};
  __property   Skype4comlib_tlb::IVoicemailCollection* Voicemails = {read = get_Voicemails};
  __property   Skype4comlib_tlb::IUserCollection* UsersWaitingAuthorization = {read = get_UsersWaitingAuthorization};
  __property   VARIANT_BOOL    CommandId = {read = get_CommandId, write = set_CommandId};
  __property   VARIANT_BOOL    Cache = {read = get_Cache, write = set_Cache};
  __property   Skype4comlib_tlb::IProfile* CurrentUserProfile = {read = get_CurrentUserProfile};
  __property   Skype4comlib_tlb::IGroupCollection* Groups = {read = get_Groups};
  __property   Skype4comlib_tlb::IGroupCollection* CustomGroups = {read = get_CustomGroups};
  __property   Skype4comlib_tlb::IGroupCollection* HardwiredGroups = {read = get_HardwiredGroups};
  __property   Skype4comlib_tlb::ISettings* Settings = {read = get_Settings};
  __property   Skype4comlib_tlb::IClient* Client = {read = get_Client};
  __property   BSTR            FriendlyName = {write = set_FriendlyName};
  __property   Skype4comlib_tlb::IVoicemailCollection* MissedVoicemails = {read = get_MissedVoicemails};
  __property   Skype4comlib_tlb::ISmsMessageCollection* Smss = {read = get_Smss};
  __property   Skype4comlib_tlb::ISmsMessageCollection* MissedSmss = {read = get_MissedSmss};
  __property   BSTR            ApiWrapperVersion = {read = get_ApiWrapperVersion};
  __property   VARIANT_BOOL    SilentMode = {read = get_SilentMode, write = set_SilentMode};
  __property   Skype4comlib_tlb::IFileTransferCollection* FileTransfers = {read = get_FileTransfers};
  __property   Skype4comlib_tlb::IFileTransferCollection* ActiveFileTransfers = {read = get_ActiveFileTransfers};
  __property   Skype4comlib_tlb::IUserCollection* FocusedContacts = {read = get_FocusedContacts};
  __property   BSTR            PredictiveDialerCountry = {read = get_PredictiveDialerCountry};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IConversion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D82F88A-B307-4074-8ED5-11C3BD213452}
// *********************************************************************//
interface IConversion  : public IDispatch
{
public:
  // [1] Returns online status as text.
  virtual HRESULT STDMETHODCALLTYPE OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns online status code.
  virtual HRESULT STDMETHODCALLTYPE TextToOnlineStatus(BSTR Text/*[in]*/, 
                                                       Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/) = 0;
  // [3] Returns buddy status as text.
  virtual HRESULT STDMETHODCALLTYPE BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/, 
                                                      BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns buddy status code.
  virtual HRESULT STDMETHODCALLTYPE TextToBuddyStatus(BSTR Text/*[in]*/, 
                                                      Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/) = 0;
  // [5] Returns call status as text.
  virtual HRESULT STDMETHODCALLTYPE CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns call status code.
  virtual HRESULT STDMETHODCALLTYPE TextToCallStatus(BSTR Text/*[in]*/, 
                                                     Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;
  // [7] Returns call type as text.
  virtual HRESULT STDMETHODCALLTYPE CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns call type code.
  virtual HRESULT STDMETHODCALLTYPE TextToCallType(BSTR Text/*[in]*/, 
                                                   Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/) = 0;
  // [9] Returns user sex as text.
  virtual HRESULT STDMETHODCALLTYPE UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/, 
                                                  BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns user sex code.
  virtual HRESULT STDMETHODCALLTYPE TextToUserSex(BSTR Text/*[in]*/, 
                                                  Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/) = 0;
  // [11] Returns connection status as text.
  virtual HRESULT STDMETHODCALLTYPE ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns connection status code.
  virtual HRESULT STDMETHODCALLTYPE TextToConnectionStatus(BSTR Text/*[in]*/, 
                                                           Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/) = 0;
  // [13] Returns user status as text.
  virtual HRESULT STDMETHODCALLTYPE UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [14] Returns user status code.
  virtual HRESULT STDMETHODCALLTYPE TextToUserStatus(BSTR Text/*[in]*/, 
                                                     Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/) = 0;
  // [15] Returns failure reason as text.
  virtual HRESULT STDMETHODCALLTYPE CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/) = 0;
  // [16] Returns attachment status as text.
  virtual HRESULT STDMETHODCALLTYPE AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/) = 0;
  // [17] Returns leave reason as text.
  virtual HRESULT STDMETHODCALLTYPE ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [18] Returns chatr status as text.
  virtual HRESULT STDMETHODCALLTYPE ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [19] Returns voicemail type as text.
  virtual HRESULT STDMETHODCALLTYPE VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [20] Returns voicemail status as text.
  virtual HRESULT STDMETHODCALLTYPE VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns voicemail status code.
  virtual HRESULT STDMETHODCALLTYPE TextToVoicemailStatus(BSTR Text/*[in]*/, 
                                                          Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/) = 0;
  // [22] Returns voicemail failure reason as text.
  virtual HRESULT STDMETHODCALLTYPE VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/, 
                                                                 BSTR* pVal/*[out,retval]*/) = 0;
  // [23] Returns message status as text.
  virtual HRESULT STDMETHODCALLTYPE ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Returns message status code.
  virtual HRESULT STDMETHODCALLTYPE TextToChatMessageStatus(BSTR Text/*[in]*/, 
                                                            Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/) = 0;
  // [25] Returns message type as text.
  virtual HRESULT STDMETHODCALLTYPE ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [26] Returns message type code.
  virtual HRESULT STDMETHODCALLTYPE TextToChatMessageType(BSTR Text/*[in]*/, 
                                                          Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/) = 0;
  // [27] Returns attachment status code.
  virtual HRESULT STDMETHODCALLTYPE TextToAttachmentStatus(BSTR Text/*[in]*/, 
                                                           Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/) = 0;
  // [28] Returns group type as text.
  virtual HRESULT STDMETHODCALLTYPE GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/) = 0;
  // [29] Returns group type code.
  virtual HRESULT STDMETHODCALLTYPE TextToGroupType(BSTR Text/*[in]*/, 
                                                    Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/) = 0;
  // [30] Returns call video status as text.
  virtual HRESULT STDMETHODCALLTYPE CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [31] Returns call video send status as text.
  virtual HRESULT STDMETHODCALLTYPE CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/, 
                                                              BSTR* pVal/*[out,retval]*/) = 0;
  // [32] Returns/sets text conversion language.
  virtual HRESULT STDMETHODCALLTYPE get_Language(BSTR* pVal/*[out,retval]*/) = 0;
  // [32] Returns/sets text conversion language.
  virtual HRESULT STDMETHODCALLTYPE set_Language(BSTR pVal/*[in]*/) = 0;
  // [33] Returns SMS message status as text.
  virtual HRESULT STDMETHODCALLTYPE SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/) = 0;
  // [34] Returns SMS message type as text.
  virtual HRESULT STDMETHODCALLTYPE SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [35] Returns SMS target status as text.
  virtual HRESULT STDMETHODCALLTYPE SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->OnlineStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TOnlineStatus __fastcall TextToOnlineStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TOnlineStatus pVal;
    OLECHECK(this->TextToOnlineStatus(Text, (Skype4comlib_tlb::TOnlineStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->BuddyStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TBuddyStatus __fastcall TextToBuddyStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TBuddyStatus pVal;
    OLECHECK(this->TextToBuddyStatus(Text, (Skype4comlib_tlb::TBuddyStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->CallStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall TextToCallStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->TextToCallStatus(Text, (Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->CallTypeToText(CallType, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallType __fastcall TextToCallType(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TCallType pVal;
    OLECHECK(this->TextToCallType(Text, (Skype4comlib_tlb::TCallType*)&pVal));
    return pVal;
  }

  BSTR __fastcall UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->UserSexToText(Sex, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserSex __fastcall TextToUserSex(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TUserSex pVal;
    OLECHECK(this->TextToUserSex(Text, (Skype4comlib_tlb::TUserSex*)&pVal));
    return pVal;
  }

  BSTR __fastcall ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ConnectionStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TConnectionStatus __fastcall TextToConnectionStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TConnectionStatus pVal;
    OLECHECK(this->TextToConnectionStatus(Text, (Skype4comlib_tlb::TConnectionStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->UserStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserStatus __fastcall TextToUserStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TUserStatus pVal;
    OLECHECK(this->TextToUserStatus(Text, (Skype4comlib_tlb::TUserStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->CallFailureReasonToText(reason, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->AttachmentStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ChatLeaveReasonToText(reason, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ChatStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->VoicemailTypeToText(Type, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->VoicemailStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TVoicemailStatus __fastcall TextToVoicemailStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TVoicemailStatus pVal;
    OLECHECK(this->TextToVoicemailStatus(Text, (Skype4comlib_tlb::TVoicemailStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->VoicemailFailureReasonToText(code, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ChatMessageStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageStatus __fastcall TextToChatMessageStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TChatMessageStatus pVal;
    OLECHECK(this->TextToChatMessageStatus(Text, (Skype4comlib_tlb::TChatMessageStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ChatMessageTypeToText(Type, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageType __fastcall TextToChatMessageType(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TChatMessageType pVal;
    OLECHECK(this->TextToChatMessageType(Text, (Skype4comlib_tlb::TChatMessageType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TAttachmentStatus __fastcall TextToAttachmentStatus(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TAttachmentStatus pVal;
    OLECHECK(this->TextToAttachmentStatus(Text, (Skype4comlib_tlb::TAttachmentStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->GroupTypeToText(Type, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TGroupType __fastcall TextToGroupType(BSTR Text/*[in]*/)
  {
    Skype4comlib_tlb::TGroupType pVal;
    OLECHECK(this->TextToGroupType(Text, (Skype4comlib_tlb::TGroupType*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->CallVideoStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->CallVideoSendStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Language(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Language((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->SmsMessageStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->SmsMessageTypeToText(Type, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->SmsTargetStatusToText(Status, (BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Language = {read = get_Language};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICallCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {72E1EC13-0DF9-48AE-8A31-E2900D85BA55}
// *********************************************************************//
interface ICallCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::ICall* pCall/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::ICall** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICall* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::ICall* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::ICall**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChatMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9511117A-7BCA-4669-BE96-6EA6866975C1}
// *********************************************************************//
interface IChatMessageCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IChatMessage* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessage* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessage* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IChatMessage**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChatMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4CFF5C70-3C95-4566-824A-FA164586D535}
// *********************************************************************//
interface IChatMessage  : public IDispatch
{
public:
  // [1] Returns message id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns message timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_Timestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [3] Returns message from handle.
  virtual HRESULT STDMETHODCALLTYPE get_FromHandle(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns message from display name.
  virtual HRESULT STDMETHODCALLTYPE get_FromDisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns message type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/) = 0;
  // [6] Returns message status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/) = 0;
  // [7] Returns chat leave reason.
  virtual HRESULT STDMETHODCALLTYPE get_LeaveReason(Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/) = 0;
  // [8] Returns/sets message body.
  virtual HRESULT STDMETHODCALLTYPE get_Body(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns chat name.
  virtual HRESULT STDMETHODCALLTYPE get_ChatName(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns people added to chat.
  virtual HRESULT STDMETHODCALLTYPE get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [11] Sets message seen status.
  virtual HRESULT STDMETHODCALLTYPE set_Seen(VARIANT_BOOL Param1/*[in]*/) = 0;
  // [12] Returns message chat object.
  virtual HRESULT STDMETHODCALLTYPE get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;
  // [13] Returns message sender.
  virtual HRESULT STDMETHODCALLTYPE get_Sender(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [14] Returns last message editor Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_EditedBy(BSTR* pVal/*[out,retval]*/) = 0;
  // [15] Returns last message edit timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_EditedTimestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [8] Returns/sets message body.
  virtual HRESULT STDMETHODCALLTYPE set_Body(BSTR pVal/*[in]*/) = 0;
  // [16] Returns changed member role.
  virtual HRESULT STDMETHODCALLTYPE get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [17] Returns changed chat options.
  virtual HRESULT STDMETHODCALLTYPE get_Options(long* pVal/*[out,retval]*/) = 0;
  // [18] Returns true if the message can be edited.
  virtual HRESULT STDMETHODCALLTYPE get_IsEditable(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [19] Returns chat message unique identifier.
  virtual HRESULT STDMETHODCALLTYPE get_Guid(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  DATE __fastcall get_Timestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_Timestamp((DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FromHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FromHandle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FromDisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FromDisplayName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TChatMessageType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TChatMessageType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TChatMessageStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TChatMessageStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatLeaveReason __fastcall get_LeaveReason(void)
  {
    Skype4comlib_tlb::TChatLeaveReason pVal;
    OLECHECK(this->get_LeaveReason((Skype4comlib_tlb::TChatLeaveReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Body(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Body((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Users(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall get_Chat(void)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->get_Chat((Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_Sender(void)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_Sender((Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_EditedBy(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_EditedBy((BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_EditedTimestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_EditedTimestamp((DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_Role(void)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_Role((Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  long __fastcall get_Options(void)
  {
    long pVal;
    OLECHECK(this->get_Options((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsEditable(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsEditable((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Guid(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Guid((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            FromHandle = {read = get_FromHandle};
  __property   BSTR            FromDisplayName = {read = get_FromDisplayName};
  __property   Skype4comlib_tlb::TChatMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TChatLeaveReason LeaveReason = {read = get_LeaveReason};
  __property   BSTR            Body = {read = get_Body};
  __property   BSTR            ChatName = {read = get_ChatName};
  __property   Skype4comlib_tlb::IUserCollection* Users = {read = get_Users};
  __property   VARIANT_BOOL    Seen = {write = set_Seen};
  __property   Skype4comlib_tlb::IChat* Chat = {read = get_Chat};
  __property   Skype4comlib_tlb::IUser* Sender = {read = get_Sender};
  __property   BSTR            EditedBy = {read = get_EditedBy};
  __property   DATE            EditedTimestamp = {read = get_EditedTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole Role = {read = get_Role};
  __property   long            Options = {read = get_Options};
  __property   VARIANT_BOOL    IsEditable = {read = get_IsEditable};
  __property   BSTR            Guid = {read = get_Guid};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C24106C-3368-4580-93E5-5ED4ACCDE306}
// *********************************************************************//
interface IChat  : public IDispatch
{
public:
  // [1] Returns/sets chat name.
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns chat messages.
  virtual HRESULT STDMETHODCALLTYPE get_Messages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [3] Returns chat timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_Timestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [4] Returns chat adder.
  virtual HRESULT STDMETHODCALLTYPE get_Adder(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [5] Returns chat status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/) = 0;
  // [6] Returns chat posters.
  virtual HRESULT STDMETHODCALLTYPE get_Posters(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [7] Returns chat members.
  virtual HRESULT STDMETHODCALLTYPE get_Members(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [8] Returns chat topic.
  virtual HRESULT STDMETHODCALLTYPE get_Topic(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns chat topic.
  virtual HRESULT STDMETHODCALLTYPE set_Topic(BSTR pVal/*[in]*/) = 0;
  // [9] Returns chat active members.
  virtual HRESULT STDMETHODCALLTYPE get_ActiveMembers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [10] Returns chat friendly name.
  virtual HRESULT STDMETHODCALLTYPE get_FriendlyName(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Opens chat window.
  virtual HRESULT STDMETHODCALLTYPE OpenWindow(void) = 0;
  // [12] Sends chat message.
  virtual HRESULT STDMETHODCALLTYPE SendMessage(BSTR MessageText/*[in]*/, 
                                                Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/) = 0;
  // [13] Leaves the chat.
  virtual HRESULT STDMETHODCALLTYPE Leave(void) = 0;
  // [14] Adds new members to the chat.
  virtual HRESULT STDMETHODCALLTYPE AddMembers(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/) = 0;
  // [15] Returns most recent chat messages.
  virtual HRESULT STDMETHODCALLTYPE get_RecentMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [16] Returns chat bookmarked status.
  virtual HRESULT STDMETHODCALLTYPE get_Bookmarked(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [17] Bookmarks the chat.
  virtual HRESULT STDMETHODCALLTYPE Bookmark(void) = 0;
  // [18] Bookmarks the chat.
  virtual HRESULT STDMETHODCALLTYPE Unbookmark(void) = 0;
  // [19] Returns/sets chat topic in XML.
  virtual HRESULT STDMETHODCALLTYPE get_TopicXML(BSTR* pVal/*[out,retval]*/) = 0;
  // [19] Returns/sets chat topic in XML.
  virtual HRESULT STDMETHODCALLTYPE set_TopicXML(BSTR pVal/*[in]*/) = 0;
  // [20] Returns chat members collection.
  virtual HRESULT STDMETHODCALLTYPE get_MemberObjects(Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/) = 0;
  // [21] Returns chat global unique identifier.
  virtual HRESULT STDMETHODCALLTYPE get_Blob(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] Returns/sets chat options.
  virtual HRESULT STDMETHODCALLTYPE get_Options(long* pVal/*[out,retval]*/) = 0;
  // [22] Returns/sets chat options.
  virtual HRESULT STDMETHODCALLTYPE set_Options(long pVal/*[in]*/) = 0;
  // [23] Returns chat password hint.
  virtual HRESULT STDMETHODCALLTYPE get_PasswordHint(BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Sets chat password and hint.
  virtual HRESULT STDMETHODCALLTYPE SetPassword(BSTR Password/*[in]*/, BSTR Hint/*[in,def,opt]*/) = 0;
  // [25] Returns/sets chat guidelines.
  virtual HRESULT STDMETHODCALLTYPE get_GuideLines(BSTR* pVal/*[out,retval]*/) = 0;
  // [25] Returns/sets chat guidelines.
  virtual HRESULT STDMETHODCALLTYPE set_GuideLines(BSTR pVal/*[in]*/) = 0;
  // [26] Returns/sets chat description.
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [26] Returns/sets chat description.
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [27] Returns dialog chat partner Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_DialogPartner(BSTR* pVal/*[out,retval]*/) = 0;
  // [28] Returns last chat activity timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_ActivityTimestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [29] Returns my role in chat.
  virtual HRESULT STDMETHODCALLTYPE get_MyRole(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [30] Returns chat applicants collection.
  virtual HRESULT STDMETHODCALLTYPE get_Applicants(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [31] Joins chat.
  virtual HRESULT STDMETHODCALLTYPE Join(void) = 0;
  // [32] Kicks member from chat.
  virtual HRESULT STDMETHODCALLTYPE Kick(BSTR Handle/*[in]*/) = 0;
  // [33] Kicks and bans member from chat.
  virtual HRESULT STDMETHODCALLTYPE KickBan(BSTR Handle/*[in]*/) = 0;
  // [34] Closes chat.
  virtual HRESULT STDMETHODCALLTYPE Disband(void) = 0;
  // [35] Enters password for chat.
  virtual HRESULT STDMETHODCALLTYPE EnterPassword(BSTR Password/*[in]*/) = 0;
  // [36] Clears recent chat messages.
  virtual HRESULT STDMETHODCALLTYPE ClearRecentMessages(void) = 0;
  // [37] Accepts add to shared group.
  virtual HRESULT STDMETHODCALLTYPE AcceptAdd(void) = 0;
  // [38] Sets chat alert string.
  virtual HRESULT STDMETHODCALLTYPE set_AlertString(BSTR Param1/*[in]*/) = 0;
  // [39] Returns chat type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/) = 0;
  // [40] Returns chat status.
  virtual HRESULT STDMETHODCALLTYPE get_MyStatus(Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_Messages(void)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_Messages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  DATE __fastcall get_Timestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_Timestamp((DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_Adder(void)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_Adder((Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TChatStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TChatStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Posters(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Posters((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Members(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Members((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Topic(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Topic((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ActiveMembers(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ActiveMembers((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FriendlyName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FriendlyName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR MessageText/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessage* pVal;
    OLECHECK(this->SendMessage(MessageText, (Skype4comlib_tlb::IChatMessage**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_RecentMessages(void)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_RecentMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Bookmarked(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Bookmarked((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TopicXML(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TopicXML((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMemberCollection* __fastcall get_MemberObjects(void)
  {
    Skype4comlib_tlb::IChatMemberCollection* pVal;
    OLECHECK(this->get_MemberObjects((Skype4comlib_tlb::IChatMemberCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Blob(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Blob((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Options(void)
  {
    long pVal;
    OLECHECK(this->get_Options((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PasswordHint(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PasswordHint((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_GuideLines(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_GuideLines((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DialogPartner(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DialogPartner((BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_ActivityTimestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_ActivityTimestamp((DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_MyRole(void)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_MyRole((Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Applicants(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Applicants((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TChatType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TChatType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMyStatus __fastcall get_MyStatus(void)
  {
    Skype4comlib_tlb::TChatMyStatus pVal;
    OLECHECK(this->get_MyStatus((Skype4comlib_tlb::TChatMyStatus*)&pVal));
    return pVal;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IChatMessageCollection* Messages = {read = get_Messages};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   Skype4comlib_tlb::IUser* Adder = {read = get_Adder};
  __property   Skype4comlib_tlb::TChatStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::IUserCollection* Posters = {read = get_Posters};
  __property   Skype4comlib_tlb::IUserCollection* Members = {read = get_Members};
  __property   BSTR            Topic = {read = get_Topic};
  __property   Skype4comlib_tlb::IUserCollection* ActiveMembers = {read = get_ActiveMembers};
  __property   BSTR            FriendlyName = {read = get_FriendlyName};
  __property   Skype4comlib_tlb::IChatMessageCollection* RecentMessages = {read = get_RecentMessages};
  __property   VARIANT_BOOL    Bookmarked = {read = get_Bookmarked};
  __property   BSTR            TopicXML = {read = get_TopicXML};
  __property   Skype4comlib_tlb::IChatMemberCollection* MemberObjects = {read = get_MemberObjects};
  __property   BSTR            Blob = {read = get_Blob};
  __property   long            Options = {read = get_Options, write = set_Options};
  __property   BSTR            PasswordHint = {read = get_PasswordHint};
  __property   BSTR            GuideLines = {read = get_GuideLines};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            DialogPartner = {read = get_DialogPartner};
  __property   DATE            ActivityTimestamp = {read = get_ActivityTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole MyRole = {read = get_MyRole};
  __property   Skype4comlib_tlb::IUserCollection* Applicants = {read = get_Applicants};
  __property   BSTR            AlertString = {write = set_AlertString};
  __property   Skype4comlib_tlb::TChatType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMyStatus MyStatus = {read = get_MyStatus};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChatMemberCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FFC686B-2E5E-4763-8B03-FF4FD3A0C4DA}
// *********************************************************************//
interface IChatMemberCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IChatMember** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMember* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IChatMember* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IChatMember**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChatMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9E9F0473-94C2-4FDD-85D2-43E3478765F9}
// *********************************************************************//
interface IChatMember  : public IDispatch
{
public:
  // [1] Returns chat member object id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns chat member Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_Handle(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets chat member role.
  virtual HRESULT STDMETHODCALLTYPE get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets chat member role.
  virtual HRESULT STDMETHODCALLTYPE set_Role(Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/) = 0;
  // [4] Returns true if chat member role can be changed.
  virtual HRESULT STDMETHODCALLTYPE get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] Returns true if chat member is active.
  virtual HRESULT STDMETHODCALLTYPE get_IsActive(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6] Returns related Chat object.
  virtual HRESULT STDMETHODCALLTYPE get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Id(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Id((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Handle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Handle((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_Role(void)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_Role((Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CanSetRoleTo(Role, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsActive(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsActive((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall get_Chat(void)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->get_Chat((Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }


  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            Handle = {read = get_Handle};
  __property   Skype4comlib_tlb::TChatMemberRole Role = {read = get_Role, write = set_Role};
  __property   VARIANT_BOOL    IsActive = {read = get_IsActive};
  __property   Skype4comlib_tlb::IChat* Chat = {read = get_Chat};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48E046A8-31D7-4E5F-A611-47BF32B86405}
// *********************************************************************//
interface ICommand  : public IDispatch
{
public:
  // [1] Returns/sets command id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets command id.
  virtual HRESULT STDMETHODCALLTYPE set_Id(long pVal/*[in]*/) = 0;
  // [2] Returns/sets wait timeout in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE get_Timeout(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets wait timeout in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE set_Timeout(long pVal/*[in]*/) = 0;
  // [3] Returns/sets blocking command flag.
  virtual HRESULT STDMETHODCALLTYPE get_Blocking(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets blocking command flag.
  virtual HRESULT STDMETHODCALLTYPE set_Blocking(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [4] Returns/sets command text.
  virtual HRESULT STDMETHODCALLTYPE get_Command(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns/sets command text.
  virtual HRESULT STDMETHODCALLTYPE set_Command(BSTR pVal/*[in]*/) = 0;
  // [5] Returns/sets reply text.
  virtual HRESULT STDMETHODCALLTYPE get_Reply(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns/sets reply text.
  virtual HRESULT STDMETHODCALLTYPE set_Reply(BSTR pVal/*[in]*/) = 0;
  // [6] Returns/sets expected reply text.
  virtual HRESULT STDMETHODCALLTYPE get_Expected(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns/sets expected reply text.
  virtual HRESULT STDMETHODCALLTYPE set_Expected(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Timeout(void)
  {
    long pVal;
    OLECHECK(this->get_Timeout((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Blocking(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Blocking((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Command(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Command((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Reply(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Reply((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Expected(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Expected((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id, write = set_Id};
  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   VARIANT_BOOL    Blocking = {read = get_Blocking, write = set_Blocking};
  __property   BSTR            Command = {read = get_Command};
  __property   BSTR            Reply = {read = get_Reply};
  __property   BSTR            Expected = {read = get_Expected};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChatCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {052A4165-010A-457D-A874-E661B6322846}
// *********************************************************************//
interface IChatCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IChat* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IConference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AEB48497-5090-479C-8BE0-BD51597156A1}
// *********************************************************************//
interface IConference  : public IDispatch
{
public:
  // [1] Returns conference id
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns calls that are part of this conference.
  virtual HRESULT STDMETHODCALLTYPE get_Calls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [3] Returns active calls that are part of this conference.
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [4] Hold conference.
  virtual HRESULT STDMETHODCALLTYPE Hold(void) = 0;
  // [5] Resume conference.
  virtual HRESULT STDMETHODCALLTYPE Resume(void) = 0;
  // [6] End conference.
  virtual HRESULT STDMETHODCALLTYPE Finish(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_Calls(void)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_Calls((Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_ActiveCalls(void)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::ICallCollection* Calls = {read = get_Calls};
  __property   Skype4comlib_tlb::ICallCollection* ActiveCalls = {read = get_ActiveCalls};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IConferenceCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3E0C529-7D4F-4AF5-B501-27D25D4D2825}
// *********************************************************************//
interface IConferenceCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IConference* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IConference** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IConference* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IConference* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IConference**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVoicemailCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21494848-BBD5-4192-BE32-57D1A19D8E94}
// *********************************************************************//
interface IVoicemailCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IVoicemail* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IVoicemail* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IVoicemail* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IVoicemail**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVoicemail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {120B425E-6313-4924-B5A9-3E9F2E444A00}
// *********************************************************************//
interface IVoicemail  : public IDispatch
{
public:
  // [1] Returns voicemail type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/) = 0;
  // [2] Returns voicemail partner handle.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerHandle(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns voicemail partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns voicemail status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/) = 0;
  // [5] Returns voicemail failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_FailureReason(Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/) = 0;
  // [6] Returns voicemail timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_Timestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [7] Returns voicemail duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_Duration(long* pVal/*[out,retval]*/) = 0;
  // [8] Returns voicemail allowed duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_AllowedDuration(long* pVal/*[out,retval]*/) = 0;
  // [9] Returns voicemail id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [10] Opens voicemail.
  virtual HRESULT STDMETHODCALLTYPE Open(void) = 0;
  // [11] Starts voicemail playback.
  virtual HRESULT STDMETHODCALLTYPE StartPlayback(void) = 0;
  // [12] Stops voicemail playback.
  virtual HRESULT STDMETHODCALLTYPE StopPlayback(void) = 0;
  // [13] Uploads voicemail.
  virtual HRESULT STDMETHODCALLTYPE Upload(void) = 0;
  // [14] Downloads voicemail.
  virtual HRESULT STDMETHODCALLTYPE Download(void) = 0;
  // [15] Starts voicemail recording.
  virtual HRESULT STDMETHODCALLTYPE StartRecording(void) = 0;
  // [16] Stops voicemail recording.
  virtual HRESULT STDMETHODCALLTYPE StopRecording(void) = 0;
  // [17] Deletes voicemail.
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0;
  // [18] Starts playback in call.
  virtual HRESULT STDMETHODCALLTYPE StartPlaybackInCall(void) = 0;
  // [19] Changes played voicemail status back to unplayed.
  virtual HRESULT STDMETHODCALLTYPE SetUnplayed(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TVoicemailType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TVoicemailType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TVoicemailType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerDisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerDisplayName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TVoicemailStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TVoicemailStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TVoicemailStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TVoicemailFailureReason __fastcall get_FailureReason(void)
  {
    Skype4comlib_tlb::TVoicemailFailureReason pVal;
    OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TVoicemailFailureReason*)&pVal));
    return pVal;
  }

  DATE __fastcall get_Timestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_Timestamp((DATE*)&pVal));
    return pVal;
  }

  long __fastcall get_Duration(void)
  {
    long pVal;
    OLECHECK(this->get_Duration((long*)&pVal));
    return pVal;
  }

  long __fastcall get_AllowedDuration(void)
  {
    long pVal;
    OLECHECK(this->get_AllowedDuration((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }


  __property   Skype4comlib_tlb::TVoicemailType Type = {read = get_Type};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   Skype4comlib_tlb::TVoicemailStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TVoicemailFailureReason FailureReason = {read = get_FailureReason};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   long            Duration = {read = get_Duration};
  __property   long            AllowedDuration = {read = get_AllowedDuration};
  __property   long            Id = {read = get_Id};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IProfile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9A3D72F-04C1-4878-993C-D89F83E20569}
// *********************************************************************//
interface IProfile  : public IDispatch
{
public:
  // [1] Returns/sets user fullname.
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets user fullname.
  virtual HRESULT STDMETHODCALLTYPE set_FullName(BSTR pVal/*[in]*/) = 0;
  // [2] Returns/sets user birthday.
  virtual HRESULT STDMETHODCALLTYPE get_Birthday(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets user birthday.
  virtual HRESULT STDMETHODCALLTYPE set_Birthday(BSTR pVal/*[in]*/) = 0;
  // [3] Returns/sets user sex.
  virtual HRESULT STDMETHODCALLTYPE get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets user sex.
  virtual HRESULT STDMETHODCALLTYPE set_Sex(Skype4comlib_tlb::TUserSex pVal/*[in]*/) = 0;
  // [4] Returns/sets user language code.
  virtual HRESULT STDMETHODCALLTYPE get_Languages(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns/sets user language code.
  virtual HRESULT STDMETHODCALLTYPE set_Languages(BSTR pVal/*[in]*/) = 0;
  // [5] Returns/sets user country code.
  virtual HRESULT STDMETHODCALLTYPE get_Country(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns/sets user country code.
  virtual HRESULT STDMETHODCALLTYPE set_Country(BSTR pVal/*[in]*/) = 0;
  // [6] Returns/sets user province.
  virtual HRESULT STDMETHODCALLTYPE get_Province(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns/sets user province.
  virtual HRESULT STDMETHODCALLTYPE set_Province(BSTR pVal/*[in]*/) = 0;
  // [7] Returns/sets user city.
  virtual HRESULT STDMETHODCALLTYPE get_City(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets user city.
  virtual HRESULT STDMETHODCALLTYPE set_City(BSTR pVal/*[in]*/) = 0;
  // [8] Returns/sets user home phone.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneHome(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns/sets user home phone.
  virtual HRESULT STDMETHODCALLTYPE set_PhoneHome(BSTR pVal/*[in]*/) = 0;
  // [9] Returns/sets user business phone.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneOffice(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns/sets user business phone.
  virtual HRESULT STDMETHODCALLTYPE set_PhoneOffice(BSTR pVal/*[in]*/) = 0;
  // [10] Returns/sets user mobile phone.
  virtual HRESULT STDMETHODCALLTYPE get_PhoneMobile(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns/sets user mobile phone.
  virtual HRESULT STDMETHODCALLTYPE set_PhoneMobile(BSTR pVal/*[in]*/) = 0;
  // [11] Returns/sets user homepage.
  virtual HRESULT STDMETHODCALLTYPE get_Homepage(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns/sets user homepage.
  virtual HRESULT STDMETHODCALLTYPE set_Homepage(BSTR pVal/*[in]*/) = 0;
  // [12] Returns/sets user about text.
  virtual HRESULT STDMETHODCALLTYPE get_About(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns/sets user about text.
  virtual HRESULT STDMETHODCALLTYPE set_About(BSTR pVal/*[in]*/) = 0;
  // [13] Returns/sets user mood text.
  virtual HRESULT STDMETHODCALLTYPE get_MoodText(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] Returns/sets user mood text.
  virtual HRESULT STDMETHODCALLTYPE set_MoodText(BSTR pVal/*[in]*/) = 0;
  // [14] Returns/sets user timezone.
  virtual HRESULT STDMETHODCALLTYPE get_Timezone(long* pVal/*[out,retval]*/) = 0;
  // [14] Returns/sets user timezone.
  virtual HRESULT STDMETHODCALLTYPE set_Timezone(long pVal/*[in]*/) = 0;
  // [15] Returns/sets user call no answer timeout.
  virtual HRESULT STDMETHODCALLTYPE get_CallNoAnswerTimeout(short* pVal/*[out,retval]*/) = 0;
  // [15] Returns/sets user call no answer timeout.
  virtual HRESULT STDMETHODCALLTYPE set_CallNoAnswerTimeout(short pVal/*[in]*/) = 0;
  // [16] Returns/sets user call apply call forward flag.
  virtual HRESULT STDMETHODCALLTYPE get_CallApplyCF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [16] Returns/sets user call apply call forward flag.
  virtual HRESULT STDMETHODCALLTYPE set_CallApplyCF(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [17] Returns/sets user call send to voicemail flag.
  virtual HRESULT STDMETHODCALLTYPE get_CallSendToVM(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [17] Returns/sets user call send to voicemail flag.
  virtual HRESULT STDMETHODCALLTYPE set_CallSendToVM(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [18] Returns/sets user call forwarding rules.
  virtual HRESULT STDMETHODCALLTYPE get_CallForwardRules(BSTR* pVal/*[out,retval]*/) = 0;
  // [18] Returns/sets user call forwarding rules.
  virtual HRESULT STDMETHODCALLTYPE set_CallForwardRules(BSTR pVal/*[in]*/) = 0;
  // [19] Returns balance in currency cents.
  virtual HRESULT STDMETHODCALLTYPE get_Balance(long* pVal/*[out,retval]*/) = 0;
  // [20] Returns balance currency code.
  virtual HRESULT STDMETHODCALLTYPE get_BalanceCurrency(BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns balance as text.
  virtual HRESULT STDMETHODCALLTYPE get_BalanceToText(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] Returns ISO country code from current IP address.
  virtual HRESULT STDMETHODCALLTYPE get_IPCountry(BSTR* pVal/*[out,retval]*/) = 0;
  // [23] Returns validated SMS reply-to numbers.
  virtual HRESULT STDMETHODCALLTYPE get_ValidatedSmsNumbers(BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Returns/sets mood text in XML.
  virtual HRESULT STDMETHODCALLTYPE get_RichMoodText(BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Returns/sets mood text in XML.
  virtual HRESULT STDMETHODCALLTYPE set_RichMoodText(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_FullName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FullName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Birthday(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Birthday((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void)
  {
    Skype4comlib_tlb::TUserSex pVal;
    OLECHECK(this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Languages(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Languages((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Country(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Country((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Province(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Province((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_City(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_City((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneHome(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneHome((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneOffice(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneOffice((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PhoneMobile(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PhoneMobile((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Homepage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Homepage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_About(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_About((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_MoodText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_MoodText((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Timezone(void)
  {
    long pVal;
    OLECHECK(this->get_Timezone((long*)&pVal));
    return pVal;
  }

  short __fastcall get_CallNoAnswerTimeout(void)
  {
    short pVal;
    OLECHECK(this->get_CallNoAnswerTimeout((short*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallApplyCF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallApplyCF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallSendToVM(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallSendToVM((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallForwardRules(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallForwardRules((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Balance(void)
  {
    long pVal;
    OLECHECK(this->get_Balance((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BalanceCurrency(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BalanceCurrency((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BalanceToText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BalanceToText((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_IPCountry(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_IPCountry((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ValidatedSmsNumbers(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ValidatedSmsNumbers((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RichMoodText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RichMoodText((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex, write = set_Sex};
  __property   BSTR            Languages = {read = get_Languages};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   long            Timezone = {read = get_Timezone, write = set_Timezone};
  __property   short           CallNoAnswerTimeout = {read = get_CallNoAnswerTimeout, write = set_CallNoAnswerTimeout};
  __property   VARIANT_BOOL    CallApplyCF = {read = get_CallApplyCF, write = set_CallApplyCF};
  __property   VARIANT_BOOL    CallSendToVM = {read = get_CallSendToVM, write = set_CallSendToVM};
  __property   BSTR            CallForwardRules = {read = get_CallForwardRules};
  __property   long            Balance = {read = get_Balance};
  __property   BSTR            BalanceCurrency = {read = get_BalanceCurrency};
  __property   BSTR            BalanceToText = {read = get_BalanceToText};
  __property   BSTR            IPCountry = {read = get_IPCountry};
  __property   BSTR            ValidatedSmsNumbers = {read = get_ValidatedSmsNumbers};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IGroupCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C5C99DC-09CF-4A9C-BD94-8D655454A1F4}
// *********************************************************************//
interface IGroupCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IGroup* pGroup/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IGroup** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IGroup* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IGroup* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IGroup**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84513274-9C49-4AAA-B8FC-316EB32CFE95}
// *********************************************************************//
interface IGroup  : public IDispatch
{
public:
  // [1] Returns group id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns group type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/) = 0;
  // [3] Returns custom group persistent id.
  virtual HRESULT STDMETHODCALLTYPE get_CustomGroupId(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns/sets group display name.
  virtual HRESULT STDMETHODCALLTYPE get_DisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns/sets group display name.
  virtual HRESULT STDMETHODCALLTYPE set_DisplayName(BSTR pVal/*[in]*/) = 0;
  // [5] Returns group users.
  virtual HRESULT STDMETHODCALLTYPE get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [6] Returns group online users.
  virtual HRESULT STDMETHODCALLTYPE get_OnlineUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [7] Returns group visible status.
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [8] Returns group expanded status.
  virtual HRESULT STDMETHODCALLTYPE get_IsExpanded(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] Adds new a user or PSTN number to group.
  virtual HRESULT STDMETHODCALLTYPE AddUser(BSTR Username/*[in]*/) = 0;
  // [10] Removes a user or PSTN number from group.
  virtual HRESULT STDMETHODCALLTYPE RemoveUser(BSTR Username/*[in]*/) = 0;
  // [11] Shares a group.
  virtual HRESULT STDMETHODCALLTYPE Share(BSTR MessageText/*[in,def,opt]*/) = 0;
  // [12] Accepts a shared group.
  virtual HRESULT STDMETHODCALLTYPE Accept(void) = 0;
  // [13] Decline a shared group.
  virtual HRESULT STDMETHODCALLTYPE Decline(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TGroupType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TGroupType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TGroupType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CustomGroupId(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CustomGroupId((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DisplayName((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_Users(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_OnlineUsers(void)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_OnlineUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsVisible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsVisible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsExpanded(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsExpanded((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TGroupType Type = {read = get_Type};
  __property   BSTR            CustomGroupId = {read = get_CustomGroupId};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::IUserCollection* Users = {read = get_Users};
  __property   Skype4comlib_tlb::IUserCollection* OnlineUsers = {read = get_OnlineUsers};
  __property   VARIANT_BOOL    IsVisible = {read = get_IsVisible};
  __property   VARIANT_BOOL    IsExpanded = {read = get_IsExpanded};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2BC8C53B-3312-4A77-AC87-31DF18A1EC51}
// *********************************************************************//
interface ISettings  : public IDispatch
{
public:
  // [1] Returns/sets audio in device.
  virtual HRESULT STDMETHODCALLTYPE get_AudioIn(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets audio in device.
  virtual HRESULT STDMETHODCALLTYPE set_AudioIn(BSTR pVal/*[in]*/) = 0;
  // [2] Returns/sets audio out device.
  virtual HRESULT STDMETHODCALLTYPE get_AudioOut(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets audio out device.
  virtual HRESULT STDMETHODCALLTYPE set_AudioOut(BSTR pVal/*[in]*/) = 0;
  // [3] Returns/sets auto-away status.
  virtual HRESULT STDMETHODCALLTYPE get_AutoAway(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [3] Returns/sets auto-away status.
  virtual HRESULT STDMETHODCALLTYPE set_AutoAway(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [4] Returns/sets ringer device.
  virtual HRESULT STDMETHODCALLTYPE get_Ringer(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns/sets ringer device.
  virtual HRESULT STDMETHODCALLTYPE set_Ringer(BSTR pVal/*[in]*/) = 0;
  // [5] Returns/sets user avatar picture.
  virtual HRESULT STDMETHODCALLTYPE set_Avatar(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/) = 0;
  // [6] Returns/sets ringtone status.
  virtual HRESULT STDMETHODCALLTYPE get_RingToneStatus(BSTR Id/*[in,def,opt]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [7] Sets ringtone.
  virtual HRESULT STDMETHODCALLTYPE set_RingTone(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/) = 0;
  // [8] Returns/sets video in device.
  virtual HRESULT STDMETHODCALLTYPE get_VideoIn(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns/sets video in device.
  virtual HRESULT STDMETHODCALLTYPE set_VideoIn(BSTR pVal/*[in]*/) = 0;
  // [9] Returns/sets pc speaker on/off.
  virtual HRESULT STDMETHODCALLTYPE get_PCSpeaker(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] Returns/sets pc speaker on/off.
  virtual HRESULT STDMETHODCALLTYPE set_PCSpeaker(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [10] Returns/sets automatic gain control status.
  virtual HRESULT STDMETHODCALLTYPE get_AGC(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] Returns/sets automatic gain control status.
  virtual HRESULT STDMETHODCALLTYPE set_AGC(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [11] Returns/sets automatic echo cancellation status.
  virtual HRESULT STDMETHODCALLTYPE get_AEC(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [11] Returns/sets automatic echo cancellation status.
  virtual HRESULT STDMETHODCALLTYPE set_AEC(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [12] Returns/sets user interface language.
  virtual HRESULT STDMETHODCALLTYPE get_Language(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns/sets user interface language.
  virtual HRESULT STDMETHODCALLTYPE set_Language(BSTR pVal/*[in]*/) = 0;
  // [6] Returns/sets ringtone status.
  virtual HRESULT STDMETHODCALLTYPE set_RingToneStatus(BSTR Id/*[in,def,opt]*/, 
                                                       VARIANT_BOOL pVal/*[in]*/) = 0;
  // [13] Saves avatar to file.
  virtual HRESULT STDMETHODCALLTYPE SaveAvatarToFile(BSTR Filename/*[in]*/, 
                                                     BSTR AvatarId/*[in,def,opt]*/) = 0;
  // [14] Loads avatar from file.
  virtual HRESULT STDMETHODCALLTYPE LoadAvatarFromFile(BSTR Filename/*[in]*/, 
                                                       BSTR AvatarId/*[in,def,opt]*/) = 0;
  // [15] Resets idle timer.
  virtual HRESULT STDMETHODCALLTYPE ResetIdleTimer(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_AudioIn(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AudioIn((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AudioOut(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AudioOut((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_AutoAway(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_AutoAway((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Ringer(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Ringer((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_RingToneStatus(BSTR Id/*[in,def,opt]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_RingToneStatus(Id, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_VideoIn(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_VideoIn((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_PCSpeaker(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_PCSpeaker((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_AGC(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_AGC((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_AEC(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_AEC((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Language(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Language((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            AudioIn = {read = get_AudioIn};
  __property   BSTR            AudioOut = {read = get_AudioOut};
  __property   VARIANT_BOOL    AutoAway = {read = get_AutoAway, write = set_AutoAway};
  __property   BSTR            Ringer = {read = get_Ringer};
  __property   BSTR            VideoIn = {read = get_VideoIn};
  __property   VARIANT_BOOL    PCSpeaker = {read = get_PCSpeaker, write = set_PCSpeaker};
  __property   VARIANT_BOOL    AGC = {read = get_AGC, write = set_AGC};
  __property   VARIANT_BOOL    AEC = {read = get_AEC, write = set_AEC};
  __property   BSTR            Language = {read = get_Language};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IClient
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {838731B0-88E7-4BED-81DC-B35CA8433341}
// *********************************************************************//
interface IClient  : public IDispatch
{
public:
  // [1] Starts Skype application.
  virtual HRESULT STDMETHODCALLTYPE Start(VARIANT_BOOL Minimized/*[in,def,opt]*/, 
                                          VARIANT_BOOL Nosplash/*[in,def,opt]*/) = 0;
  // [2] Hides Skype application window.
  virtual HRESULT STDMETHODCALLTYPE Minimize(void) = 0;
  // [3] Closes Skype application.
  virtual HRESULT STDMETHODCALLTYPE Shutdown(void) = 0;
  // [4] Returns Skype application running status.
  virtual HRESULT STDMETHODCALLTYPE get_IsRunning(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] Opens current user profile dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenProfileDialog(void) = 0;
  // [6] Opens user information dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenUserInfoDialog(BSTR Username/*[in]*/) = 0;
  // [7] Opens create conference dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenConferenceDialog(void) = 0;
  // [8] Opens search dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenSearchDialog(void) = 0;
  // [9] Opens options dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenOptionsDialog(BSTR Page/*[in]*/) = 0;
  // [10] Opens call history tab.
  virtual HRESULT STDMETHODCALLTYPE OpenCallHistoryTab(void) = 0;
  // [11] Opens contacts tab.
  virtual HRESULT STDMETHODCALLTYPE OpenContactsTab(void) = 0;
  // [12] Opens dial pad tab.
  virtual HRESULT STDMETHODCALLTYPE OpenDialpadTab(void) = 0;
  // [13] Opens send contacts dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenSendContactsDialog(BSTR Username/*[in,def,opt]*/) = 0;
  // [14] Opens blocked users dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenBlockedUsersDialog(void) = 0;
  // [15] Opens import contacts wizard.
  virtual HRESULT STDMETHODCALLTYPE OpenImportContactsWizard(void) = 0;
  // [16] Opens getting started wizard.
  virtual HRESULT STDMETHODCALLTYPE OpenGettingStartedWizard(void) = 0;
  // [17] Opens authorization dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenAuthorizationDialog(BSTR Username/*[in]*/) = 0;
  // [18] Open dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenDialog(BSTR Name/*[in]*/, BSTR Param1/*[in,def,opt]*/, 
                                               BSTR Param2/*[in,def,opt]*/) = 0;
  // [19] Opens video test dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenVideoTestDialog(void) = 0;
  // [20] Opens "Add a Contact" dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenAddContactDialog(BSTR Username/*[in,def,opt]*/) = 0;
  // [21] Opens "Send an IM Message" dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenMessageDialog(BSTR Username/*[in]*/, 
                                                      BSTR Text/*[in,def,opt]*/) = 0;
  // [22] Opens file transfer dialog.
  virtual HRESULT STDMETHODCALLTYPE OpenFileTransferDialog(BSTR User/*[in]*/, BSTR Folder/*[in]*/) = 0;
  // [23] Sets focus to Skype application window.
  virtual HRESULT STDMETHODCALLTYPE Focus(void) = 0;
  // [24] Sends button button pressed to client.
  virtual HRESULT STDMETHODCALLTYPE ButtonPressed(BSTR Key/*[in]*/) = 0;
  // [25] Sends button released event to client.
  virtual HRESULT STDMETHODCALLTYPE ButtonReleased(BSTR Key/*[in]*/) = 0;
  // [26] Opens SMS window
  virtual HRESULT STDMETHODCALLTYPE OpenSmsDialog(BSTR SmsId/*[in]*/) = 0;
  // [27] Creates new plugin event.
  virtual HRESULT STDMETHODCALLTYPE CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                                BSTR Hint/*[in]*/, 
                                                Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/) = 0;
  // [28] Creates new tools menu item
  virtual HRESULT STDMETHODCALLTYPE CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                                   Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                   BSTR CaptionText/*[in]*/, 
                                                   BSTR HintText/*[in,def,opt]*/, 
                                                   BSTR IconPath/*[in,def,opt]*/, 
                                                   VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                   Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                   VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                                   Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/) = 0;
  // [29] Returns/sets wallpaper.
  virtual HRESULT STDMETHODCALLTYPE get_Wallpaper(BSTR* pVal/*[out,retval]*/) = 0;
  // [29] Returns/sets wallpaper.
  virtual HRESULT STDMETHODCALLTYPE set_Wallpaper(BSTR pVal/*[in]*/) = 0;
  // [30] Opens Live tab.
  virtual HRESULT STDMETHODCALLTYPE OpenLiveTab(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_IsRunning(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsRunning((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IPluginEvent* __fastcall CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                                         BSTR Hint/*[in]*/)
  {
    Skype4comlib_tlb::IPluginEvent* pEvent;
    OLECHECK(this->CreateEvent(EventId, Caption, Hint, (Skype4comlib_tlb::IPluginEvent**)&pEvent));
    return pEvent;
  }

  Skype4comlib_tlb::IPluginMenuItem* __fastcall CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                                               Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                               BSTR CaptionText/*[in]*/, 
                                                               BSTR HintText/*[in,def,opt]*/, 
                                                               BSTR IconPath/*[in,def,opt]*/, 
                                                               VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                               Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                               VARIANT_BOOL MultipleContacts/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IPluginMenuItem* pMenuItem;
    OLECHECK(this->CreateMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, 
                                  Enabled, ContactType, MultipleContacts, (Skype4comlib_tlb::IPluginMenuItem**)&pMenuItem));
    return pMenuItem;
  }

  BSTR __fastcall get_Wallpaper(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Wallpaper((BSTR*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    IsRunning = {read = get_IsRunning};
  __property   BSTR            Wallpaper = {read = get_Wallpaper};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPluginEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4DF5F83A-0ABA-417D-A6FC-62A68AE06EF7}
// *********************************************************************//
interface IPluginEvent  : public IDispatch
{
public:
  // [1] Event identity.
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Deletes the event.
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Id(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Id((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Id = {read = get_Id};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPluginMenuItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C4BDF667-3FF7-4B44-A9F4-F3937E3E6D86}
// *********************************************************************//
interface IPluginMenuItem  : public IDispatch
{
public:
  // [1] Menu item identity.
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Menu item caption.
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Param1/*[in]*/) = 0;
  // [3] Menu item hint.
  virtual HRESULT STDMETHODCALLTYPE set_Hint(BSTR Param1/*[in]*/) = 0;
  // [4] Menu item enabled status.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Param1/*[in]*/) = 0;
  // [5] Deletes menu item.
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Id(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Id((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            Caption = {write = set_Caption};
  __property   BSTR            Hint = {write = set_Hint};
  __property   VARIANT_BOOL    Enabled = {write = set_Enabled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D97F2A-0E17-40F3-8E01-24937F936FF4}
// *********************************************************************//
interface ISmsMessage  : public IDispatch
{
public:
  // [1] Returns message id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns message type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/) = 0;
  // [3] Returns message status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/) = 0;
  // [4] Returns message failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_FailureReason(Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/) = 0;
  // [5] Returns true if message failed unseen.
  virtual HRESULT STDMETHODCALLTYPE get_IsFailedUnseen(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6] Sets message status read.
  virtual HRESULT STDMETHODCALLTYPE set_Seen(VARIANT_BOOL Param1/*[in]*/) = 0;
  // [7] Returns price value.
  virtual HRESULT STDMETHODCALLTYPE get_Price(long* pVal/*[out,retval]*/) = 0;
  // [8] Returns price precision.
  virtual HRESULT STDMETHODCALLTYPE get_PricePrecision(long* pVal/*[out,retval]*/) = 0;
  // [9] Returns price currency code.
  virtual HRESULT STDMETHODCALLTYPE get_PriceCurrency(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns/sets reply-to number.
  virtual HRESULT STDMETHODCALLTYPE get_ReplyToNumber(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns/sets reply-to number.
  virtual HRESULT STDMETHODCALLTYPE set_ReplyToNumber(BSTR pVal/*[in]*/) = 0;
  // [11] Returns/sets message targets.
  virtual HRESULT STDMETHODCALLTYPE get_Targets(Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/) = 0;
  // [12] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE get_Body(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE set_Body(BSTR pVal/*[in]*/) = 0;
  // [13] Returns message chunks.
  virtual HRESULT STDMETHODCALLTYPE get_Chunks(Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/) = 0;
  // [14] Returns message timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_Timestamp(DATE* pVal/*[out,retval]*/) = 0;
  // [15] Sends the message.
  virtual HRESULT STDMETHODCALLTYPE Send(void) = 0;
  // [16] Deletes the message.
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0;
  // [17] Returns/sets message target numbers.
  virtual HRESULT STDMETHODCALLTYPE get_TargetNumbers(BSTR* pVal/*[out,retval]*/) = 0;
  // [17] Returns/sets message target numbers.
  virtual HRESULT STDMETHODCALLTYPE set_TargetNumbers(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsMessageType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TSmsMessageType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TSmsMessageType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsMessageStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TSmsMessageStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TSmsMessageStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsFailureReason __fastcall get_FailureReason(void)
  {
    Skype4comlib_tlb::TSmsFailureReason pVal;
    OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TSmsFailureReason*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsFailedUnseen(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsFailedUnseen((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_Price(void)
  {
    long pVal;
    OLECHECK(this->get_Price((long*)&pVal));
    return pVal;
  }

  long __fastcall get_PricePrecision(void)
  {
    long pVal;
    OLECHECK(this->get_PricePrecision((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PriceCurrency(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PriceCurrency((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ReplyToNumber(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ReplyToNumber((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsTargetCollection* __fastcall get_Targets(void)
  {
    Skype4comlib_tlb::ISmsTargetCollection* pVal;
    OLECHECK(this->get_Targets((Skype4comlib_tlb::ISmsTargetCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Body(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Body((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsChunkCollection* __fastcall get_Chunks(void)
  {
    Skype4comlib_tlb::ISmsChunkCollection* pVal;
    OLECHECK(this->get_Chunks((Skype4comlib_tlb::ISmsChunkCollection**)&pVal));
    return pVal;
  }

  DATE __fastcall get_Timestamp(void)
  {
    DATE pVal;
    OLECHECK(this->get_Timestamp((DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TargetNumbers(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TargetNumbers((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TSmsMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TSmsMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TSmsFailureReason FailureReason = {read = get_FailureReason};
  __property   VARIANT_BOOL    IsFailedUnseen = {read = get_IsFailedUnseen};
  __property   VARIANT_BOOL    Seen = {write = set_Seen};
  __property   long            Price = {read = get_Price};
  __property   long            PricePrecision = {read = get_PricePrecision};
  __property   BSTR            PriceCurrency = {read = get_PriceCurrency};
  __property   BSTR            ReplyToNumber = {read = get_ReplyToNumber};
  __property   Skype4comlib_tlb::ISmsTargetCollection* Targets = {read = get_Targets};
  __property   BSTR            Body = {read = get_Body};
  __property   Skype4comlib_tlb::ISmsChunkCollection* Chunks = {read = get_Chunks};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            TargetNumbers = {read = get_TargetNumbers};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsTargetCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2365EF3-4805-4DD3-A9D4-1A8AE3E17D84}
// *********************************************************************//
interface ISmsTargetCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::ISmsTarget* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::ISmsTarget** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsTarget* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::ISmsTarget* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::ISmsTarget**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsTarget
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9B9C33A-49A6-41D5-B13F-2AA4F284F406}
// *********************************************************************//
interface ISmsTarget  : public IDispatch
{
public:
  // [1] Returns message target status
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/) = 0;
  // [2] Returns message target number
  virtual HRESULT STDMETHODCALLTYPE get_Number(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns related SMS message
  virtual HRESULT STDMETHODCALLTYPE get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TSmsTargetStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TSmsTargetStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TSmsTargetStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Number(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Number((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessage* __fastcall get_Message(void)
  {
    Skype4comlib_tlb::ISmsMessage* pVal;
    OLECHECK(this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal));
    return pVal;
  }


  __property   Skype4comlib_tlb::TSmsTargetStatus Status = {read = get_Status};
  __property   BSTR            Number = {read = get_Number};
  __property   Skype4comlib_tlb::ISmsMessage* Message = {read = get_Message};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsChunkCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBDA7D2D-B1C2-4AF9-AB5B-D762341D8903}
// *********************************************************************//
interface ISmsChunkCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::ISmsChunk* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::ISmsChunk** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsChunk* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::ISmsChunk* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::ISmsChunk**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsChunk
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9062508-C926-4415-ABB7-A5A46DB34456}
// *********************************************************************//
interface ISmsChunk  : public IDispatch
{
public:
  // [1] Returns message id.
  virtual HRESULT STDMETHODCALLTYPE get_Id(long* pVal/*[out,retval]*/) = 0;
  // [2] Returns number of characters left in chunk.
  virtual HRESULT STDMETHODCALLTYPE get_CharactersLeft(long* pVal/*[out,retval]*/) = 0;
  // [3] Returns chunk text.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns related SMS message.
  virtual HRESULT STDMETHODCALLTYPE get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Id(void)
  {
    long pVal;
    OLECHECK(this->get_Id((long*)&pVal));
    return pVal;
  }

  long __fastcall get_CharactersLeft(void)
  {
    long pVal;
    OLECHECK(this->get_CharactersLeft((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Text((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessage* __fastcall get_Message(void)
  {
    Skype4comlib_tlb::ISmsMessage* pVal;
    OLECHECK(this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal));
    return pVal;
  }


  __property   long            Id = {read = get_Id};
  __property   long            CharactersLeft = {read = get_CharactersLeft};
  __property   BSTR            Text = {read = get_Text};
  __property   Skype4comlib_tlb::ISmsMessage* Message = {read = get_Message};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmsMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D5BAB2E-69CC-4136-8E02-FC20767DC9E2}
// *********************************************************************//
interface ISmsMessageCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::ISmsMessage* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsMessage* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::ISmsMessage* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::ISmsMessage**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFileTransferCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70A59A25-E823-4C3F-8F33-775008895EE3}
// *********************************************************************//
interface IFileTransferCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::IFileTransfer* pItem/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::IFileTransfer** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IFileTransfer* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::IFileTransfer* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::IFileTransfer**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFileTransfer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D36B368-B88C-45FA-B136-3EF77B2EAD39}
// *********************************************************************//
interface IFileTransfer  : public IDispatch
{
public:
  // [1] Returns file transfer identity.
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns file transfer type.
  virtual HRESULT STDMETHODCALLTYPE get_Type(Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/) = 0;
  // [3] Returns file transfer status.
  virtual HRESULT STDMETHODCALLTYPE get_Status(Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/) = 0;
  // [4] Returns file transfer failure reason code.
  virtual HRESULT STDMETHODCALLTYPE get_FailureReason(Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/) = 0;
  // [5] Returns file transfer partner Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerHandle(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns file transfer partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] Returns file transfer start timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_StartTime(DATE* pVal/*[out,retval]*/) = 0;
  // [8] Returns file transfer end timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_FinishTime(DATE* pVal/*[out,retval]*/) = 0;
  // [9] Returns file transfer file path.
  virtual HRESULT STDMETHODCALLTYPE get_FilePath(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns file transfer file name.
  virtual HRESULT STDMETHODCALLTYPE get_Filename(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns file transfer speed in bytes per second.
  virtual HRESULT STDMETHODCALLTYPE get_BytesPerSecond(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns file transfer total bytes transferred.
  virtual HRESULT STDMETHODCALLTYPE get_BytesTransferred(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Id(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Id((BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TFileTransferType __fastcall get_Type(void)
  {
    Skype4comlib_tlb::TFileTransferType pVal;
    OLECHECK(this->get_Type((Skype4comlib_tlb::TFileTransferType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TFileTransferStatus __fastcall get_Status(void)
  {
    Skype4comlib_tlb::TFileTransferStatus pVal;
    OLECHECK(this->get_Status((Skype4comlib_tlb::TFileTransferStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TFileTransferFailureReason __fastcall get_FailureReason(void)
  {
    Skype4comlib_tlb::TFileTransferFailureReason pVal;
    OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TFileTransferFailureReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerHandle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PartnerDisplayName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PartnerDisplayName((BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_StartTime(void)
  {
    DATE pVal;
    OLECHECK(this->get_StartTime((DATE*)&pVal));
    return pVal;
  }

  DATE __fastcall get_FinishTime(void)
  {
    DATE pVal;
    OLECHECK(this->get_FinishTime((DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FilePath(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FilePath((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Filename(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Filename((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BytesPerSecond(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BytesPerSecond((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BytesTransferred(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BytesTransferred((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TFileTransferType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TFileTransferStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TFileTransferFailureReason FailureReason = {read = get_FailureReason};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   DATE            StartTime = {read = get_StartTime};
  __property   DATE            FinishTime = {read = get_FinishTime};
  __property   BSTR            FilePath = {read = get_FilePath};
  __property   BSTR            Filename = {read = get_Filename};
  __property   BSTR            BytesPerSecond = {read = get_BytesPerSecond};
  __property   BSTR            BytesTransferred = {read = get_BytesTransferred};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICallChannelCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CB09087-E389-4C6D-A6A2-7D4BCA8545D9}
// *********************************************************************//
interface ICallChannelCollection  : public IDispatch
{
public:
  // [1] Returns collection size.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Adds new item to the collection.
  virtual HRESULT STDMETHODCALLTYPE Add(Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/) = 0;
  // [3] Removes item from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(long Index/*[in]*/) = 0;
  // [4] Removes all items from the collection.
  virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;
  // [0] Returns collection item with specified index.
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Skype4comlib_tlb::ICallChannel** pVal/*[out,retval]*/) = 0;
  // [-4] Returns collection enumerator object.
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallChannel* __fastcall get_Item(long Index/*[in]*/)
  {
    Skype4comlib_tlb::ICallChannel* pVal;
    OLECHECK(this->get_Item(Index, (Skype4comlib_tlb::ICallChannel**)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICallChannelMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0EF6FD5D-607D-4EA3-9C90-683D73449E9D}
// *********************************************************************//
interface ICallChannelMessage  : public IDispatch
{
public:
  // [1] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Text(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Text((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Text = {read = get_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeApplication
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55A5200C-B2E8-4795-A6FA-858CA3FE2F26}
// *********************************************************************//
interface ISkypeApplication  : public IDispatch
{
public:
  // [1] Creates application.
  virtual HRESULT STDMETHODCALLTYPE CreateApplication(BSTR Name/*[in]*/) = 0;
  // [2] Deletes application.
  virtual HRESULT STDMETHODCALLTYPE DeleteApplication(BSTR Name/*[in]*/) = 0;
  // [3] Returns application streams.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationStreams(BSTR AppName/*[in]*/, 
                                                           Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;
  // [4] Connects application to user.
  virtual HRESULT STDMETHODCALLTYPE ConnectApplicationUser(BSTR AppName/*[in]*/, 
                                                           BSTR Username/*[in]*/, 
                                                           VARIANT_BOOL WaitConnected/*[in,def,opt]*/) = 0;
  // [5] Reads stream.
  virtual HRESULT STDMETHODCALLTYPE ReadApplicationStream(BSTR AppName/*[in]*/, 
                                                          BSTR StreamHandle/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Writes stream.
  virtual HRESULT STDMETHODCALLTYPE WriteApplicationStream(BSTR AppName/*[in]*/, 
                                                           BSTR StreamHandle/*[in]*/, 
                                                           BSTR Text/*[in]*/) = 0;
  // [7] Returns application connectable users.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationConnectableUsers(BSTR AppName/*[in]*/, 
                                                                    Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [8] Returns currently connecting users.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationConnectingUsers(BSTR AppName/*[in]*/, 
                                                                   Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [9] Disconnects application from user.
  virtual HRESULT STDMETHODCALLTYPE DisconnectApplicationUser(BSTR AppName/*[in]*/, 
                                                              BSTR Username/*[in]*/) = 0;
  // [10] Send datagram on stream.
  virtual HRESULT STDMETHODCALLTYPE SendApplicationDatagram(BSTR AppName/*[in]*/, 
                                                            BSTR StreamHandle/*[in]*/, 
                                                            BSTR Text/*[in]*/) = 0;
  // [11] Returns application sending streams.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationSendingStreams(BSTR AppName/*[in]*/, 
                                                                  Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;
  // [12] Returns application receiving streams.
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationReceivedStreams(BSTR AppName/*[in]*/, 
                                                                   Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationStreams(BSTR AppName/*[in]*/)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_ApplicationStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall ReadApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->ReadApplicationStream(AppName, StreamHandle, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ApplicationConnectableUsers(BSTR AppName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ApplicationConnectableUsers(AppName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ApplicationConnectingUsers(BSTR AppName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ApplicationConnectingUsers(AppName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationSendingStreams(BSTR AppName/*[in]*/)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_ApplicationSendingStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationReceivedStreams(BSTR AppName/*[in]*/)
  {
    Skype4comlib_tlb::IApplicationStreamCollection* pVal;
    OLECHECK(this->get_ApplicationReceivedStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeCall
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54590FC3-0405-4A2D-B4A5-BEAC026577F2}
// *********************************************************************//
interface ISkypeCall  : public IDispatch
{
public:
  // [1] Returns call timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_CallTimestamp(BSTR CallId/*[in]*/, 
                                                      DATE* pVal/*[out,retval]*/) = 0;
  // [2] Returns call partner handle.
  virtual HRESULT STDMETHODCALLTYPE get_CallPartnerHandle(BSTR CallId/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns call partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_CallPartnerDisplayName(BSTR CallId/*[in]*/, 
                                                               BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns call conference id.
  virtual HRESULT STDMETHODCALLTYPE get_CallConferenceId(BSTR CallId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns call type.
  virtual HRESULT STDMETHODCALLTYPE get_CallType(BSTR CallId/*[in]*/, 
                                                 Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/) = 0;
  // [6] Returns call status.
  virtual HRESULT STDMETHODCALLTYPE get_CallStatus(BSTR CallId/*[in]*/, 
                                                   Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;
  // [6] Returns call status.
  virtual HRESULT STDMETHODCALLTYPE set_CallStatus(BSTR CallId/*[in]*/, 
                                                   Skype4comlib_tlb::TCallStatus pVal/*[in]*/) = 0;
  // [7] Returns call failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_CallFailureReason(BSTR CallId/*[in]*/, 
                                                          Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/) = 0;
  // [8] Returns call subject.
  virtual HRESULT STDMETHODCALLTYPE get_CallSubject(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns call PSTN number.
  virtual HRESULT STDMETHODCALLTYPE get_CallPstnNumber(BSTR CallId/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns call duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_CallDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [11] Returns call PSTN status.
  virtual HRESULT STDMETHODCALLTYPE get_CallPstnStatus(BSTR CallId/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Marks call seen.
  virtual HRESULT STDMETHODCALLTYPE set_CallSeenStatus(BSTR CallId/*[in]*/, 
                                                       VARIANT_BOOL pVal/*[in]*/) = 0;
  // [13] Puts call on hold.
  virtual HRESULT STDMETHODCALLTYPE CallHold(BSTR CallId/*[in]*/) = 0;
  // [14] Resumes the held call.
  virtual HRESULT STDMETHODCALLTYPE CallResume(BSTR CallId/*[in]*/) = 0;
  // [15] Ends the call.
  virtual HRESULT STDMETHODCALLTYPE CallFinish(BSTR CallId/*[in]*/) = 0;
  // [16] Answers the call.
  virtual HRESULT STDMETHODCALLTYPE CallAnswer(BSTR CallId/*[in]*/) = 0;
  // [17] Sends valus as DTMF.
  virtual HRESULT STDMETHODCALLTYPE set_CallDTMF(BSTR CallId/*[in]*/, BSTR Param2/*[in]*/) = 0;
  // [18] Returns conference call participants.
  virtual HRESULT STDMETHODCALLTYPE get_CallParticipants(BSTR CallId/*[in]*/, 
                                                         Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/) = 0;
  // [19] Joins the call to conference.
  virtual HRESULT STDMETHODCALLTYPE CallJoin(BSTR CallId1/*[in]*/, BSTR CallId2/*[in]*/) = 0;
  // [20] Returns voicemail duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_CallVmDuration(BSTR CallId/*[in]*/, 
                                                       long* pVal/*[out,retval]*/) = 0;
  // [21] Returns voicemail allowed duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_CallVmAllowedDuration(BSTR CallId/*[in]*/, 
                                                              long* pVal/*[out,retval]*/) = 0;
  // [22] Returns call video status.
  virtual HRESULT STDMETHODCALLTYPE get_CallVideoStatus(BSTR CallId/*[in]*/, 
                                                        Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/) = 0;
  // [23] Returns call video send status.
  virtual HRESULT STDMETHODCALLTYPE get_CallVideoSendStatus(BSTR CallId/*[in]*/, 
                                                            Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/) = 0;
  // [24] Returns call video receive status.
  virtual HRESULT STDMETHODCALLTYPE get_CallVideoReceiveStatus(BSTR CallId/*[in]*/, 
                                                               Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/) = 0;
  // [25] Starts video send.
  virtual HRESULT STDMETHODCALLTYPE StartCallVideoSend(BSTR CallId/*[in]*/) = 0;
  // [26] Stops video send.
  virtual HRESULT STDMETHODCALLTYPE StopCallVideoSend(BSTR CallId/*[in]*/) = 0;
  // [27] Starts video receive.
  virtual HRESULT STDMETHODCALLTYPE StartCallVideoReceive(BSTR CallId/*[in]*/) = 0;
  // [28] Stops video receive.
  virtual HRESULT STDMETHODCALLTYPE StopCallVideoReceive(BSTR CallId/*[in]*/) = 0;
  // [29] Redirects call to voicemail.
  virtual HRESULT STDMETHODCALLTYPE RedirectCallToVoicemail(BSTR CallId/*[in]*/) = 0;
  // [30] Forwards call.
  virtual HRESULT STDMETHODCALLTYPE ForwardCall(BSTR CallId/*[in]*/) = 0;
  // [31] Returns call rate.
  virtual HRESULT STDMETHODCALLTYPE get_CallRate(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [32] Returns call rate currency.
  virtual HRESULT STDMETHODCALLTYPE get_CallRateCurrency(BSTR CallId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [33] Returns call rate precision.
  virtual HRESULT STDMETHODCALLTYPE get_CallRatePrecision(BSTR CallId/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [34] Returns/sets call input sound device.
  virtual HRESULT STDMETHODCALLTYPE get_CallInputDevice(BSTR CallId/*[in]*/, 
                                                        Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [34] Returns/sets call input sound device.
  virtual HRESULT STDMETHODCALLTYPE set_CallInputDevice(BSTR CallId/*[in]*/, 
                                                        Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                        BSTR pVal/*[in]*/) = 0;
  // [35] Returns/sets call output sound device.
  virtual HRESULT STDMETHODCALLTYPE get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                                         Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [35] Returns/sets call output sound device.
  virtual HRESULT STDMETHODCALLTYPE set_CallOutputDevice(BSTR CallId/*[in]*/, 
                                                         Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                         BSTR pVal/*[in]*/) = 0;
  // [36] Returns/sets call microphone sound device.
  virtual HRESULT STDMETHODCALLTYPE get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                                             Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/) = 0;
  // [36] Returns/sets call microphone sound device.
  virtual HRESULT STDMETHODCALLTYPE set_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                                             Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                             BSTR pVal/*[in]*/) = 0;
  // [37] Returns call sound input status.
  virtual HRESULT STDMETHODCALLTYPE get_CallInputStatus(BSTR CallId/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [38] Returns call forwarder identity.
  virtual HRESULT STDMETHODCALLTYPE get_CallForwardedBy(BSTR CallId/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Marks call seen.
  virtual HRESULT STDMETHODCALLTYPE get_CallSeenStatus(BSTR CallId/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [39] Returns true if call can be transferred.
  virtual HRESULT STDMETHODCALLTYPE get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [40] Returns call transfer status.
  virtual HRESULT STDMETHODCALLTYPE get_CallTransferStatus(BSTR CallId/*[in]*/, 
                                                           Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/) = 0;
  // [41] Returns true if call transfer is active.
  virtual HRESULT STDMETHODCALLTYPE get_CallTransferActive(BSTR CallId/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [42] Returns call transferrer identity.
  virtual HRESULT STDMETHODCALLTYPE get_CallTransferredBy(BSTR CallId/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [43] Returns call transfer target identity.
  virtual HRESULT STDMETHODCALLTYPE get_CallTransferredTo(BSTR CallId/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [44] Transfers the call to target user.
  virtual HRESULT STDMETHODCALLTYPE TransferCall(BSTR CallId/*[in]*/, BSTR Target/*[in]*/) = 0;
  // [46] Returns the target number for incoming SkypeIN calls.
  virtual HRESULT STDMETHODCALLTYPE get_CallTargetIdentity(BSTR CallId/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  DATE __fastcall get_CallTimestamp(BSTR CallId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_CallTimestamp(CallId, (DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallPartnerHandle(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallPartnerHandle(CallId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallPartnerDisplayName(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallPartnerDisplayName(CallId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallConferenceId(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallConferenceId(CallId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallType __fastcall get_CallType(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallType pVal;
    OLECHECK(this->get_CallType(CallId, (Skype4comlib_tlb::TCallType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall get_CallStatus(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->get_CallStatus(CallId, (Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallFailureReason __fastcall get_CallFailureReason(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallFailureReason pVal;
    OLECHECK(this->get_CallFailureReason(CallId, (Skype4comlib_tlb::TCallFailureReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallSubject(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallSubject(CallId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallPstnNumber(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallPstnNumber(CallId, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CallDuration(BSTR CallId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CallDuration(CallId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallPstnStatus(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallPstnStatus(CallId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IParticipantCollection* __fastcall get_CallParticipants(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::IParticipantCollection* pVal;
    OLECHECK(this->get_CallParticipants(CallId, (Skype4comlib_tlb::IParticipantCollection**)&pVal));
    return pVal;
  }

  long __fastcall get_CallVmDuration(BSTR CallId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CallVmDuration(CallId, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_CallVmAllowedDuration(BSTR CallId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CallVmAllowedDuration(CallId, (long*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoStatus __fastcall get_CallVideoStatus(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallVideoStatus pVal;
    OLECHECK(this->get_CallVideoStatus(CallId, (Skype4comlib_tlb::TCallVideoStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_CallVideoSendStatus(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallVideoSendStatus pVal;
    OLECHECK(this->get_CallVideoSendStatus(CallId, (Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_CallVideoReceiveStatus(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallVideoSendStatus pVal;
    OLECHECK(this->get_CallVideoReceiveStatus(CallId, (Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
    return pVal;
  }

  long __fastcall get_CallRate(BSTR CallId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CallRate(CallId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallRateCurrency(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallRateCurrency(CallId, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CallRatePrecision(BSTR CallId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CallRatePrecision(CallId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallInputDevice(BSTR CallId/*[in]*/, 
                                      Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallInputDevice(CallId, DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                       Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallOutputDevice(CallId, DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                           Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallCaptureMicDevice(CallId, DeviceType, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallInputStatus(BSTR CallId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallInputStatus(CallId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallForwardedBy(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallForwardedBy(CallId, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallSeenStatus(BSTR CallId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallSeenStatus(CallId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallCanTransfer(CallId, Target, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TCallStatus __fastcall get_CallTransferStatus(BSTR CallId/*[in]*/)
  {
    Skype4comlib_tlb::TCallStatus pVal;
    OLECHECK(this->get_CallTransferStatus(CallId, (Skype4comlib_tlb::TCallStatus*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallTransferActive(BSTR CallId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallTransferActive(CallId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallTransferredBy(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallTransferredBy(CallId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallTransferredTo(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallTransferredTo(CallId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CallTargetIdentity(BSTR CallId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CallTargetIdentity(CallId, (BSTR*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeChat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F6758D2-1D3C-4A8F-BD99-6FC6B0E2DC8F}
// *********************************************************************//
interface ISkypeChat  : public IDispatch
{
public:
  // [1] Returns chat timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_ChatTimestamp(BSTR ChatName/*[in]*/, 
                                                      DATE* pVal/*[out,retval]*/) = 0;
  // [2] Returns chat adder.
  virtual HRESULT STDMETHODCALLTYPE get_ChatAdder(BSTR ChatName/*[in]*/, 
                                                  Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [3] Returns chat status.
  virtual HRESULT STDMETHODCALLTYPE get_ChatStatus(BSTR ChatName/*[in]*/, 
                                                   Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/) = 0;
  // [4] Returns chat posters.
  virtual HRESULT STDMETHODCALLTYPE get_ChatPosters(BSTR ChatName/*[in]*/, 
                                                    Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [5] Returns chat members.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMembers(BSTR ChatName/*[in]*/, 
                                                    Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [6] Returns chat topic.
  virtual HRESULT STDMETHODCALLTYPE get_ChatTopic(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns chat topic.
  virtual HRESULT STDMETHODCALLTYPE set_ChatTopic(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [7] Returns chat active members.
  virtual HRESULT STDMETHODCALLTYPE get_ChatActiveMembers(BSTR ChatName/*[in]*/, 
                                                          Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [8] Returns chat friendly name.
  virtual HRESULT STDMETHODCALLTYPE get_ChatFriendlyName(BSTR ChatName/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns chat messages.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessages(BSTR ChatName/*[in]*/, 
                                                     Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [10] Opens chat window.
  virtual HRESULT STDMETHODCALLTYPE OpenChatWindow(BSTR ChatName/*[in]*/) = 0;
  // [11] Sends chat message.
  virtual HRESULT STDMETHODCALLTYPE SendChatMessage(BSTR ChatName/*[in]*/, BSTR MessageText/*[in]*/, 
                                                    Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/) = 0;
  // [12] Leaves the chat.
  virtual HRESULT STDMETHODCALLTYPE LeaveChat(BSTR ChatName/*[in]*/) = 0;
  // [13] Adds new members to the chat.
  virtual HRESULT STDMETHODCALLTYPE AddChatMembers(BSTR ChatName/*[in]*/, 
                                                   Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/) = 0;
  // [14] Returns most recent chat messages.
  virtual HRESULT STDMETHODCALLTYPE get_ChatRecentMessages(BSTR ChatName/*[in]*/, 
                                                           Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/) = 0;
  // [15] Returns chat bookmarked status.
  virtual HRESULT STDMETHODCALLTYPE get_ChatBookmarked(BSTR ChatName/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [16] Bookmarks the chat.
  virtual HRESULT STDMETHODCALLTYPE BookmarkChat(BSTR ChatName/*[in]*/) = 0;
  // [17] Unbookmarks the chat.
  virtual HRESULT STDMETHODCALLTYPE UnbookmarkChat(BSTR ChatName/*[in]*/) = 0;
  // [18] Returns/sets chat topic in XML.
  virtual HRESULT STDMETHODCALLTYPE get_ChatTopicXML(BSTR ChatName/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [18] Returns/sets chat topic in XML.
  virtual HRESULT STDMETHODCALLTYPE set_ChatTopicXML(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [19] Returns chat members collection.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMemberObjects(BSTR ChatName/*[in]*/, 
                                                          Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/) = 0;
  // [20] Returns chat global unique identifier.
  virtual HRESULT STDMETHODCALLTYPE get_ChatBlob(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns/sets chat options.
  virtual HRESULT STDMETHODCALLTYPE get_ChatOptions(BSTR ChatName/*[in]*/, 
                                                    long* pVal/*[out,retval]*/) = 0;
  // [21] Returns/sets chat options.
  virtual HRESULT STDMETHODCALLTYPE set_ChatOptions(BSTR ChatName/*[in]*/, long pVal/*[in]*/) = 0;
  // [22] Returns chat password hint.
  virtual HRESULT STDMETHODCALLTYPE get_ChatPasswordHint(BSTR ChatName/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [23] Sets chat password and hint.
  virtual HRESULT STDMETHODCALLTYPE SetChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/, 
                                                    BSTR Hint/*[in,def,opt]*/) = 0;
  // [24] Returns/sets chat guidelines.
  virtual HRESULT STDMETHODCALLTYPE get_ChatGuideLines(BSTR ChatName/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Returns/sets chat guidelines.
  virtual HRESULT STDMETHODCALLTYPE set_ChatGuideLines(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [25] Returns/sets chat description.
  virtual HRESULT STDMETHODCALLTYPE get_ChatDescription(BSTR ChatName/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [25] Returns/sets chat description.
  virtual HRESULT STDMETHODCALLTYPE set_ChatDescription(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [26] Returns dialog chat partner Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_ChatDialogPartner(BSTR ChatName/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/) = 0;
  // [27] Returns last chat activity timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_ChatActivityTimestamp(BSTR ChatName/*[in]*/, 
                                                              DATE* pVal/*[out,retval]*/) = 0;
  // [28] Returns my role in chat.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMyRole(BSTR ChatName/*[in]*/, 
                                                   Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [29] Returns chat applicants collection.
  virtual HRESULT STDMETHODCALLTYPE get_ChatApplicants(BSTR ChatName/*[in]*/, 
                                                       Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [30] Joins chat.
  virtual HRESULT STDMETHODCALLTYPE JoinChat(BSTR ChatName/*[in]*/) = 0;
  // [31] Kicks member from chat.
  virtual HRESULT STDMETHODCALLTYPE KickChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/) = 0;
  // [32] Kicks and bans member from chat.
  virtual HRESULT STDMETHODCALLTYPE KickBanChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/) = 0;
  // [33] Closes chat.
  virtual HRESULT STDMETHODCALLTYPE DisbandChat(BSTR ChatName/*[in]*/) = 0;
  // [34] Enters password for chat.
  virtual HRESULT STDMETHODCALLTYPE EnterChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/) = 0;
  // [35] Clears recent chat messages.
  virtual HRESULT STDMETHODCALLTYPE ClearChatRecentMessages(BSTR ChatName/*[in]*/) = 0;
  // [36] Accepts add to shared group.
  virtual HRESULT STDMETHODCALLTYPE AcceptSharedGroupAdd(BSTR ChatName/*[in]*/) = 0;
  // [37] Sets chat alert string.
  virtual HRESULT STDMETHODCALLTYPE set_ChatAlertString(BSTR ChatName/*[in]*/, BSTR Param2/*[in]*/) = 0;
  // [38] Returns chat type.
  virtual HRESULT STDMETHODCALLTYPE get_ChatType(BSTR ChatName/*[in]*/, 
                                                 Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/) = 0;
  // [39] Returns chat status.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMyStatus(BSTR ChatName/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  DATE __fastcall get_ChatTimestamp(BSTR ChatName/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_ChatTimestamp(ChatName, (DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_ChatAdder(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_ChatAdder(ChatName, (Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatStatus __fastcall get_ChatStatus(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::TChatStatus pVal;
    OLECHECK(this->get_ChatStatus(ChatName, (Skype4comlib_tlb::TChatStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatPosters(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ChatPosters(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatMembers(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ChatMembers(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatTopic(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatTopic(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatActiveMembers(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ChatActiveMembers(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatFriendlyName(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatFriendlyName(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_ChatMessages(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_ChatMessages(ChatName, (Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessage* __fastcall SendChatMessage(BSTR ChatName/*[in]*/, 
                                                             BSTR MessageText/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessage* pVal;
    OLECHECK(this->SendChatMessage(ChatName, MessageText, (Skype4comlib_tlb::IChatMessage**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_ChatRecentMessages(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IChatMessageCollection* pVal;
    OLECHECK(this->get_ChatRecentMessages(ChatName, (Skype4comlib_tlb::IChatMessageCollection**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ChatBookmarked(BSTR ChatName/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ChatBookmarked(ChatName, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatTopicXML(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatTopicXML(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChatMemberCollection* __fastcall get_ChatMemberObjects(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IChatMemberCollection* pVal;
    OLECHECK(this->get_ChatMemberObjects(ChatName, (Skype4comlib_tlb::IChatMemberCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatBlob(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatBlob(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ChatOptions(BSTR ChatName/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_ChatOptions(ChatName, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatPasswordHint(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatPasswordHint(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatGuideLines(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatGuideLines(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatDescription(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatDescription(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatDialogPartner(BSTR ChatName/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatDialogPartner(ChatName, (BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_ChatActivityTimestamp(BSTR ChatName/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_ChatActivityTimestamp(ChatName, (DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMyRole(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_ChatMyRole(ChatName, (Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatApplicants(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ChatApplicants(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatType __fastcall get_ChatType(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::TChatType pVal;
    OLECHECK(this->get_ChatType(ChatName, (Skype4comlib_tlb::TChatType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMyStatus __fastcall get_ChatMyStatus(BSTR ChatName/*[in]*/)
  {
    Skype4comlib_tlb::TChatMyStatus pVal;
    OLECHECK(this->get_ChatMyStatus(ChatName, (Skype4comlib_tlb::TChatMyStatus*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeChatMessage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A569B841-CC8A-4C12-B937-CBC17D9E64F0}
// *********************************************************************//
interface ISkypeChatMessage  : public IDispatch
{
public:
  // [1] Returns message timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageTimestamp(BSTR MessageId/*[in]*/, 
                                                             DATE* pVal/*[out,retval]*/) = 0;
  // [2] Returns message from handle.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageFromHandle(BSTR MessageId/*[in]*/, 
                                                              BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns message from display name.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/, 
                                                                   BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns message type.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageType(BSTR MessageId/*[in]*/, 
                                                        Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/) = 0;
  // [5] Returns message status.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageStatus(BSTR MessageId/*[in]*/, 
                                                          Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/) = 0;
  // [6] Returns chat leave reason.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/, 
                                                               Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets message body.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageBody(BSTR MessageId/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns chat name.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageChatname(BSTR MessageId/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns people added to chat.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageUsers(BSTR MessageId/*[in]*/, 
                                                         Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/) = 0;
  // [10] Sets message seen status.
  virtual HRESULT STDMETHODCALLTYPE set_ChatMessageSeen(BSTR Param1/*[in]*/) = 0;
  // [11] Returns message sender.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageSender(BSTR MessageId/*[in]*/, 
                                                          Skype4comlib_tlb::IUser** pVal/*[out,retval]*/) = 0;
  // [12] Returns true if the message can be edited.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageIsEditable(BSTR MessageId/*[in]*/, 
                                                              VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [13] Returns last message editor Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageEditedBy(BSTR MessageId/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/) = 0;
  // [14] Returns last message edit timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageEditedTimestamp(BSTR MessageId, 
                                                                   DATE* pVal/*[out,retval]*/) = 0;
  // [7] Returns/sets message body.
  virtual HRESULT STDMETHODCALLTYPE set_ChatMessageBody(BSTR MessageId/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [15] Returns changed member role.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageRole(BSTR MessageId/*[in]*/, 
                                                        Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [16] Returns changed chat options.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageOptons(BSTR MessageId/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [17] Returns chat message unique identifier.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMessageGuid(BSTR MessageId/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  DATE __fastcall get_ChatMessageTimestamp(BSTR MessageId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_ChatMessageTimestamp(MessageId, (DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageFromHandle(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageFromHandle(MessageId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageFromDisplayName(MessageId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageType __fastcall get_ChatMessageType(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::TChatMessageType pVal;
    OLECHECK(this->get_ChatMessageType(MessageId, (Skype4comlib_tlb::TChatMessageType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMessageStatus __fastcall get_ChatMessageStatus(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::TChatMessageStatus pVal;
    OLECHECK(this->get_ChatMessageStatus(MessageId, (Skype4comlib_tlb::TChatMessageStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatLeaveReason __fastcall get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::TChatLeaveReason pVal;
    OLECHECK(this->get_ChatMessageLeaveReason(MessageId, (Skype4comlib_tlb::TChatLeaveReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageBody(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageBody(MessageId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageChatname(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageChatname(MessageId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatMessageUsers(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::IUserCollection* pVal;
    OLECHECK(this->get_ChatMessageUsers(MessageId, (Skype4comlib_tlb::IUserCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IUser* __fastcall get_ChatMessageSender(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::IUser* pVal;
    OLECHECK(this->get_ChatMessageSender(MessageId, (Skype4comlib_tlb::IUser**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ChatMessageIsEditable(BSTR MessageId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ChatMessageIsEditable(MessageId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageEditedBy(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageEditedBy(MessageId, (BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_ChatMessageEditedTimestamp(BSTR MessageId)
  {
    DATE pVal;
    OLECHECK(this->get_ChatMessageEditedTimestamp(MessageId, (DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMessageRole(BSTR MessageId/*[in]*/)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_ChatMessageRole(MessageId, (Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  long __fastcall get_ChatMessageOptons(BSTR MessageId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_ChatMessageOptons(MessageId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChatMessageGuid(BSTR MessageId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMessageGuid(MessageId, (BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ChatMessageSeen = {write = set_ChatMessageSeen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeChatMember
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6CF6DBDE-AB7C-4635-96ED-2FF525AB4457}
// *********************************************************************//
interface ISkypeChatMember  : public IDispatch
{
public:
  // [1] Returns chat member object id.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMemberHandle(BSTR MemberId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets chat member role.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                                       Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/) = 0;
  // [2] Returns/sets chat member role.
  virtual HRESULT STDMETHODCALLTYPE set_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                                       Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/) = 0;
  // [3] Returns true if chat member role can be changed.
  virtual HRESULT STDMETHODCALLTYPE get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                               Skype4comlib_tlb::TChatMemberRole Role/*[in]*/, 
                                                               VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [4] Returns true if chat member is active.
  virtual HRESULT STDMETHODCALLTYPE get_IsChatMemberActive(BSTR MemberId/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] Returns related Chat object.
  virtual HRESULT STDMETHODCALLTYPE get_ChatMemberChat(BSTR MemberId/*[in]*/, 
                                                       Skype4comlib_tlb::IChat** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ChatMemberHandle(BSTR MemberId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChatMemberHandle(MemberId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMemberRole(BSTR MemberId/*[in]*/)
  {
    Skype4comlib_tlb::TChatMemberRole pVal;
    OLECHECK(this->get_ChatMemberRole(MemberId, (Skype4comlib_tlb::TChatMemberRole*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CanSetChatMemberRoleTo(MemberId, Role, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsChatMemberActive(BSTR MemberId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsChatMemberActive(MemberId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::IChat* __fastcall get_ChatMemberChat(BSTR MemberId/*[in]*/)
  {
    Skype4comlib_tlb::IChat* pVal;
    OLECHECK(this->get_ChatMemberChat(MemberId, (Skype4comlib_tlb::IChat**)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeConference
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30678F8A-C104-40C0-A6AE-7C150E83300E}
// *********************************************************************//
interface ISkypeConference  : public IDispatch
{
public:
  // [1] Returns calls that are part of this conference.
  virtual HRESULT STDMETHODCALLTYPE get_ConferenceCalls(BSTR ConfId/*[in]*/, 
                                                        Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;
  // [2] Returns active calls that are part of this conference.
  virtual HRESULT STDMETHODCALLTYPE get_ConferenceActiveCalls(BSTR ConfId/*[in]*/, 
                                                              Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::ICallCollection* __fastcall get_ConferenceCalls(BSTR ConfId/*[in]*/)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_ConferenceCalls(ConfId, (Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ICallCollection* __fastcall get_ConferenceActiveCalls(BSTR ConfId/*[in]*/)
  {
    Skype4comlib_tlb::ICallCollection* pVal;
    OLECHECK(this->get_ConferenceActiveCalls(ConfId, (Skype4comlib_tlb::ICallCollection**)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeFileTransfer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B929860-6AF4-40DF-9D77-308CA7C23E66}
// *********************************************************************//
interface ISkypeFileTransfer  : public IDispatch
{
public:
  // [1] Returns file transfer type.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferType(BSTR TransferId/*[in]*/, 
                                                         Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/) = 0;
  // [2] Returns file transfer status.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferStatus(BSTR TransferId/*[in]*/, 
                                                           Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/) = 0;
  // [3] Returns file transfer failure reason code.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferFailureReason(BSTR TransferId/*[in]*/, 
                                                                  Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/) = 0;
  // [4] Returns file transfer partner Skypename.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/, 
                                                                  BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns file transfer partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/, 
                                                                       BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns file transfer start timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferStartTime(BSTR TransferId/*[in]*/, 
                                                              DATE* pVal/*[out,retval]*/) = 0;
  // [7] Returns file transfer end timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferFinishTime(BSTR TransferId/*[in]*/, 
                                                               DATE* pVal/*[out,retval]*/) = 0;
  // [8] Returns file transfer file path.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferFilePath(BSTR TransferId/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns file transfer file name.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferFileName(BSTR TransferId/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns file transfer speed in bytes per second.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/, 
                                                                   BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns file transfer total bytes transferred.
  virtual HRESULT STDMETHODCALLTYPE get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/, 
                                                                     BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TFileTransferType __fastcall get_FileTransferType(BSTR TransferId/*[in]*/)
  {
    Skype4comlib_tlb::TFileTransferType pVal;
    OLECHECK(this->get_FileTransferType(TransferId, (Skype4comlib_tlb::TFileTransferType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TFileTransferStatus __fastcall get_FileTransferStatus(BSTR TransferId/*[in]*/)
  {
    Skype4comlib_tlb::TFileTransferStatus pVal;
    OLECHECK(this->get_FileTransferStatus(TransferId, (Skype4comlib_tlb::TFileTransferStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TFileTransferFailureReason __fastcall get_FileTransferFailureReason(BSTR TransferId/*[in]*/)
  {
    Skype4comlib_tlb::TFileTransferFailureReason pVal;
    OLECHECK(this->get_FileTransferFailureReason(TransferId, (Skype4comlib_tlb::TFileTransferFailureReason*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferPartnerHandle(TransferId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferPartnerDisplayName(TransferId, (BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_FileTransferStartTime(BSTR TransferId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_FileTransferStartTime(TransferId, (DATE*)&pVal));
    return pVal;
  }

  DATE __fastcall get_FileTransferFinishTime(BSTR TransferId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_FileTransferFinishTime(TransferId, (DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferFilePath(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferFilePath(TransferId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferFileName(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferFileName(TransferId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferBytesPerSecond(TransferId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileTransferBytesTransferred(TransferId, (BSTR*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeSms
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D0B4547-771D-4C4F-B3E8-98A33FD24D2B}
// *********************************************************************//
interface ISkypeSms  : public IDispatch
{
public:
  // [1] Returns message type.
  virtual HRESULT STDMETHODCALLTYPE get_SmsMessageType(BSTR SmsId/*[in]*/, 
                                                       Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/) = 0;
  // [2] Returns message status.
  virtual HRESULT STDMETHODCALLTYPE get_SmsMessageStatus(BSTR SmsId/*[in]*/, 
                                                         Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/) = 0;
  // [3] Returns message failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_SmsFailureReason(BSTR SmsId/*[in]*/, 
                                                         Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/) = 0;
  // [4] Returns true if message failed unseen.
  virtual HRESULT STDMETHODCALLTYPE get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/, 
                                                          VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] Sets message status read.
  virtual HRESULT STDMETHODCALLTYPE set_SmsSeen(BSTR Param1/*[in]*/) = 0;
  // [6] Returns price value.
  virtual HRESULT STDMETHODCALLTYPE get_SmsPrice(BSTR SmsId/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [7] Returns price currency code.
  virtual HRESULT STDMETHODCALLTYPE get_SmsPriceCurrency(BSTR SmsId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns price precision.
  virtual HRESULT STDMETHODCALLTYPE get_SmsPricePrecision(BSTR SmsId/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [9] Returns/sets reply-to number.
  virtual HRESULT STDMETHODCALLTYPE get_SmsReplyToNumber(BSTR SmsId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns/sets reply-to number.
  virtual HRESULT STDMETHODCALLTYPE set_SmsReplyToNumber(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [10] Returns/sets message targets.
  virtual HRESULT STDMETHODCALLTYPE get_SmsTargets(BSTR SmsId/*[in]*/, 
                                                   Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/) = 0;
  // [11] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE get_SmsBody(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns/sets message text.
  virtual HRESULT STDMETHODCALLTYPE set_SmsBody(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [12] Returns message chunks.
  virtual HRESULT STDMETHODCALLTYPE get_SmsChunks(BSTR SmsId/*[in]*/, 
                                                  Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/) = 0;
  // [13] Sends the message.
  virtual HRESULT STDMETHODCALLTYPE SendSmsMessage(BSTR SmsId/*[in]*/) = 0;
  // [14] Deletes the message.
  virtual HRESULT STDMETHODCALLTYPE DeleteSmsMessage(BSTR SmsId/*[in]*/) = 0;
  // [15] Returns message target status
  virtual HRESULT STDMETHODCALLTYPE get_SmsTargetStatus(BSTR SmsId/*[in]*/, BSTR Number/*[in]*/, 
                                                        Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/) = 0;
  // [16] Returns chunk text.
  virtual HRESULT STDMETHODCALLTYPE get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [17] Returns number of characters left in chunk.
  virtual HRESULT STDMETHODCALLTYPE get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, 
                                                               BSTR ChunkId/*[in]*/, 
                                                               long* pVal/*[out,retval]*/) = 0;
  // [18] Returns message timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_SmsTimestamp(BSTR SmsId/*[in]*/, DATE* pVal/*[out,retval]*/) = 0;
  // [19] Returns/sets message target numbers.
  virtual HRESULT STDMETHODCALLTYPE get_SmsTargetNumbers(BSTR SmsId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [19] Returns/sets message target numbers.
  virtual HRESULT STDMETHODCALLTYPE set_SmsTargetNumbers(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TSmsMessageType __fastcall get_SmsMessageType(BSTR SmsId/*[in]*/)
  {
    Skype4comlib_tlb::TSmsMessageType pVal;
    OLECHECK(this->get_SmsMessageType(SmsId, (Skype4comlib_tlb::TSmsMessageType*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsMessageStatus __fastcall get_SmsMessageStatus(BSTR SmsId/*[in]*/)
  {
    Skype4comlib_tlb::TSmsMessageStatus pVal;
    OLECHECK(this->get_SmsMessageStatus(SmsId, (Skype4comlib_tlb::TSmsMessageStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsFailureReason __fastcall get_SmsFailureReason(BSTR SmsId/*[in]*/)
  {
    Skype4comlib_tlb::TSmsFailureReason pVal;
    OLECHECK(this->get_SmsFailureReason(SmsId, (Skype4comlib_tlb::TSmsFailureReason*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SmsIsFailedUnseen(SmsId, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_SmsPrice(BSTR SmsId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SmsPrice(SmsId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SmsPriceCurrency(BSTR SmsId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SmsPriceCurrency(SmsId, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_SmsPricePrecision(BSTR SmsId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SmsPricePrecision(SmsId, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SmsReplyToNumber(BSTR SmsId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SmsReplyToNumber(SmsId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsTargetCollection* __fastcall get_SmsTargets(BSTR SmsId/*[in]*/)
  {
    Skype4comlib_tlb::ISmsTargetCollection* pVal;
    OLECHECK(this->get_SmsTargets(SmsId, (Skype4comlib_tlb::ISmsTargetCollection**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SmsBody(BSTR SmsId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SmsBody(SmsId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::ISmsChunkCollection* __fastcall get_SmsChunks(BSTR SmsId/*[in]*/)
  {
    Skype4comlib_tlb::ISmsChunkCollection* pVal;
    OLECHECK(this->get_SmsChunks(SmsId, (Skype4comlib_tlb::ISmsChunkCollection**)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TSmsTargetStatus __fastcall get_SmsTargetStatus(BSTR SmsId/*[in]*/, 
                                                                    BSTR Number/*[in]*/)
  {
    Skype4comlib_tlb::TSmsTargetStatus pVal;
    OLECHECK(this->get_SmsTargetStatus(SmsId, Number, (Skype4comlib_tlb::TSmsTargetStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SmsChunkText(SmsId, ChunkId, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SmsChunkCharactersLeft(SmsId, ChunkId, (long*)&pVal));
    return pVal;
  }

  DATE __fastcall get_SmsTimestamp(BSTR SmsId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_SmsTimestamp(SmsId, (DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SmsTargetNumbers(BSTR SmsId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SmsTargetNumbers(SmsId, (BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            SmsSeen = {write = set_SmsSeen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeUser
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C219279C-F557-4BAD-B3BE-750E91CA9944}
// *********************************************************************//
interface ISkypeUser  : public IDispatch
{
public:
  // [1] Returns user full name.
  virtual HRESULT STDMETHODCALLTYPE get_UserFullName(BSTR Username/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [2] Returns user birthday.
  virtual HRESULT STDMETHODCALLTYPE get_UserBirthday(BSTR Username/*[in]*/, 
                                                     DATE* pVal/*[out,retval]*/) = 0;
  // [3] Returns user sex.
  virtual HRESULT STDMETHODCALLTYPE get_UserSex(BSTR Username/*[in]*/, 
                                                Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/) = 0;
  // [4] Returns user country.
  virtual HRESULT STDMETHODCALLTYPE get_UserCountry(BSTR Username/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/) = 0;
  // [5] Returns user province.
  virtual HRESULT STDMETHODCALLTYPE get_UserProvince(BSTR Username/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [6] Returns user city.
  virtual HRESULT STDMETHODCALLTYPE get_UserCity(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [7] Returns user home phone number.
  virtual HRESULT STDMETHODCALLTYPE get_UserPhoneHome(BSTR Username/*[in]*/, 
                                                      BSTR* pVal/*[out,retval]*/) = 0;
  // [8] Returns user office phone number.
  virtual HRESULT STDMETHODCALLTYPE get_UserPhoneOffice(BSTR Username/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [9] Returns user mobile phone number.
  virtual HRESULT STDMETHODCALLTYPE get_UserPhoneMobile(BSTR Username/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [10] Returns user homepage.
  virtual HRESULT STDMETHODCALLTYPE get_UserHomepage(BSTR Username/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [11] Returns user about text.
  virtual HRESULT STDMETHODCALLTYPE get_UserAbout(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [12] Returns true if user has call equipment.
  virtual HRESULT STDMETHODCALLTYPE get_UserHasCallEquipment(BSTR Username/*[in]*/, 
                                                             VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [13] Returns user buddy status.
  virtual HRESULT STDMETHODCALLTYPE get_UserBuddyStatus(BSTR Username/*[in]*/, 
                                                        Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/) = 0;
  // [13] Returns user buddy status.
  virtual HRESULT STDMETHODCALLTYPE set_UserBuddyStatus(BSTR Username/*[in]*/, 
                                                        Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/) = 0;
  // [14] Returns true if user is authorized by current user.
  virtual HRESULT STDMETHODCALLTYPE get_UserIsAuthorized(BSTR Username/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [14] Returns true if user is authorized by current user.
  virtual HRESULT STDMETHODCALLTYPE set_UserIsAuthorized(BSTR Username/*[in]*/, 
                                                         VARIANT_BOOL pVal/*[in]*/) = 0;
  // [15] Returns true if user is blocked by current user.
  virtual HRESULT STDMETHODCALLTYPE get_UserIsBlocked(BSTR Username/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [15] Returns true if user is blocked by current user.
  virtual HRESULT STDMETHODCALLTYPE set_UserIsBlocked(BSTR Username/*[in]*/, 
                                                      VARIANT_BOOL pVal/*[in]*/) = 0;
  // [16] Returns user display name.
  virtual HRESULT STDMETHODCALLTYPE get_UserDisplayName(BSTR Username/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [17] Returns user online status.
  virtual HRESULT STDMETHODCALLTYPE get_UserOnlineStatus(BSTR Username/*[in]*/, 
                                                         Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/) = 0;
  // [18] Returns timestamp when user was last seen online.
  virtual HRESULT STDMETHODCALLTYPE get_UserLastOnline(BSTR Username/*[in]*/, 
                                                       DATE* pVal/*[out,retval]*/) = 0;
  // [19] Returns user country code.
  virtual HRESULT STDMETHODCALLTYPE get_UserCountryCode(BSTR Username/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/) = 0;
  // [20] Returns received authorization request text.
  virtual HRESULT STDMETHODCALLTYPE get_UserReceivedAuthRequest(BSTR Username/*[in]*/, 
                                                                BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns/sets users speed dial code.
  virtual HRESULT STDMETHODCALLTYPE get_UserSpeedDial(BSTR Username/*[in]*/, 
                                                      BSTR* pVal/*[out,retval]*/) = 0;
  // [21] Returns/sets users speed dial code.
  virtual HRESULT STDMETHODCALLTYPE set_UserSpeedDial(BSTR Username/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [22] Returns true if it is possible to send voicemail to user.
  virtual HRESULT STDMETHODCALLTYPE get_UserCanLeaveVoicemail(BSTR Username/*[in]*/, 
                                                              VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [23] Returns user mood text.
  virtual HRESULT STDMETHODCALLTYPE get_UserMoodText(BSTR Username/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [24] Returns user aliases.
  virtual HRESULT STDMETHODCALLTYPE get_UserAliases(BSTR Username/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/) = 0;
  // [25] Returns user timezone.
  virtual HRESULT STDMETHODCALLTYPE get_UserTimezone(BSTR Username/*[in]*/, 
                                                     long* pVal/*[out,retval]*/) = 0;
  // [26] Returns user call forward active status.
  virtual HRESULT STDMETHODCALLTYPE get_IsCallForwardActive(BSTR Username/*[in]*/, 
                                                            VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [27] Returns user language name.
  virtual HRESULT STDMETHODCALLTYPE get_UserLanguage(BSTR Username/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/) = 0;
  // [28] Returns user language code.
  virtual HRESULT STDMETHODCALLTYPE get_UserLanguageCode(BSTR Username/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [29] Returns user video capabilty.
  virtual HRESULT STDMETHODCALLTYPE get_UserIsVideoCapable(BSTR Username/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [30] Returns user authenticated buddies count.
  virtual HRESULT STDMETHODCALLTYPE get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/, 
                                                                long* pVal/*[out,retval]*/) = 0;
  // [16] Returns user display name.
  virtual HRESULT STDMETHODCALLTYPE set_UserDisplayName(BSTR Username/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [31] Returns user rich mood text.
  virtual HRESULT STDMETHODCALLTYPE get_UserRichMoodText(BSTR Username/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/) = 0;
  // [32] Returns true if user user can receive voicemails.
  virtual HRESULT STDMETHODCALLTYPE get_UserIsVoicemailCapable(BSTR Username/*[in]*/, 
                                                               VARIANT_BOOL* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_UserFullName(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserFullName(Username, (BSTR*)&pVal));
    return pVal;
  }

  DATE __fastcall get_UserBirthday(BSTR Username/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_UserBirthday(Username, (DATE*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TUserSex __fastcall get_UserSex(BSTR Username/*[in]*/)
  {
    Skype4comlib_tlb::TUserSex pVal;
    OLECHECK(this->get_UserSex(Username, (Skype4comlib_tlb::TUserSex*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserCountry(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserCountry(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserProvince(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserProvince(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserCity(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserCity(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserPhoneHome(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserPhoneHome(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserPhoneOffice(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserPhoneOffice(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserPhoneMobile(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserPhoneMobile(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserHomepage(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserHomepage(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserAbout(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserAbout(Username, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserHasCallEquipment(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserHasCallEquipment(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TBuddyStatus __fastcall get_UserBuddyStatus(BSTR Username/*[in]*/)
  {
    Skype4comlib_tlb::TBuddyStatus pVal;
    OLECHECK(this->get_UserBuddyStatus(Username, (Skype4comlib_tlb::TBuddyStatus*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserIsAuthorized(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserIsAuthorized(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserIsBlocked(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserIsBlocked(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserDisplayName(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserDisplayName(Username, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TOnlineStatus __fastcall get_UserOnlineStatus(BSTR Username/*[in]*/)
  {
    Skype4comlib_tlb::TOnlineStatus pVal;
    OLECHECK(this->get_UserOnlineStatus(Username, (Skype4comlib_tlb::TOnlineStatus*)&pVal));
    return pVal;
  }

  DATE __fastcall get_UserLastOnline(BSTR Username/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_UserLastOnline(Username, (DATE*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserCountryCode(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserCountryCode(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserReceivedAuthRequest(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserReceivedAuthRequest(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserSpeedDial(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserSpeedDial(Username, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserCanLeaveVoicemail(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserCanLeaveVoicemail(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserMoodText(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserMoodText(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserAliases(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserAliases(Username, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_UserTimezone(BSTR Username/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_UserTimezone(Username, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsCallForwardActive(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsCallForwardActive(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserLanguage(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserLanguage(Username, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserLanguageCode(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserLanguageCode(Username, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserIsVideoCapable(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserIsVideoCapable(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_UserNumberOfAuthBuddies(Username, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserRichMoodText(BSTR Username/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserRichMoodText(Username, (BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_UserIsVoicemailCapable(BSTR Username/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_UserIsVoicemailCapable(Username, (VARIANT_BOOL*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISkypeVoicemail
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D33E14E-9921-4860-92F4-5DC1586F403C}
// *********************************************************************//
interface ISkypeVoicemail  : public IDispatch
{
public:
  // [1] Returns voicemail type.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailType(BSTR VoicemailId/*[in]*/, 
                                                      Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/) = 0;
  // [2] Returns voicemail partner handle.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/, 
                                                               BSTR* pVal/*[out,retval]*/) = 0;
  // [3] Returns voicemail partner display name.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/, 
                                                                    BSTR* pVal/*[out,retval]*/) = 0;
  // [4] Returns voicemail status.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailStatus(BSTR VoicemailId/*[in]*/, 
                                                        Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/) = 0;
  // [5] Returns voicemail failure reason.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/, 
                                                               Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/) = 0;
  // [6] Returns voicemail timestamp.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/, 
                                                           DATE* pVal/*[out,retval]*/) = 0;
  // [7] Returns voicemail duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailDuration(BSTR VoicemailId/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [8] Returns voicemail allowed duration in seconds.
  virtual HRESULT STDMETHODCALLTYPE get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/, 
                                                                 long* pVal/*[out,retval]*/) = 0;
  // [9] Opens voicemail.
  virtual HRESULT STDMETHODCALLTYPE OpenVoicemail(BSTR VoicemailId/*[in]*/) = 0;
  // [10] Starts voicemail playback.
  virtual HRESULT STDMETHODCALLTYPE StartVoicemailPlayback(BSTR VoicemailId/*[in]*/) = 0;
  // [11] Stops voicemail playback.
  virtual HRESULT STDMETHODCALLTYPE StopVoicemailPlayback(BSTR VoicemailId/*[in]*/) = 0;
  // [12] Uploads voicemail.
  virtual HRESULT STDMETHODCALLTYPE UploadVoicemail(BSTR VoicemailId/*[in]*/) = 0;
  // [13] Downloads voicemail.
  virtual HRESULT STDMETHODCALLTYPE DownloadVoicemail(BSTR VoicemailId/*[in]*/) = 0;
  // [14] Starts voicemail recording.
  virtual HRESULT STDMETHODCALLTYPE StartVoicemailRecording(BSTR VoicemailId/*[in]*/) = 0;
  // [15] Stops voicemail recording.
  virtual HRESULT STDMETHODCALLTYPE StopVoicemailRecording(BSTR VoicemailId/*[in]*/) = 0;
  // [16] Deletes voicemail.
  virtual HRESULT STDMETHODCALLTYPE DeleteVoicemail(BSTR VoicemailId/*[in]*/) = 0;
  // [17] Starts playback in call.
  virtual HRESULT STDMETHODCALLTYPE StartVoicemailPlaybackInCall(BSTR VoicemailId/*[in]*/) = 0;
  // [18] Changes played voicemail status back to unplayed.
  virtual HRESULT STDMETHODCALLTYPE SetVoicemailUnplayed(BSTR VoicemailId/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::TVoicemailType __fastcall get_VoicemailType(BSTR VoicemailId/*[in]*/)
  {
    Skype4comlib_tlb::TVoicemailType pVal;
    OLECHECK(this->get_VoicemailType(VoicemailId, (Skype4comlib_tlb::TVoicemailType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_VoicemailPartnerHandle(VoicemailId, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_VoicemailPartnerDisplayName(VoicemailId, (BSTR*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TVoicemailStatus __fastcall get_VoicemailStatus(BSTR VoicemailId/*[in]*/)
  {
    Skype4comlib_tlb::TVoicemailStatus pVal;
    OLECHECK(this->get_VoicemailStatus(VoicemailId, (Skype4comlib_tlb::TVoicemailStatus*)&pVal));
    return pVal;
  }

  Skype4comlib_tlb::TVoicemailFailureReason __fastcall get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/)
  {
    Skype4comlib_tlb::TVoicemailFailureReason pVal;
    OLECHECK(this->get_VoicemailFailureReason(VoicemailId, (Skype4comlib_tlb::TVoicemailFailureReason*)&pVal));
    return pVal;
  }

  DATE __fastcall get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/)
  {
    DATE pVal;
    OLECHECK(this->get_VoicemailTimestamp(VoicemailId, (DATE*)&pVal));
    return pVal;
  }

  long __fastcall get_VoicemailDuration(BSTR VoicemailId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_VoicemailDuration(VoicemailId, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_VoicemailAllowedDuration(VoicemailId, (long*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ISkypeEvents
// Flags:     (4096) Dispatchable
// GUID:      {F4F90CDD-C620-4118-945E-CAA1BBEBA435}
// *********************************************************************//
interface _ISkypeEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall Command(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
  {
    _TDispID _dispid(/* Command */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Reply(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
  {
    _TDispID _dispid(/* Reply */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Error(Skype4comlib_tlb::ICommand* pCommand/*[in]*/, long Number/*[in]*/, 
                           BSTR Description/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(3));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
    _args[2] = Number /*[VT_I4:0]*/;
    _args[3] = Description /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* AttachmentStatus */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ConnectionStatus(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* ConnectionStatus */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall UserStatus(Skype4comlib_tlb::TUserStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* UserStatus */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall OnlineStatus(Skype4comlib_tlb::IUser* pUser/*[in]*/, 
                                  Skype4comlib_tlb::TOnlineStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* OnlineStatus */ DISPID(7));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallStatus(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                Skype4comlib_tlb::TCallStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* CallStatus */ DISPID(8));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallHistory()
  {
    _TDispID _dispid(/* CallHistory */ DISPID(9));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall Mute(VARIANT_BOOL Mute/*[in]*/)
  {
    _TDispID _dispid(/* Mute */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Mute /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall MessageStatus(Skype4comlib_tlb::IChatMessage* pMessage/*[in]*/, 
                                   Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* MessageStatus */ DISPID(11));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChatMessage*)pMessage /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall MessageHistory(BSTR Username/*[in]*/)
  {
    _TDispID _dispid(/* MessageHistory */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Username /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall AutoAway(VARIANT_BOOL Automatic/*[in]*/)
  {
    _TDispID _dispid(/* AutoAway */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Automatic /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallDtmfReceived(Skype4comlib_tlb::ICall* pCall/*[in]*/, BSTR code/*[in]*/)
  {
    _TDispID _dispid(/* CallDtmfReceived */ DISPID(14));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = code /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall VoicemailStatus(Skype4comlib_tlb::IVoicemail* pMail/*[in]*/, 
                                     Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* VoicemailStatus */ DISPID(15));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IVoicemail*)pMail /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ApplicationConnecting(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                           Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
  {
    _TDispID _dispid(/* ApplicationConnecting */ DISPID(16));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ApplicationStreams(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                        Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
  {
    _TDispID _dispid(/* ApplicationStreams */ DISPID(17));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ApplicationDatagram(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                         Skype4comlib_tlb::IApplicationStream* pStream/*[in]*/, 
                                         BSTR Text/*[in]*/)
  {
    _TDispID _dispid(/* ApplicationDatagram */ DISPID(18));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStream*)pStream /*[VT_USERDEFINED:1]*/;
    _args[3] = Text /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ApplicationSending(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                        Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
  {
    _TDispID _dispid(/* ApplicationSending */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ApplicationReceiving(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
  {
    _TDispID _dispid(/* ApplicationReceiving */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ContactsFocused(BSTR Username/*[in]*/)
  {
    _TDispID _dispid(/* ContactsFocused */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Username /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall GroupVisible(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                  VARIANT_BOOL Visible/*[in]*/)
  {
    _TDispID _dispid(/* GroupVisible */ DISPID(22));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
    _args[2] = Visible /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall GroupExpanded(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                   VARIANT_BOOL Expanded/*[in]*/)
  {
    _TDispID _dispid(/* GroupExpanded */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
    _args[2] = Expanded /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall GroupUsers(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
  {
    _TDispID _dispid(/* GroupUsers */ DISPID(24));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall GroupDeleted(long GroupId/*[in]*/)
  {
    _TDispID _dispid(/* GroupDeleted */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = GroupId /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall UserMood(Skype4comlib_tlb::IUser* pUser/*[in]*/, BSTR MoodText/*[in]*/)
  {
    _TDispID _dispid(/* UserMood */ DISPID(26));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
    _args[2] = MoodText /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall SmsMessageStatusChanged(Skype4comlib_tlb::ISmsMessage* pMessage/*[in]*/, 
                                             Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* SmsMessageStatusChanged */ DISPID(27));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsMessage*)pMessage /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall SmsTargetStatusChanged(Skype4comlib_tlb::ISmsTarget* pTarget/*[in]*/, 
                                            Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* SmsTargetStatusChanged */ DISPID(28));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsTarget*)pTarget /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallInputStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                            VARIANT_BOOL Status/*[in]*/)
  {
    _TDispID _dispid(/* CallInputStatusChanged */ DISPID(29));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = Status /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall AsyncSearchUsersFinished(long Cookie/*[in]*/, 
                                              Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
  {
    _TDispID _dispid(/* AsyncSearchUsersFinished */ DISPID(30));
    TAutoArgs<2> _args;
    _args[1] = Cookie /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallSeenStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                           VARIANT_BOOL Status)
  {
    _TDispID _dispid(/* CallSeenStatusChanged */ DISPID(31));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = Status /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall PluginEventClicked(Skype4comlib_tlb::IPluginEvent* pEvent/*[in]*/)
  {
    _TDispID _dispid(/* PluginEventClicked */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IPluginEvent*)pEvent /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall PluginMenuItemClicked(Skype4comlib_tlb::IPluginMenuItem* pMenuItem/*[in]*/, 
                                           Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/, 
                                           Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                           BSTR ContextId/*[in]*/)
  {
    _TDispID _dispid(/* PluginMenuItemClicked */ DISPID(33));
    TAutoArgs<4> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IPluginMenuItem*)pMenuItem /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
    _args[3] = (int)PluginContext /*[VT_USERDEFINED:0]*/;
    _args[4] = ContextId /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall WallpaperChanged(BSTR Path/*[in]*/)
  {
    _TDispID _dispid(/* WallpaperChanged */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Path /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall FileTransferStatusChanged(Skype4comlib_tlb::IFileTransfer* pTransfer/*[in]*/, 
                                               Skype4comlib_tlb::TFileTransferStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* FileTransferStatusChanged */ DISPID(35));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IFileTransfer*)pTransfer /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallTransferStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                               Skype4comlib_tlb::TCallStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* CallTransferStatusChanged */ DISPID(36));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ChatMembersChanged(Skype4comlib_tlb::IChat* pChat/*[in]*/, 
                                        Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
  {
    _TDispID _dispid(/* ChatMembersChanged */ DISPID(37));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChat*)pChat /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pMembers /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ChatMemberRoleChanged(Skype4comlib_tlb::IChatMember* pMember/*[in]*/, 
                                           Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
  {
    _TDispID _dispid(/* ChatMemberRoleChanged */ DISPID(38));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChatMember*)pMember /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Role /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallVideoStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                            Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* CallVideoStatusChanged */ DISPID(39));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallVideoSendStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* CallVideoSendStatusChanged */ DISPID(40));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall CallVideoReceiveStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                   Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* CallVideoReceiveStatusChanged */ DISPID(41));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall SilentModeStatusChanged(VARIANT_BOOL Silent/*[in]*/)
  {
    _TDispID _dispid(/* SilentModeStatusChanged */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Silent /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall UILanguageChanged(BSTR code/*[in]*/)
  {
    _TDispID _dispid(/* UILanguageChanged */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = code /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall UserAuthorizationRequestReceived(Skype4comlib_tlb::IUser* pUser/*[in]*/)
  {
    _TDispID _dispid(/* UserAuthorizationRequestReceived */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _ICallChannelManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {497ABB45-20AE-49D1-A39D-CBE84A31B20C}
// *********************************************************************//
interface _ICallChannelManagerEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall Channels(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/, 
                              Skype4comlib_tlb::ICallChannelCollection* pChannels/*[in]*/)
  {
    _TDispID _dispid(/* Channels */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelManager*)pManager /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelCollection*)pChannels /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Message(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/, 
                             Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/, 
                             Skype4comlib_tlb::ICallChannelMessage* pMessage/*[in]*/)
  {
    _TDispID _dispid(/* Message */ DISPID(2));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelManager*)pManager /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannel*)pChannel /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelMessage*)pMessage /*[VT_USERDEFINED:1]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Created()
  {
    _TDispID _dispid(/* Created */ DISPID(3));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: ISkypePlugin
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B77A3D1F-6847-402F-BB82-A0564379088E}
// *********************************************************************//
interface ISkypePlugin  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE CreatePluginEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                                      BSTR Hint/*[in]*/, 
                                                      Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE DeletePluginEvent(BSTR EventId/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                         Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                         BSTR CaptionText/*[in]*/, 
                                                         BSTR HintText/*[in,def,opt]*/, 
                                                         BSTR IconPath/*[in,def,opt]*/, 
                                                         VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                         Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                         VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                                         Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE DeletePluginMenuItem(BSTR MenuItemId/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_PluginMenuItemCaption(BSTR MenuItemId/*[in]*/, 
                                                              BSTR Param2/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_PluginMenuItemHint(BSTR MenuItemId/*[in]*/, 
                                                           BSTR Param2/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE EnablePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                         VARIANT_BOOL Enabled/*[in]*/) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Skype4comlib_tlb::IPluginEvent* __fastcall CreatePluginEvent(BSTR EventId/*[in]*/, 
                                                               BSTR Caption/*[in]*/, 
                                                               BSTR Hint/*[in]*/)
  {
    Skype4comlib_tlb::IPluginEvent* pEvent;
    OLECHECK(this->CreatePluginEvent(EventId, Caption, Hint, (Skype4comlib_tlb::IPluginEvent**)&pEvent));
    return pEvent;
  }

  Skype4comlib_tlb::IPluginMenuItem* __fastcall CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                                     Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                                     BSTR CaptionText/*[in]*/, 
                                                                     BSTR HintText/*[in,def,opt]*/, 
                                                                     BSTR IconPath/*[in,def,opt]*/, 
                                                                     VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                                     Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                                     VARIANT_BOOL MultipleContacts/*[in,def,opt]*/)
  {
    Skype4comlib_tlb::IPluginMenuItem* pMenuItem;
    OLECHECK(this->CreatePluginMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, 
                                        Enabled, ContactType, MultipleContacts, (Skype4comlib_tlb::IPluginMenuItem**)&pMenuItem));
    return pMenuItem;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIApplication
// Interface: IApplication
// *********************************************************************//
template <class T /* IApplication */ >
class TCOMIApplicationT : public TComInterface<IApplication>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIApplicationT() {}
  TCOMIApplicationT(IApplication *intf, bool addRef = false) : TComInterface<IApplication>(intf, addRef) {}
  TCOMIApplicationT(const TCOMIApplicationT& src) : TComInterface<IApplication>(src) {}
  TCOMIApplicationT& operator=(const TCOMIApplicationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall Create(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_Streams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Streams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall get_Streams(void);
  HRESULT         __fastcall get_ConnectableUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ConnectableUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_ConnectableUsers(void);
  HRESULT         __fastcall get_ConnectingUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ConnectingUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_ConnectingUsers(void);
  HRESULT         __fastcall Connect(BSTR Username/*[in]*/, 
                                     VARIANT_BOOL WaitConnected/*[in,def,opt]*/);
  HRESULT         __fastcall get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall get_SendingStreams(void);
  HRESULT         __fastcall get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall get_ReceivedStreams(void);
  HRESULT         __fastcall SendDatagram(BSTR Text/*[in]*/, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in,def,opt]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IApplicationStreamCollectionPtr Streams = {read = get_Streams};
  __property   Skype4comlib_tlb::IUserCollectionPtr ConnectableUsers = {read = get_ConnectableUsers};
  __property   Skype4comlib_tlb::IUserCollectionPtr ConnectingUsers = {read = get_ConnectingUsers};
  __property   Skype4comlib_tlb::IApplicationStreamCollectionPtr SendingStreams = {read = get_SendingStreams};
  __property   Skype4comlib_tlb::IApplicationStreamCollectionPtr ReceivedStreams = {read = get_ReceivedStreams};
};
typedef TCOMIApplicationT<IApplication> TCOMIApplication;

// *********************************************************************//
// DispIntf:  IApplication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9ADA565-2FAD-424D-878C-7AD12DF9E617}
// *********************************************************************//
template<class T>
class IApplicationDispT : public TAutoDriver<IApplication>
{
public:
  IApplicationDispT(){}

  IApplicationDispT(IApplication *pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, false);
  }

  IApplicationDispT(IApplicationPtr pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, true);
  }

  IApplicationDispT& operator=(IApplication *pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, false);
    return *this;
  }

  IApplicationDispT& operator=(IApplicationPtr pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_App));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_App);
  }

  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall Create();
  HRESULT         __fastcall Delete();
  HRESULT         __fastcall get_Streams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_Streams(void);
  HRESULT         __fastcall get_ConnectableUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ConnectableUsers(void);
  HRESULT         __fastcall get_ConnectingUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ConnectingUsers(void);
  HRESULT         __fastcall Connect(BSTR Username/*[in]*/, 
                                     VARIANT_BOOL WaitConnected/*[in,def,opt]*/);
  HRESULT         __fastcall get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_SendingStreams(void);
  HRESULT         __fastcall get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ReceivedStreams(void);
  HRESULT         __fastcall SendDatagram(BSTR Text/*[in]*/, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in,def,opt]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* Streams = {read = get_Streams};
  __property   Skype4comlib_tlb::IUserCollection* ConnectableUsers = {read = get_ConnectableUsers};
  __property   Skype4comlib_tlb::IUserCollection* ConnectingUsers = {read = get_ConnectingUsers};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* SendingStreams = {read = get_SendingStreams};
  __property   Skype4comlib_tlb::IApplicationStreamCollection* ReceivedStreams = {read = get_ReceivedStreams};
};
typedef IApplicationDispT<IApplication> IApplicationDisp;

// *********************************************************************//
// SmartIntf: TCOMIApplicationStreamCollection
// Interface: IApplicationStreamCollection
// *********************************************************************//
template <class T /* IApplicationStreamCollection */ >
class TCOMIApplicationStreamCollectionT : public TComInterface<IApplicationStreamCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIApplicationStreamCollectionT() {}
  TCOMIApplicationStreamCollectionT(IApplicationStreamCollection *intf, bool addRef = false) : TComInterface<IApplicationStreamCollection>(intf, addRef) {}
  TCOMIApplicationStreamCollectionT(const TCOMIApplicationStreamCollectionT& src) : TComInterface<IApplicationStreamCollection>(src) {}
  TCOMIApplicationStreamCollectionT& operator=(const TCOMIApplicationStreamCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IApplicationStream* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStream* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIApplicationStreamCollectionT<IApplicationStreamCollection> TCOMIApplicationStreamCollection;

// *********************************************************************//
// DispIntf:  IApplicationStreamCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D8F1BCC4-2A73-47B9-83B3-D4D299CA5BC6}
// *********************************************************************//
template<class T>
class IApplicationStreamCollectionDispT : public TAutoDriver<IApplicationStreamCollection>
{
public:
  IApplicationStreamCollectionDispT(){}

  IApplicationStreamCollectionDispT(IApplicationStreamCollection *pintf)
  {
    TAutoDriver<IApplicationStreamCollection>::Bind(pintf, false);
  }

  IApplicationStreamCollectionDispT(IApplicationStreamCollectionPtr pintf)
  {
    TAutoDriver<IApplicationStreamCollection>::Bind(pintf, true);
  }

  IApplicationStreamCollectionDispT& operator=(IApplicationStreamCollection *pintf)
  {
    TAutoDriver<IApplicationStreamCollection>::Bind(pintf, false);
    return *this;
  }

  IApplicationStreamCollectionDispT& operator=(IApplicationStreamCollectionPtr pintf)
  {
    TAutoDriver<IApplicationStreamCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ApplicationStreamCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ApplicationStreamCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IApplicationStream* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStream* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IApplicationStreamCollectionDispT<IApplicationStreamCollection> IApplicationStreamCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIApplicationStream
// Interface: IApplicationStream
// *********************************************************************//
template <class T /* IApplicationStream */ >
class TCOMIApplicationStreamT : public TComInterface<IApplicationStream>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIApplicationStreamT() {}
  TCOMIApplicationStreamT(IApplicationStream *intf, bool addRef = false) : TComInterface<IApplicationStream>(intf, addRef) {}
  TCOMIApplicationStreamT(const TCOMIApplicationStreamT& src) : TComInterface<IApplicationStream>(src) {}
  TCOMIApplicationStreamT& operator=(const TCOMIApplicationStreamT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ApplicationName(void);
  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall Read(BSTR* pText/*[out,retval]*/);
  BSTR            __fastcall Read(void);
  HRESULT         __fastcall Write(BSTR Text/*[in]*/);
  HRESULT         __fastcall SendDatagram(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_DataLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_DataLength(void);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);

  __property   BSTR            ApplicationName = {read = get_ApplicationName};
  __property   BSTR            Handle = {read = get_Handle};
  __property   long            DataLength = {read = get_DataLength};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
};
typedef TCOMIApplicationStreamT<IApplicationStream> TCOMIApplicationStream;

// *********************************************************************//
// DispIntf:  IApplicationStream
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E072F615-F833-4BCA-B473-CEE44D302030}
// *********************************************************************//
template<class T>
class IApplicationStreamDispT : public TAutoDriver<IApplicationStream>
{
public:
  IApplicationStreamDispT(){}

  IApplicationStreamDispT(IApplicationStream *pintf)
  {
    TAutoDriver<IApplicationStream>::Bind(pintf, false);
  }

  IApplicationStreamDispT(IApplicationStreamPtr pintf)
  {
    TAutoDriver<IApplicationStream>::Bind(pintf, true);
  }

  IApplicationStreamDispT& operator=(IApplicationStream *pintf)
  {
    TAutoDriver<IApplicationStream>::Bind(pintf, false);
    return *this;
  }

  IApplicationStreamDispT& operator=(IApplicationStreamPtr pintf)
  {
    TAutoDriver<IApplicationStream>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ApplicationStream));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ApplicationStream);
  }

  HRESULT         __fastcall get_ApplicationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ApplicationName(void);
  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall Read(BSTR* pText/*[out,retval]*/);
  BSTR            __fastcall Read(void);
  HRESULT         __fastcall Write(BSTR Text/*[in]*/);
  HRESULT         __fastcall SendDatagram(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_DataLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_DataLength(void);
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);

  __property   BSTR            ApplicationName = {read = get_ApplicationName};
  __property   BSTR            Handle = {read = get_Handle};
  __property   long            DataLength = {read = get_DataLength};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
};
typedef IApplicationStreamDispT<IApplicationStream> IApplicationStreamDisp;

// *********************************************************************//
// SmartIntf: TCOMIUserCollection
// Interface: IUserCollection
// *********************************************************************//
template <class T /* IUserCollection */ >
class TCOMIUserCollectionT : public TComInterface<IUserCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIUserCollectionT() {}
  TCOMIUserCollectionT(IUserCollection *intf, bool addRef = false) : TComInterface<IUserCollection>(intf, addRef) {}
  TCOMIUserCollectionT(const TCOMIUserCollectionT& src) : TComInterface<IUserCollection>(src) {}
  TCOMIUserCollectionT& operator=(const TCOMIUserCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IUser* pUser/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIUserCollectionT<IUserCollection> TCOMIUserCollection;

// *********************************************************************//
// DispIntf:  IUserCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC163200-44EB-483B-907F-A8C1CF56B8EE}
// *********************************************************************//
template<class T>
class IUserCollectionDispT : public TAutoDriver<IUserCollection>
{
public:
  IUserCollectionDispT(){}

  IUserCollectionDispT(IUserCollection *pintf)
  {
    TAutoDriver<IUserCollection>::Bind(pintf, false);
  }

  IUserCollectionDispT(IUserCollectionPtr pintf)
  {
    TAutoDriver<IUserCollection>::Bind(pintf, true);
  }

  IUserCollectionDispT& operator=(IUserCollection *pintf)
  {
    TAutoDriver<IUserCollection>::Bind(pintf, false);
    return *this;
  }

  IUserCollectionDispT& operator=(IUserCollectionPtr pintf)
  {
    TAutoDriver<IUserCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UserCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UserCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IUser* pUser/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IUserCollectionDispT<IUserCollection> IUserCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIUser
// Interface: IUser
// *********************************************************************//
template <class T /* IUser */ >
class TCOMIUserT : public TComInterface<IUser>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIUserT() {}
  TCOMIUserT(IUser *intf, bool addRef = false) : TComInterface<IUser>(intf, addRef) {}
  TCOMIUserT(const TCOMIUserT& src) : TComInterface<IUser>(src) {}
  TCOMIUserT& operator=(const TCOMIUserT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall set_Handle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall get_Birthday(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Birthday(void);
  HRESULT         __fastcall get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void);
  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall get_PhoneHome(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneHome(void);
  HRESULT         __fastcall get_PhoneOffice(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneOffice(void);
  HRESULT         __fastcall get_PhoneMobile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneMobile(void);
  HRESULT         __fastcall get_Homepage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Homepage(void);
  HRESULT         __fastcall get_About(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT         __fastcall get_HasCallEquipment(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_HasCallEquipment(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasCallEquipment(void);
  HRESULT         __fastcall get_BuddyStatus(Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TBuddyStatus __fastcall get_BuddyStatus(void);
  HRESULT         __fastcall set_BuddyStatus(Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/);
  HRESULT         __fastcall get_IsAuthorized(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsAuthorized(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsAuthorized(void);
  HRESULT         __fastcall set_IsAuthorized(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_IsAuthorized(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsBlocked(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsBlocked(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsBlocked(void);
  HRESULT         __fastcall set_IsBlocked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_IsBlocked(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall get_OnlineStatus(Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TOnlineStatus __fastcall get_OnlineStatus(void);
  HRESULT         __fastcall get_LastOnline(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_LastOnline(void);
  HRESULT         __fastcall get_CountryCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CountryCode(void);
  HRESULT         __fastcall get_ReceivedAuthRequest(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReceivedAuthRequest(void);
  HRESULT         __fastcall get_SpeedDial(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SpeedDial(void);
  HRESULT         __fastcall set_SpeedDial(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CanLeaveVoicemail(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CanLeaveVoicemail(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanLeaveVoicemail(void);
  HRESULT         __fastcall get_MoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MoodText(void);
  HRESULT         __fastcall get_Aliases(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Aliases(void);
  HRESULT         __fastcall get_Timezone(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timezone(void);
  HRESULT         __fastcall get_IsCallForwardActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsCallForwardActive(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsCallForwardActive(void);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall get_LanguageCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LanguageCode(void);
  HRESULT         __fastcall get_IsVideoCapable(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsVideoCapable(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVideoCapable(void);
  HRESULT         __fastcall get_IsSkypeOutContact(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsSkypeOutContact(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsSkypeOutContact(void);
  HRESULT         __fastcall get_NumberOfAuthBuddies(long* pVal/*[out,retval]*/);
  long            __fastcall get_NumberOfAuthBuddies(void);
  HRESULT         __fastcall set_DisplayName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RichMoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RichMoodText(void);
  HRESULT         __fastcall get_IsVoicemailCapable(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsVoicemailCapable(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVoicemailCapable(void);

  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            FullName = {read = get_FullName};
  __property   DATE            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   TOLEBOOL        HasCallEquipment = {read = get_HasCallEquipment};
  __property   Skype4comlib_tlb::TBuddyStatus BuddyStatus = {read = get_BuddyStatus, write = set_BuddyStatus};
  __property   TOLEBOOL        IsAuthorized = {read = get_IsAuthorized, write = set_IsAuthorized};
  __property   TOLEBOOL        IsBlocked = {read = get_IsBlocked, write = set_IsBlocked};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TOnlineStatus OnlineStatus = {read = get_OnlineStatus};
  __property   DATE            LastOnline = {read = get_LastOnline};
  __property   BSTR            CountryCode = {read = get_CountryCode};
  __property   BSTR            ReceivedAuthRequest = {read = get_ReceivedAuthRequest};
  __property   BSTR            SpeedDial = {read = get_SpeedDial};
  __property   TOLEBOOL        CanLeaveVoicemail = {read = get_CanLeaveVoicemail};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   BSTR            Aliases = {read = get_Aliases};
  __property   long            Timezone = {read = get_Timezone};
  __property   TOLEBOOL        IsCallForwardActive = {read = get_IsCallForwardActive};
  __property   BSTR            Language = {read = get_Language};
  __property   BSTR            LanguageCode = {read = get_LanguageCode};
  __property   TOLEBOOL        IsVideoCapable = {read = get_IsVideoCapable};
  __property   TOLEBOOL        IsSkypeOutContact = {read = get_IsSkypeOutContact};
  __property   long            NumberOfAuthBuddies = {read = get_NumberOfAuthBuddies};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};
  __property   TOLEBOOL        IsVoicemailCapable = {read = get_IsVoicemailCapable};
};
typedef TCOMIUserT<IUser> TCOMIUser;

// *********************************************************************//
// DispIntf:  IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0BC5168-A518-4192-9D20-0B907B23C4D1}
// *********************************************************************//
template<class T>
class IUserDispT : public TAutoDriver<IUser>
{
public:
  IUserDispT(){}

  IUserDispT(IUser *pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, false);
  }

  IUserDispT(IUserPtr pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, true);
  }

  IUserDispT& operator=(IUser *pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, false);
    return *this;
  }

  IUserDispT& operator=(IUserPtr pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_User));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_User);
  }

  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall set_Handle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall get_Birthday(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Birthday(void);
  HRESULT         __fastcall get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void);
  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall get_PhoneHome(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneHome(void);
  HRESULT         __fastcall get_PhoneOffice(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneOffice(void);
  HRESULT         __fastcall get_PhoneMobile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneMobile(void);
  HRESULT         __fastcall get_Homepage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Homepage(void);
  HRESULT         __fastcall get_About(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT         __fastcall get_HasCallEquipment(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasCallEquipment(void);
  HRESULT         __fastcall get_BuddyStatus(Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TBuddyStatus __fastcall get_BuddyStatus(void);
  HRESULT         __fastcall set_BuddyStatus(Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/);
  HRESULT         __fastcall get_IsAuthorized(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAuthorized(void);
  HRESULT         __fastcall set_IsAuthorized(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsBlocked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsBlocked(void);
  HRESULT         __fastcall set_IsBlocked(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall get_OnlineStatus(Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TOnlineStatus __fastcall get_OnlineStatus(void);
  HRESULT         __fastcall get_LastOnline(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_LastOnline(void);
  HRESULT         __fastcall get_CountryCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CountryCode(void);
  HRESULT         __fastcall get_ReceivedAuthRequest(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReceivedAuthRequest(void);
  HRESULT         __fastcall get_SpeedDial(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SpeedDial(void);
  HRESULT         __fastcall set_SpeedDial(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CanLeaveVoicemail(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanLeaveVoicemail(void);
  HRESULT         __fastcall get_MoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MoodText(void);
  HRESULT         __fastcall get_Aliases(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Aliases(void);
  HRESULT         __fastcall get_Timezone(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timezone(void);
  HRESULT         __fastcall get_IsCallForwardActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsCallForwardActive(void);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall get_LanguageCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LanguageCode(void);
  HRESULT         __fastcall get_IsVideoCapable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsVideoCapable(void);
  HRESULT         __fastcall get_IsSkypeOutContact(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsSkypeOutContact(void);
  HRESULT         __fastcall get_NumberOfAuthBuddies(long* pVal/*[out,retval]*/);
  long            __fastcall get_NumberOfAuthBuddies(void);
  HRESULT         __fastcall set_DisplayName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RichMoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RichMoodText(void);
  HRESULT         __fastcall get_IsVoicemailCapable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsVoicemailCapable(void);

  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            FullName = {read = get_FullName};
  __property   DATE            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   VARIANT_BOOL    HasCallEquipment = {read = get_HasCallEquipment};
  __property   Skype4comlib_tlb::TBuddyStatus BuddyStatus = {read = get_BuddyStatus, write = set_BuddyStatus};
  __property   VARIANT_BOOL    IsAuthorized = {read = get_IsAuthorized, write = set_IsAuthorized};
  __property   VARIANT_BOOL    IsBlocked = {read = get_IsBlocked, write = set_IsBlocked};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TOnlineStatus OnlineStatus = {read = get_OnlineStatus};
  __property   DATE            LastOnline = {read = get_LastOnline};
  __property   BSTR            CountryCode = {read = get_CountryCode};
  __property   BSTR            ReceivedAuthRequest = {read = get_ReceivedAuthRequest};
  __property   BSTR            SpeedDial = {read = get_SpeedDial};
  __property   VARIANT_BOOL    CanLeaveVoicemail = {read = get_CanLeaveVoicemail};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   BSTR            Aliases = {read = get_Aliases};
  __property   long            Timezone = {read = get_Timezone};
  __property   VARIANT_BOOL    IsCallForwardActive = {read = get_IsCallForwardActive};
  __property   BSTR            Language = {read = get_Language};
  __property   BSTR            LanguageCode = {read = get_LanguageCode};
  __property   VARIANT_BOOL    IsVideoCapable = {read = get_IsVideoCapable};
  __property   VARIANT_BOOL    IsSkypeOutContact = {read = get_IsSkypeOutContact};
  __property   long            NumberOfAuthBuddies = {read = get_NumberOfAuthBuddies};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};
  __property   VARIANT_BOOL    IsVoicemailCapable = {read = get_IsVoicemailCapable};
};
typedef IUserDispT<IUser> IUserDisp;

// *********************************************************************//
// SmartIntf: TCOMICall
// Interface: ICall
// *********************************************************************//
template <class T /* ICall */ >
class TCOMICallT : public TComInterface<ICall>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallT() {}
  TCOMICallT(ICall *intf, bool addRef = false) : TComInterface<ICall>(intf, addRef) {}
  TCOMICallT(const TCOMICallT& src) : TComInterface<ICall>(src) {}
  TCOMICallT& operator=(const TCOMICallT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);
  HRESULT         __fastcall get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerDisplayName(void);
  HRESULT         __fastcall get_ConferenceId(long* pVal/*[out,retval]*/);
  long            __fastcall get_ConferenceId(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Skype4comlib_tlb::TCallStatus pVal/*[in]*/);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_Subject(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Subject(void);
  HRESULT         __fastcall get_PstnNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PstnNumber(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_PstnStatus(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PstnStatus(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Seen(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall Hold(void);
  HRESULT         __fastcall Resume(void);
  HRESULT         __fastcall Finish(void);
  HRESULT         __fastcall Answer(void);
  HRESULT         __fastcall set_DTMF(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Participants(Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Participants(Skype4comlib_tlb::IParticipantCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IParticipantCollectionPtr __fastcall get_Participants(void);
  HRESULT         __fastcall Join(long Id/*[in]*/);
  HRESULT         __fastcall get_VmDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_VmDuration(void);
  HRESULT         __fastcall get_VmAllowedDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_VmAllowedDuration(void);
  HRESULT         __fastcall get_VideoStatus(Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoStatus __fastcall get_VideoStatus(void);
  HRESULT         __fastcall get_VideoSendStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoSendStatus(void);
  HRESULT         __fastcall get_VideoReceiveStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoReceiveStatus(void);
  HRESULT         __fastcall StartVideoSend(void);
  HRESULT         __fastcall StopVideoSend(void);
  HRESULT         __fastcall StartVideoReceive(void);
  HRESULT         __fastcall StopVideoReceive(void);
  HRESULT         __fastcall RedirectToVoicemail(void);
  HRESULT         __fastcall Forward(void);
  HRESULT         __fastcall get_Rate(long* pVal/*[out,retval]*/);
  long            __fastcall get_Rate(void);
  HRESULT         __fastcall get_RateCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RateCurrency(void);
  HRESULT         __fastcall get_RatePrecision(long* pVal/*[out,retval]*/);
  long            __fastcall get_RatePrecision(void);
  HRESULT         __fastcall get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                             BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                              BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                  BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                                  BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputStatus(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_InputStatus(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InputStatus(void);
  HRESULT         __fastcall get_ForwardedBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ForwardedBy(void);
  HRESULT         __fastcall get_Seen(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Seen(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Seen(void);
  HRESULT         __fastcall get_CanTransfer(BSTR Target/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanTransfer(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_TransferStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_TransferStatus(void);
  HRESULT         __fastcall get_TransferActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_TransferActive(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TransferActive(void);
  HRESULT         __fastcall get_TransferredBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TransferredBy(void);
  HRESULT         __fastcall get_TransferredTo(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TransferredTo(void);
  HRESULT         __fastcall Transfer(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_TargetIdentity(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TargetIdentity(void);

  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   long            ConferenceId = {read = get_ConferenceId};
  __property   Skype4comlib_tlb::TCallType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TCallStatus Status = {read = get_Status, write = set_Status};
  __property   Skype4comlib_tlb::TCallFailureReason FailureReason = {read = get_FailureReason};
  __property   BSTR            Subject = {read = get_Subject};
  __property   BSTR            PstnNumber = {read = get_PstnNumber};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            PstnStatus = {read = get_PstnStatus};
  __property   TOLEBOOL        Seen = {write = set_Seen};
  __property   BSTR            DTMF = {write = set_DTMF};
  __property   Skype4comlib_tlb::IParticipantCollectionPtr Participants = {read = get_Participants};
  __property   long            VmDuration = {read = get_VmDuration};
  __property   long            VmAllowedDuration = {read = get_VmAllowedDuration};
  __property   Skype4comlib_tlb::TCallVideoStatus VideoStatus = {read = get_VideoStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoSendStatus = {read = get_VideoSendStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoReceiveStatus = {read = get_VideoReceiveStatus};
  __property   long            Rate = {read = get_Rate};
  __property   BSTR            RateCurrency = {read = get_RateCurrency};
  __property   long            RatePrecision = {read = get_RatePrecision};
  __property   TOLEBOOL        InputStatus = {read = get_InputStatus};
  __property   BSTR            ForwardedBy = {read = get_ForwardedBy};
  __property   Skype4comlib_tlb::TCallStatus TransferStatus = {read = get_TransferStatus};
  __property   TOLEBOOL        TransferActive = {read = get_TransferActive};
  __property   BSTR            TransferredBy = {read = get_TransferredBy};
  __property   BSTR            TransferredTo = {read = get_TransferredTo};
  __property   BSTR            TargetIdentity = {read = get_TargetIdentity};
};
typedef TCOMICallT<ICall> TCOMICall;

// *********************************************************************//
// DispIntf:  ICall
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76036886-436C-405F-A96E-7835CCFB82F3}
// *********************************************************************//
template<class T>
class ICallDispT : public TAutoDriver<ICall>
{
public:
  ICallDispT(){}

  ICallDispT(ICall *pintf)
  {
    TAutoDriver<ICall>::Bind(pintf, false);
  }

  ICallDispT(ICallPtr pintf)
  {
    TAutoDriver<ICall>::Bind(pintf, true);
  }

  ICallDispT& operator=(ICall *pintf)
  {
    TAutoDriver<ICall>::Bind(pintf, false);
    return *this;
  }

  ICallDispT& operator=(ICallPtr pintf)
  {
    TAutoDriver<ICall>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Call));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Call);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);
  HRESULT         __fastcall get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerDisplayName(void);
  HRESULT         __fastcall get_ConferenceId(long* pVal/*[out,retval]*/);
  long            __fastcall get_ConferenceId(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Skype4comlib_tlb::TCallStatus pVal/*[in]*/);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_Subject(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Subject(void);
  HRESULT         __fastcall get_PstnNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PstnNumber(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_PstnStatus(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PstnStatus(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall Hold();
  HRESULT         __fastcall Resume();
  HRESULT         __fastcall Finish();
  HRESULT         __fastcall Answer();
  HRESULT         __fastcall set_DTMF(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Participants(Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IParticipantCollection* __fastcall get_Participants(void);
  HRESULT         __fastcall Join(long Id/*[in]*/);
  HRESULT         __fastcall get_VmDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_VmDuration(void);
  HRESULT         __fastcall get_VmAllowedDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_VmAllowedDuration(void);
  HRESULT         __fastcall get_VideoStatus(Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoStatus __fastcall get_VideoStatus(void);
  HRESULT         __fastcall get_VideoSendStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoSendStatus(void);
  HRESULT         __fastcall get_VideoReceiveStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_VideoReceiveStatus(void);
  HRESULT         __fastcall StartVideoSend();
  HRESULT         __fastcall StopVideoSend();
  HRESULT         __fastcall StartVideoReceive();
  HRESULT         __fastcall StopVideoReceive();
  HRESULT         __fastcall RedirectToVoicemail();
  HRESULT         __fastcall Forward();
  HRESULT         __fastcall get_Rate(long* pVal/*[out,retval]*/);
  long            __fastcall get_Rate(void);
  HRESULT         __fastcall get_RateCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RateCurrency(void);
  HRESULT         __fastcall get_RatePrecision(long* pVal/*[out,retval]*/);
  long            __fastcall get_RatePrecision(void);
  HRESULT         __fastcall get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                             , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                             , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                              , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                              , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                  , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                  , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputStatus(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InputStatus(void);
  HRESULT         __fastcall get_ForwardedBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ForwardedBy(void);
  HRESULT         __fastcall get_Seen(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Seen(void);
  HRESULT         __fastcall get_CanTransfer(BSTR Target/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanTransfer(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_TransferStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_TransferStatus(void);
  HRESULT         __fastcall get_TransferActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TransferActive(void);
  HRESULT         __fastcall get_TransferredBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TransferredBy(void);
  HRESULT         __fastcall get_TransferredTo(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TransferredTo(void);
  HRESULT         __fastcall Transfer(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_TargetIdentity(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TargetIdentity(void);

  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   long            ConferenceId = {read = get_ConferenceId};
  __property   Skype4comlib_tlb::TCallType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TCallStatus Status = {read = get_Status, write = set_Status};
  __property   Skype4comlib_tlb::TCallFailureReason FailureReason = {read = get_FailureReason};
  __property   BSTR            Subject = {read = get_Subject};
  __property   BSTR            PstnNumber = {read = get_PstnNumber};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            PstnStatus = {read = get_PstnStatus};
  __property   VARIANT_BOOL    Seen = {read = get_Seen, write = set_Seen};
  __property   BSTR            DTMF = {write = set_DTMF};
  __property   Skype4comlib_tlb::IParticipantCollection* Participants = {read = get_Participants};
  __property   long            VmDuration = {read = get_VmDuration};
  __property   long            VmAllowedDuration = {read = get_VmAllowedDuration};
  __property   Skype4comlib_tlb::TCallVideoStatus VideoStatus = {read = get_VideoStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoSendStatus = {read = get_VideoSendStatus};
  __property   Skype4comlib_tlb::TCallVideoSendStatus VideoReceiveStatus = {read = get_VideoReceiveStatus};
  __property   long            Rate = {read = get_Rate};
  __property   BSTR            RateCurrency = {read = get_RateCurrency};
  __property   long            RatePrecision = {read = get_RatePrecision};
  __property   VARIANT_BOOL    InputStatus = {read = get_InputStatus};
  __property   BSTR            ForwardedBy = {read = get_ForwardedBy};
  __property   Skype4comlib_tlb::TCallStatus TransferStatus = {read = get_TransferStatus};
  __property   VARIANT_BOOL    TransferActive = {read = get_TransferActive};
  __property   BSTR            TransferredBy = {read = get_TransferredBy};
  __property   BSTR            TransferredTo = {read = get_TransferredTo};
  __property   BSTR            TargetIdentity = {read = get_TargetIdentity};
};
typedef ICallDispT<ICall> ICallDisp;

// *********************************************************************//
// SmartIntf: TCOMIParticipantCollection
// Interface: IParticipantCollection
// *********************************************************************//
template <class T /* IParticipantCollection */ >
class TCOMIParticipantCollectionT : public TComInterface<IParticipantCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIParticipantCollectionT() {}
  TCOMIParticipantCollectionT(IParticipantCollection *intf, bool addRef = false) : TComInterface<IParticipantCollection>(intf, addRef) {}
  TCOMIParticipantCollectionT(const TCOMIParticipantCollectionT& src) : TComInterface<IParticipantCollection>(src) {}
  TCOMIParticipantCollectionT& operator=(const TCOMIParticipantCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IParticipant* pParticipant/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IParticipant** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IParticipant* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIParticipantCollectionT<IParticipantCollection> TCOMIParticipantCollection;

// *********************************************************************//
// DispIntf:  IParticipantCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F825FE12-9826-4BD2-BF7E-1ED95B8480FE}
// *********************************************************************//
template<class T>
class IParticipantCollectionDispT : public TAutoDriver<IParticipantCollection>
{
public:
  IParticipantCollectionDispT(){}

  IParticipantCollectionDispT(IParticipantCollection *pintf)
  {
    TAutoDriver<IParticipantCollection>::Bind(pintf, false);
  }

  IParticipantCollectionDispT(IParticipantCollectionPtr pintf)
  {
    TAutoDriver<IParticipantCollection>::Bind(pintf, true);
  }

  IParticipantCollectionDispT& operator=(IParticipantCollection *pintf)
  {
    TAutoDriver<IParticipantCollection>::Bind(pintf, false);
    return *this;
  }

  IParticipantCollectionDispT& operator=(IParticipantCollectionPtr pintf)
  {
    TAutoDriver<IParticipantCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ParticipantCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ParticipantCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IParticipant* pParticipant/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IParticipant** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IParticipant* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IParticipantCollectionDispT<IParticipantCollection> IParticipantCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIParticipant
// Interface: IParticipant
// *********************************************************************//
template <class T /* IParticipant */ >
class TCOMIParticipantT : public TComInterface<IParticipant>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIParticipantT() {}
  TCOMIParticipantT(IParticipant *intf, bool addRef = false) : TComInterface<IParticipant>(intf, addRef) {}
  TCOMIParticipantT(const TCOMIParticipantT& src) : TComInterface<IParticipant>(src) {}
  TCOMIParticipantT& operator=(const TCOMIParticipantT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall get_CallType(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall get_CallType(void);
  HRESULT         __fastcall get_CallStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_CallStatus(void);

  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TCallType CallType = {read = get_CallType};
  __property   Skype4comlib_tlb::TCallStatus CallStatus = {read = get_CallStatus};
};
typedef TCOMIParticipantT<IParticipant> TCOMIParticipant;

// *********************************************************************//
// DispIntf:  IParticipant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1B2AD09-1961-4336-A6BF-93010B73DE72}
// *********************************************************************//
template<class T>
class IParticipantDispT : public TAutoDriver<IParticipant>
{
public:
  IParticipantDispT(){}

  IParticipantDispT(IParticipant *pintf)
  {
    TAutoDriver<IParticipant>::Bind(pintf, false);
  }

  IParticipantDispT(IParticipantPtr pintf)
  {
    TAutoDriver<IParticipant>::Bind(pintf, true);
  }

  IParticipantDispT& operator=(IParticipant *pintf)
  {
    TAutoDriver<IParticipant>::Bind(pintf, false);
    return *this;
  }

  IParticipantDispT& operator=(IParticipantPtr pintf)
  {
    TAutoDriver<IParticipant>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Participant));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Participant);
  }

  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall get_CallType(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall get_CallType(void);
  HRESULT         __fastcall get_CallStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_CallStatus(void);

  __property   BSTR            Handle = {read = get_Handle};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::TCallType CallType = {read = get_CallType};
  __property   Skype4comlib_tlb::TCallStatus CallStatus = {read = get_CallStatus};
};
typedef IParticipantDispT<IParticipant> IParticipantDisp;

// *********************************************************************//
// SmartIntf: TCOMICallChannel
// Interface: ICallChannel
// *********************************************************************//
template <class T /* ICallChannel */ >
class TCOMICallChannelT : public TComInterface<ICallChannel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallChannelT() {}
  TCOMICallChannelT(ICallChannel *intf, bool addRef = false) : TComInterface<ICallChannel>(intf, addRef) {}
  TCOMICallChannelT(const TCOMICallChannelT& src) : TComInterface<ICallChannel>(src) {}
  TCOMICallChannelT& operator=(const TCOMICallChannelT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallChannelType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/);
  HRESULT         __fastcall SendTextMessage(BSTR Text);
  HRESULT         __fastcall get_Stream(Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Stream(Skype4comlib_tlb::IApplicationStreamPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamPtr __fastcall get_Stream(void);
  HRESULT         __fastcall get_Manager(Skype4comlib_tlb::ICallChannelManager** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Manager(Skype4comlib_tlb::ICallChannelManagerPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannelManagerPtr __fastcall get_Manager(void);
  HRESULT         __fastcall get_Call(Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Call(Skype4comlib_tlb::ICallPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallPtr __fastcall get_Call(void);

  __property   Skype4comlib_tlb::TCallChannelType Type = {read = get_Type, write = set_Type};
  __property   Skype4comlib_tlb::IApplicationStreamPtr Stream = {read = get_Stream};
  __property   Skype4comlib_tlb::ICallChannelManagerPtr Manager = {read = get_Manager};
  __property   Skype4comlib_tlb::ICallPtr Call = {read = get_Call};
};
typedef TCOMICallChannelT<ICallChannel> TCOMICallChannel;

// *********************************************************************//
// DispIntf:  ICallChannel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B76C04C9-0EB1-4748-B0C0-D01DEB595906}
// *********************************************************************//
template<class T>
class ICallChannelDispT : public TAutoDriver<ICallChannel>
{
public:
  ICallChannelDispT(){}

  ICallChannelDispT(ICallChannel *pintf)
  {
    TAutoDriver<ICallChannel>::Bind(pintf, false);
  }

  ICallChannelDispT(ICallChannelPtr pintf)
  {
    TAutoDriver<ICallChannel>::Bind(pintf, true);
  }

  ICallChannelDispT& operator=(ICallChannel *pintf)
  {
    TAutoDriver<ICallChannel>::Bind(pintf, false);
    return *this;
  }

  ICallChannelDispT& operator=(ICallChannelPtr pintf)
  {
    TAutoDriver<ICallChannel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CallChannel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CallChannel);
  }

  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallChannelType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/);
  HRESULT         __fastcall SendTextMessage(BSTR Text);
  HRESULT         __fastcall get_Stream(Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStream* __fastcall get_Stream(void);
  HRESULT         __fastcall get_Manager(Skype4comlib_tlb::ICallChannelManager** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannelManager* __fastcall get_Manager(void);
  HRESULT         __fastcall get_Call(Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall get_Call(void);

  __property   Skype4comlib_tlb::TCallChannelType Type = {read = get_Type, write = set_Type};
  __property   Skype4comlib_tlb::IApplicationStream* Stream = {read = get_Stream};
  __property   Skype4comlib_tlb::ICallChannelManager* Manager = {read = get_Manager};
  __property   Skype4comlib_tlb::ICall* Call = {read = get_Call};
};
typedef ICallChannelDispT<ICallChannel> ICallChannelDisp;

// *********************************************************************//
// SmartIntf: TCOMICallChannelManager
// Interface: ICallChannelManager
// *********************************************************************//
template <class T /* ICallChannelManager */ >
class TCOMICallChannelManagerT : public TComInterface<ICallChannelManager>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallChannelManagerT() {}
  TCOMICallChannelManagerT(ICallChannelManager *intf, bool addRef = false) : TComInterface<ICallChannelManager>(intf, addRef) {}
  TCOMICallChannelManagerT(const TCOMICallChannelManagerT& src) : TComInterface<ICallChannelManager>(src) {}
  TCOMICallChannelManagerT& operator=(const TCOMICallChannelManagerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Connect(Skype4comlib_tlb::ISkype* pSkype/*[in]*/);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall get_Channels(Skype4comlib_tlb::ICallChannelCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Channels(Skype4comlib_tlb::ICallChannelCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannelCollectionPtr __fastcall get_Channels(void);
  HRESULT         __fastcall get_ChannelType(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallChannelType __fastcall get_ChannelType(void);
  HRESULT         __fastcall set_ChannelType(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall CreateApplication(BSTR ApplicationName/*[in,def,opt]*/);
  HRESULT         __fastcall get_Created(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Created(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Created(void);

  __property   Skype4comlib_tlb::ICallChannelCollectionPtr Channels = {read = get_Channels};
  __property   Skype4comlib_tlb::TCallChannelType ChannelType = {read = get_ChannelType, write = set_ChannelType};
  __property   BSTR            Name = {read = get_Name};
  __property   TOLEBOOL        Created = {read = get_Created};
};
typedef TCOMICallChannelManagerT<ICallChannelManager> TCOMICallChannelManager;

// *********************************************************************//
// DispIntf:  ICallChannelManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C27C77-525F-4A3F-B9DD-C5A77C67250D}
// *********************************************************************//
template<class T>
class ICallChannelManagerDispT : public TAutoDriver<ICallChannelManager>
{
public:
  ICallChannelManagerDispT(){}

  ICallChannelManagerDispT(ICallChannelManager *pintf)
  {
    TAutoDriver<ICallChannelManager>::Bind(pintf, false);
  }

  ICallChannelManagerDispT(ICallChannelManagerPtr pintf)
  {
    TAutoDriver<ICallChannelManager>::Bind(pintf, true);
  }

  ICallChannelManagerDispT& operator=(ICallChannelManager *pintf)
  {
    TAutoDriver<ICallChannelManager>::Bind(pintf, false);
    return *this;
  }

  ICallChannelManagerDispT& operator=(ICallChannelManagerPtr pintf)
  {
    TAutoDriver<ICallChannelManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CallChannelManager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CallChannelManager);
  }

  HRESULT         __fastcall Connect(Skype4comlib_tlb::ISkype* pSkype/*[in]*/);
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall get_Channels(Skype4comlib_tlb::ICallChannelCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannelCollection* __fastcall get_Channels(void);
  HRESULT         __fastcall get_ChannelType(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallChannelType __fastcall get_ChannelType(void);
  HRESULT         __fastcall set_ChannelType(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall CreateApplication(BSTR ApplicationName/*[in,def,opt]*/);
  HRESULT         __fastcall get_Created(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Created(void);

  __property   Skype4comlib_tlb::ICallChannelCollection* Channels = {read = get_Channels};
  __property   Skype4comlib_tlb::TCallChannelType ChannelType = {read = get_ChannelType, write = set_ChannelType};
  __property   BSTR            Name = {read = get_Name};
  __property   VARIANT_BOOL    Created = {read = get_Created};
};
typedef ICallChannelManagerDispT<ICallChannelManager> ICallChannelManagerDisp;

// *********************************************************************//
// SmartIntf: TCOMISkype
// Interface: ISkype
// *********************************************************************//
template <class T /* ISkype */ >
class TCOMISkypeT : public TComInterface<ISkype>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISkypeT() {}
  TCOMISkypeT(ISkype *intf, bool addRef = false) : TComInterface<ISkype>(intf, addRef) {}
  TCOMISkypeT(const TCOMISkypeT& src) : TComInterface<ISkype>(src) {}
  TCOMISkypeT& operator=(const TCOMISkypeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Timeout(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timeout(void);
  HRESULT         __fastcall set_Timeout(long pVal/*[in]*/);
  HRESULT         __fastcall get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/);
  HRESULT         __fastcall set_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Variable(BSTR Name/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Variable(BSTR Name/*[in]*/);
  HRESULT         __fastcall set_Variable(BSTR Name/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentUserHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CurrentUserHandle(void);
  HRESULT         __fastcall get_CurrentUserStatus(Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserStatus __fastcall get_CurrentUserStatus(void);
  HRESULT         __fastcall set_CurrentUserStatus(Skype4comlib_tlb::TUserStatus pVal/*[in]*/);
  HRESULT         __fastcall get_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TConnectionStatus __fastcall get_ConnectionStatus(void);
  HRESULT         __fastcall get_Mute(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Mute(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Mute(void);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Mute(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Version(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_Privilege(BSTR Name/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Privilege(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_CurrentUser(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CurrentUser(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserPtr __fastcall get_CurrentUser(void);
  HRESULT         __fastcall get_Convert(Skype4comlib_tlb::IConversion** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Convert(Skype4comlib_tlb::IConversionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConversionPtr __fastcall get_Convert(void);
  HRESULT         __fastcall get_Friends(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Friends(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Friends(void);
  HRESULT         __fastcall SearchForUsers(BSTR Target/*[in]*/, 
                                            Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall SearchForUsers(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_Calls(BSTR Target/*[in,def,opt]*/, 
                                       Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_Calls(BSTR Target/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollectionPtr __fastcall get_ActiveCalls(void);
  HRESULT         __fastcall get_MissedCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MissedCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollectionPtr __fastcall get_MissedCalls(void);
  HRESULT         __fastcall get_Messages(BSTR Target/*[in,def,opt]*/, 
                                          Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_Messages(BSTR Target/*[in,def,opt]*/);
  HRESULT         __fastcall get_MissedMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MissedMessages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall get_MissedMessages(void);
  HRESULT         __fastcall get_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TAttachmentStatus __fastcall get_AttachmentStatus(void);
  HRESULT         __fastcall get_Protocol(long* pVal/*[out,retval]*/);
  long            __fastcall get_Protocol(void);
  HRESULT         __fastcall set_Protocol(long pVal/*[in]*/);
  HRESULT         __fastcall Attach(long Protocol/*[in,def,opt]*/, VARIANT_BOOL Wait/*[in,def,opt]*/);
  HRESULT         __fastcall PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                       BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/, 
                                       Skype4comlib_tlb::ICall** pCall/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                                BSTR Target3/*[in,def,opt]*/, 
                                                BSTR Target4/*[in,def,opt]*/);
  HRESULT         __fastcall SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/);
  HRESULT         __fastcall get_User(BSTR Username/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_User(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall get_Message(long Id/*[in,def,opt]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall get_Message(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall get_Call(long Id/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall get_Call(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall SendCommand(Skype4comlib_tlb::ICommand* pCommand/*[in]*/);
  HRESULT         __fastcall get_Chats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Chats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollectionPtr __fastcall get_Chats(void);
  HRESULT         __fastcall get_Chat(BSTR Name/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Chat(BSTR Name/*[in,def,opt]*/);
  HRESULT         __fastcall ChangeUserStatus(Skype4comlib_tlb::TUserStatus newVal/*[in]*/);
  HRESULT         __fastcall get_Conference(long Id/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::IConference** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConference* __fastcall get_Conference(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall get_Conferences(Skype4comlib_tlb::IConferenceCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Conferences(Skype4comlib_tlb::IConferenceCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConferenceCollectionPtr __fastcall get_Conferences(void);
  HRESULT         __fastcall get_Profile(BSTR Property/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Profile(BSTR Property/*[in]*/);
  HRESULT         __fastcall set_Profile(BSTR Property/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ActiveChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollectionPtr __fastcall get_ActiveChats(void);
  HRESULT         __fastcall get_MissedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MissedChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollectionPtr __fastcall get_MissedChats(void);
  HRESULT         __fastcall get_RecentChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_RecentChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollectionPtr __fastcall get_RecentChats(void);
  HRESULT         __fastcall get_BookmarkedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_BookmarkedChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollectionPtr __fastcall get_BookmarkedChats(void);
  HRESULT         __fastcall CreateChatWith(BSTR Username/*[in]*/, 
                                            Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatWith(BSTR Username/*[in]*/);
  HRESULT         __fastcall CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/, 
                                                Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall get_Voicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Voicemails(Skype4comlib_tlb::IVoicemailCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemailCollectionPtr __fastcall get_Voicemails(void);
  HRESULT         __fastcall SendVoicemail(BSTR Username/*[in]*/, 
                                           Skype4comlib_tlb::IVoicemail** pVoicemail/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall SendVoicemail(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_UsersWaitingAuthorization(void);
  HRESULT         __fastcall ClearChatHistory(void);
  HRESULT         __fastcall ClearVoicemailHistory(void);
  HRESULT         __fastcall ClearCallHistory(BSTR Username/*[in,def,opt]*/, 
                                              Skype4comlib_tlb::TCallHistory Type/*[in,def,opt]*/);
  HRESULT         __fastcall get_CommandId(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CommandId(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CommandId(void);
  HRESULT         __fastcall set_CommandId(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_CommandId(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Application(BSTR Name/*[in]*/, 
                                             Skype4comlib_tlb::IApplication** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplication* __fastcall get_Application(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Greeting(BSTR Username/*[in,def,opt]*/, 
                                          Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Greeting(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall get_Cache(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Cache(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cache(void);
  HRESULT         __fastcall set_Cache(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Cache(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall ResetCache(void);
  HRESULT         __fastcall get_CurrentUserProfile(Skype4comlib_tlb::IProfile** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CurrentUserProfile(Skype4comlib_tlb::IProfilePtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IProfilePtr __fastcall get_CurrentUserProfile(void);
  HRESULT         __fastcall get_Groups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Groups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollectionPtr __fastcall get_Groups(void);
  HRESULT         __fastcall get_CustomGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CustomGroups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollectionPtr __fastcall get_CustomGroups(void);
  HRESULT         __fastcall get_HardwiredGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_HardwiredGroups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollectionPtr __fastcall get_HardwiredGroups(void);
  HRESULT         __fastcall CreateGroup(BSTR GroupName/*[in]*/, 
                                         Skype4comlib_tlb::IGroup** pGroup/*[out,retval]*/);
  Skype4comlib_tlb::IGroup* __fastcall CreateGroup(BSTR GroupName/*[in]*/);
  HRESULT         __fastcall DeleteGroup(long GroupId/*[in]*/);
  HRESULT         __fastcall get_Settings(Skype4comlib_tlb::ISettings** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Settings(Skype4comlib_tlb::ISettingsPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISettingsPtr __fastcall get_Settings(void);
  HRESULT         __fastcall get_Client(Skype4comlib_tlb::IClient** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Client(Skype4comlib_tlb::IClientPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IClientPtr __fastcall get_Client(void);
  HRESULT         __fastcall set_FriendlyName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                         BSTR Reply/*[in,def,opt]*/, 
                                         VARIANT_BOOL Block/*[in,def,opt]*/, 
                                         long Timeout/*[in,def,opt]*/, 
                                         Skype4comlib_tlb::ICommand** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICommand* __fastcall get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                                     BSTR Reply/*[in,def,opt]*/, 
                                                     VARIANT_BOOL Block/*[in,def,opt]*/, 
                                                     long Timeout/*[in,def,opt]*/);
  HRESULT         __fastcall get_Voicemail(long Id/*[in]*/, 
                                           Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Voicemail(long Id/*[in]*/);
  HRESULT         __fastcall get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemailCollectionPtr __fastcall get_MissedVoicemails(void);
  HRESULT         __fastcall EnableApiSecurityContext(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/);
  HRESULT         __fastcall get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/);
  HRESULT         __fastcall CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                       BSTR TargetNumbers/*[in]*/, 
                                       Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                                      BSTR TargetNumbers/*[in]*/);
  HRESULT         __fastcall get_Smss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Smss(Skype4comlib_tlb::ISmsMessageCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessageCollectionPtr __fastcall get_Smss(void);
  HRESULT         __fastcall get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessageCollectionPtr __fastcall get_MissedSmss(void);
  HRESULT         __fastcall SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                                     BSTR ReplyToNumber/*[in,def,opt]*/, 
                                     Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall SendSms(BSTR TargetNumbers/*[in]*/, 
                                                    BSTR MessageText/*[in]*/, 
                                                    BSTR ReplyToNumber/*[in,def,opt]*/);
  HRESULT         __fastcall AsyncSearchUsers(BSTR Target/*[in]*/, long* pCookie/*[out,retval]*/);
  long            __fastcall AsyncSearchUsers(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_ApiWrapperVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ApiWrapperVersion(void);
  HRESULT         __fastcall get_SilentMode(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_SilentMode(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SilentMode(void);
  HRESULT         __fastcall set_SilentMode(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_SilentMode(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_FileTransfers(Skype4comlib_tlb::IFileTransferCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IFileTransferCollectionPtr __fastcall get_FileTransfers(void);
  HRESULT         __fastcall get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IFileTransferCollectionPtr __fastcall get_ActiveFileTransfers(void);
  HRESULT         __fastcall get_FocusedContacts(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_FocusedContacts(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_FocusedContacts(void);
  HRESULT         __fastcall FindChatUsingBlob(BSTR Blob/*[in]*/, 
                                               Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall FindChatUsingBlob(BSTR Blob/*[in]*/);
  HRESULT         __fastcall CreateChatUsingBlob(BSTR Blob/*[in]*/, 
                                                 Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatUsingBlob(BSTR Blob/*[in]*/);
  HRESULT         __fastcall get_PredictiveDialerCountry(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PredictiveDialerCountry(void);

  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   BSTR            CurrentUserHandle = {read = get_CurrentUserHandle};
  __property   Skype4comlib_tlb::TUserStatus CurrentUserStatus = {read = get_CurrentUserStatus, write = set_CurrentUserStatus};
  __property   Skype4comlib_tlb::TConnectionStatus ConnectionStatus = {read = get_ConnectionStatus};
  __property   TOLEBOOL        Mute = {read = get_Mute, write = set_Mute};
  __property   BSTR            Version = {read = get_Version};
  __property   Skype4comlib_tlb::IUserPtr CurrentUser = {read = get_CurrentUser};
  __property   Skype4comlib_tlb::IConversionPtr Convert = {read = get_Convert};
  __property   Skype4comlib_tlb::IUserCollectionPtr Friends = {read = get_Friends};
  __property   Skype4comlib_tlb::ICallCollectionPtr ActiveCalls = {read = get_ActiveCalls};
  __property   Skype4comlib_tlb::ICallCollectionPtr MissedCalls = {read = get_MissedCalls};
  __property   Skype4comlib_tlb::IChatMessageCollectionPtr MissedMessages = {read = get_MissedMessages};
  __property   Skype4comlib_tlb::TAttachmentStatus AttachmentStatus = {read = get_AttachmentStatus};
  __property   long            Protocol = {read = get_Protocol, write = set_Protocol};
  __property   Skype4comlib_tlb::IChatCollectionPtr Chats = {read = get_Chats};
  __property   Skype4comlib_tlb::IConferenceCollectionPtr Conferences = {read = get_Conferences};
  __property   Skype4comlib_tlb::IChatCollectionPtr ActiveChats = {read = get_ActiveChats};
  __property   Skype4comlib_tlb::IChatCollectionPtr MissedChats = {read = get_MissedChats};
  __property   Skype4comlib_tlb::IChatCollectionPtr RecentChats = {read = get_RecentChats};
  __property   Skype4comlib_tlb::IChatCollectionPtr BookmarkedChats = {read = get_BookmarkedChats};
  __property   Skype4comlib_tlb::IVoicemailCollectionPtr Voicemails = {read = get_Voicemails};
  __property   Skype4comlib_tlb::IUserCollectionPtr UsersWaitingAuthorization = {read = get_UsersWaitingAuthorization};
  __property   TOLEBOOL        CommandId = {read = get_CommandId, write = set_CommandId};
  __property   TOLEBOOL        Cache = {read = get_Cache, write = set_Cache};
  __property   Skype4comlib_tlb::IProfilePtr CurrentUserProfile = {read = get_CurrentUserProfile};
  __property   Skype4comlib_tlb::IGroupCollectionPtr Groups = {read = get_Groups};
  __property   Skype4comlib_tlb::IGroupCollectionPtr CustomGroups = {read = get_CustomGroups};
  __property   Skype4comlib_tlb::IGroupCollectionPtr HardwiredGroups = {read = get_HardwiredGroups};
  __property   Skype4comlib_tlb::ISettingsPtr Settings = {read = get_Settings};
  __property   Skype4comlib_tlb::IClientPtr Client = {read = get_Client};
  __property   BSTR            FriendlyName = {write = set_FriendlyName};
  __property   Skype4comlib_tlb::IVoicemailCollectionPtr MissedVoicemails = {read = get_MissedVoicemails};
  __property   Skype4comlib_tlb::ISmsMessageCollectionPtr Smss = {read = get_Smss};
  __property   Skype4comlib_tlb::ISmsMessageCollectionPtr MissedSmss = {read = get_MissedSmss};
  __property   BSTR            ApiWrapperVersion = {read = get_ApiWrapperVersion};
  __property   TOLEBOOL        SilentMode = {read = get_SilentMode, write = set_SilentMode};
  __property   Skype4comlib_tlb::IFileTransferCollectionPtr FileTransfers = {read = get_FileTransfers};
  __property   Skype4comlib_tlb::IFileTransferCollectionPtr ActiveFileTransfers = {read = get_ActiveFileTransfers};
  __property   Skype4comlib_tlb::IUserCollectionPtr FocusedContacts = {read = get_FocusedContacts};
  __property   BSTR            PredictiveDialerCountry = {read = get_PredictiveDialerCountry};
};
typedef TCOMISkypeT<ISkype> TCOMISkype;

// *********************************************************************//
// DispIntf:  ISkype
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1878BFE-53D3-402E-8C86-190B19AF70D5}
// *********************************************************************//
template<class T>
class ISkypeDispT : public TAutoDriver<ISkype>
{
public:
  ISkypeDispT(){}

  ISkypeDispT(ISkype *pintf)
  {
    TAutoDriver<ISkype>::Bind(pintf, false);
  }

  ISkypeDispT(ISkypePtr pintf)
  {
    TAutoDriver<ISkype>::Bind(pintf, true);
  }

  ISkypeDispT& operator=(ISkype *pintf)
  {
    TAutoDriver<ISkype>::Bind(pintf, false);
    return *this;
  }

  ISkypeDispT& operator=(ISkypePtr pintf)
  {
    TAutoDriver<ISkype>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Skype));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Skype);
  }

  HRESULT         __fastcall get_Timeout(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timeout(void);
  HRESULT         __fastcall set_Timeout(long pVal/*[in]*/);
  HRESULT         __fastcall get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/);
  HRESULT         __fastcall set_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, 
                                          BSTR PropName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Variable(BSTR Name/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Variable(BSTR Name/*[in]*/);
  HRESULT         __fastcall set_Variable(BSTR Name/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentUserHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CurrentUserHandle(void);
  HRESULT         __fastcall get_CurrentUserStatus(Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserStatus __fastcall get_CurrentUserStatus(void);
  HRESULT         __fastcall set_CurrentUserStatus(Skype4comlib_tlb::TUserStatus pVal/*[in]*/);
  HRESULT         __fastcall get_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TConnectionStatus __fastcall get_ConnectionStatus(void);
  HRESULT         __fastcall get_Mute(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Mute(void);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Version(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_Privilege(BSTR Name/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Privilege(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_CurrentUser(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_CurrentUser(void);
  HRESULT         __fastcall get_Convert(Skype4comlib_tlb::IConversion** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConversion* __fastcall get_Convert(void);
  HRESULT         __fastcall get_Friends(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Friends(void);
  HRESULT         __fastcall SearchForUsers(BSTR Target/*[in]*/, 
                                            Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall SearchForUsers(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_Calls(BSTR Target/*[in,def,opt]*/, 
                                       Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_Calls(BSTR Target/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_ActiveCalls(void);
  HRESULT         __fastcall get_MissedCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_MissedCalls(void);
  HRESULT         __fastcall get_Messages(BSTR Target/*[in,def,opt]*/, 
                                          Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_Messages(BSTR Target/*[in,def,opt]*/);
  HRESULT         __fastcall get_MissedMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_MissedMessages(void);
  HRESULT         __fastcall get_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TAttachmentStatus __fastcall get_AttachmentStatus(void);
  HRESULT         __fastcall get_Protocol(long* pVal/*[out,retval]*/);
  long            __fastcall get_Protocol(void);
  HRESULT         __fastcall set_Protocol(long pVal/*[in]*/);
  HRESULT         __fastcall Attach(long Protocol/*[in,def,opt]*/, VARIANT_BOOL Wait/*[in,def,opt]*/);
  HRESULT         __fastcall PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                       BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/, 
                                       Skype4comlib_tlb::ICall** pCall/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                                                BSTR Target3/*[in,def,opt]*/, 
                                                BSTR Target4/*[in,def,opt]*/);
  HRESULT         __fastcall SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/);
  HRESULT         __fastcall get_User(BSTR Username/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_User(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall get_Message(long Id/*[in,def,opt]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall get_Message(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall get_Call(long Id/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall get_Call(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall SendCommand(Skype4comlib_tlb::ICommand* pCommand/*[in]*/);
  HRESULT         __fastcall get_Chats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollection* __fastcall get_Chats(void);
  HRESULT         __fastcall get_Chat(BSTR Name/*[in,def,opt]*/, 
                                      Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Chat(BSTR Name/*[in,def,opt]*/);
  HRESULT         __fastcall ChangeUserStatus(Skype4comlib_tlb::TUserStatus newVal/*[in]*/);
  HRESULT         __fastcall get_Conference(long Id/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::IConference** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConference* __fastcall get_Conference(long Id/*[in,def,opt]*/);
  HRESULT         __fastcall get_Conferences(Skype4comlib_tlb::IConferenceCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConferenceCollection* __fastcall get_Conferences(void);
  HRESULT         __fastcall get_Profile(BSTR Property/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Profile(BSTR Property/*[in]*/);
  HRESULT         __fastcall set_Profile(BSTR Property/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ActiveChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollection* __fastcall get_ActiveChats(void);
  HRESULT         __fastcall get_MissedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollection* __fastcall get_MissedChats(void);
  HRESULT         __fastcall get_RecentChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollection* __fastcall get_RecentChats(void);
  HRESULT         __fastcall get_BookmarkedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatCollection* __fastcall get_BookmarkedChats(void);
  HRESULT         __fastcall CreateChatWith(BSTR Username/*[in]*/, 
                                            Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatWith(BSTR Username/*[in]*/);
  HRESULT         __fastcall CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/
                                                , Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall get_Voicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemailCollection* __fastcall get_Voicemails(void);
  HRESULT         __fastcall SendVoicemail(BSTR Username/*[in]*/, 
                                           Skype4comlib_tlb::IVoicemail** pVoicemail/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall SendVoicemail(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_UsersWaitingAuthorization(void);
  HRESULT         __fastcall ClearChatHistory();
  HRESULT         __fastcall ClearVoicemailHistory();
  HRESULT         __fastcall ClearCallHistory(BSTR Username/*[in,def,opt]*/, 
                                              Skype4comlib_tlb::TCallHistory Type/*[in,def,opt]*/);
  HRESULT         __fastcall get_CommandId(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CommandId(void);
  HRESULT         __fastcall set_CommandId(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Application(BSTR Name/*[in]*/, 
                                             Skype4comlib_tlb::IApplication** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplication* __fastcall get_Application(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Greeting(BSTR Username/*[in,def,opt]*/, 
                                          Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Greeting(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall get_Cache(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cache(void);
  HRESULT         __fastcall set_Cache(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall ResetCache();
  HRESULT         __fastcall get_CurrentUserProfile(Skype4comlib_tlb::IProfile** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IProfile* __fastcall get_CurrentUserProfile(void);
  HRESULT         __fastcall get_Groups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollection* __fastcall get_Groups(void);
  HRESULT         __fastcall get_CustomGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollection* __fastcall get_CustomGroups(void);
  HRESULT         __fastcall get_HardwiredGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroupCollection* __fastcall get_HardwiredGroups(void);
  HRESULT         __fastcall CreateGroup(BSTR GroupName/*[in]*/, 
                                         Skype4comlib_tlb::IGroup** pGroup/*[out,retval]*/);
  Skype4comlib_tlb::IGroup* __fastcall CreateGroup(BSTR GroupName/*[in]*/);
  HRESULT         __fastcall DeleteGroup(long GroupId/*[in]*/);
  HRESULT         __fastcall get_Settings(Skype4comlib_tlb::ISettings** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISettings* __fastcall get_Settings(void);
  HRESULT         __fastcall get_Client(Skype4comlib_tlb::IClient** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IClient* __fastcall get_Client(void);
  HRESULT         __fastcall set_FriendlyName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                         BSTR Reply/*[in,def,opt]*/, 
                                         VARIANT_BOOL Block/*[in,def,opt]*/, 
                                         long Timeout/*[in,def,opt]*/, 
                                         Skype4comlib_tlb::ICommand** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICommand* __fastcall get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, 
                                                     BSTR Reply/*[in,def,opt]*/, 
                                                     VARIANT_BOOL Block/*[in,def,opt]*/, 
                                                     long Timeout/*[in,def,opt]*/);
  HRESULT         __fastcall get_Voicemail(long Id/*[in]*/, 
                                           Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Voicemail(long Id/*[in]*/);
  HRESULT         __fastcall get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemailCollection* __fastcall get_MissedVoicemails(void);
  HRESULT         __fastcall EnableApiSecurityContext(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/);
  HRESULT         __fastcall get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/
                                                           , VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/);
  HRESULT         __fastcall CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                       BSTR TargetNumbers/*[in]*/, 
                                       Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                                                      BSTR TargetNumbers/*[in]*/);
  HRESULT         __fastcall get_Smss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessageCollection* __fastcall get_Smss(void);
  HRESULT         __fastcall get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessageCollection* __fastcall get_MissedSmss(void);
  HRESULT         __fastcall SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                                     BSTR ReplyToNumber/*[in,def,opt]*/, 
                                     Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall SendSms(BSTR TargetNumbers/*[in]*/, 
                                                    BSTR MessageText/*[in]*/, 
                                                    BSTR ReplyToNumber/*[in,def,opt]*/);
  HRESULT         __fastcall AsyncSearchUsers(BSTR Target/*[in]*/, long* pCookie/*[out,retval]*/);
  long            __fastcall AsyncSearchUsers(BSTR Target/*[in]*/);
  HRESULT         __fastcall get_ApiWrapperVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ApiWrapperVersion(void);
  HRESULT         __fastcall get_SilentMode(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SilentMode(void);
  HRESULT         __fastcall set_SilentMode(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IFileTransferCollection* __fastcall get_FileTransfers(void);
  HRESULT         __fastcall get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IFileTransferCollection* __fastcall get_ActiveFileTransfers(void);
  HRESULT         __fastcall get_FocusedContacts(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_FocusedContacts(void);
  HRESULT         __fastcall FindChatUsingBlob(BSTR Blob/*[in]*/, 
                                               Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall FindChatUsingBlob(BSTR Blob/*[in]*/);
  HRESULT         __fastcall CreateChatUsingBlob(BSTR Blob/*[in]*/, 
                                                 Skype4comlib_tlb::IChat** pChat/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall CreateChatUsingBlob(BSTR Blob/*[in]*/);
  HRESULT         __fastcall get_PredictiveDialerCountry(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PredictiveDialerCountry(void);

  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   BSTR            CurrentUserHandle = {read = get_CurrentUserHandle};
  __property   Skype4comlib_tlb::TUserStatus CurrentUserStatus = {read = get_CurrentUserStatus, write = set_CurrentUserStatus};
  __property   Skype4comlib_tlb::TConnectionStatus ConnectionStatus = {read = get_ConnectionStatus};
  __property   VARIANT_BOOL    Mute = {read = get_Mute, write = set_Mute};
  __property   BSTR            Version = {read = get_Version};
  __property   Skype4comlib_tlb::IUser* CurrentUser = {read = get_CurrentUser};
  __property   Skype4comlib_tlb::IConversion* Convert = {read = get_Convert};
  __property   Skype4comlib_tlb::IUserCollection* Friends = {read = get_Friends};
  __property   Skype4comlib_tlb::ICallCollection* ActiveCalls = {read = get_ActiveCalls};
  __property   Skype4comlib_tlb::ICallCollection* MissedCalls = {read = get_MissedCalls};
  __property   Skype4comlib_tlb::IChatMessageCollection* MissedMessages = {read = get_MissedMessages};
  __property   Skype4comlib_tlb::TAttachmentStatus AttachmentStatus = {read = get_AttachmentStatus};
  __property   long            Protocol = {read = get_Protocol, write = set_Protocol};
  __property   Skype4comlib_tlb::IChatCollection* Chats = {read = get_Chats};
  __property   Skype4comlib_tlb::IConferenceCollection* Conferences = {read = get_Conferences};
  __property   Skype4comlib_tlb::IChatCollection* ActiveChats = {read = get_ActiveChats};
  __property   Skype4comlib_tlb::IChatCollection* MissedChats = {read = get_MissedChats};
  __property   Skype4comlib_tlb::IChatCollection* RecentChats = {read = get_RecentChats};
  __property   Skype4comlib_tlb::IChatCollection* BookmarkedChats = {read = get_BookmarkedChats};
  __property   Skype4comlib_tlb::IVoicemailCollection* Voicemails = {read = get_Voicemails};
  __property   Skype4comlib_tlb::IUserCollection* UsersWaitingAuthorization = {read = get_UsersWaitingAuthorization};
  __property   VARIANT_BOOL    CommandId = {read = get_CommandId, write = set_CommandId};
  __property   VARIANT_BOOL    Cache = {read = get_Cache, write = set_Cache};
  __property   Skype4comlib_tlb::IProfile* CurrentUserProfile = {read = get_CurrentUserProfile};
  __property   Skype4comlib_tlb::IGroupCollection* Groups = {read = get_Groups};
  __property   Skype4comlib_tlb::IGroupCollection* CustomGroups = {read = get_CustomGroups};
  __property   Skype4comlib_tlb::IGroupCollection* HardwiredGroups = {read = get_HardwiredGroups};
  __property   Skype4comlib_tlb::ISettings* Settings = {read = get_Settings};
  __property   Skype4comlib_tlb::IClient* Client = {read = get_Client};
  __property   BSTR            FriendlyName = {write = set_FriendlyName};
  __property   Skype4comlib_tlb::IVoicemailCollection* MissedVoicemails = {read = get_MissedVoicemails};
  __property   Skype4comlib_tlb::ISmsMessageCollection* Smss = {read = get_Smss};
  __property   Skype4comlib_tlb::ISmsMessageCollection* MissedSmss = {read = get_MissedSmss};
  __property   BSTR            ApiWrapperVersion = {read = get_ApiWrapperVersion};
  __property   VARIANT_BOOL    SilentMode = {read = get_SilentMode, write = set_SilentMode};
  __property   Skype4comlib_tlb::IFileTransferCollection* FileTransfers = {read = get_FileTransfers};
  __property   Skype4comlib_tlb::IFileTransferCollection* ActiveFileTransfers = {read = get_ActiveFileTransfers};
  __property   Skype4comlib_tlb::IUserCollection* FocusedContacts = {read = get_FocusedContacts};
  __property   BSTR            PredictiveDialerCountry = {read = get_PredictiveDialerCountry};
};
typedef ISkypeDispT<ISkype> ISkypeDisp;

// *********************************************************************//
// SmartIntf: TCOMIConversion
// Interface: IConversion
// *********************************************************************//
template <class T /* IConversion */ >
class TCOMIConversionT : public TComInterface<IConversion>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIConversionT() {}
  TCOMIConversionT(IConversion *intf, bool addRef = false) : TComInterface<IConversion>(intf, addRef) {}
  TCOMIConversionT(const TCOMIConversionT& src) : TComInterface<IConversion>(src) {}
  TCOMIConversionT& operator=(const TCOMIConversionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/, 
                                                BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/);
  HRESULT         __fastcall TextToOnlineStatus(BSTR Text/*[in]*/, 
                                                Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TOnlineStatus __fastcall TextToOnlineStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/, 
                                               BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/);
  HRESULT         __fastcall TextToBuddyStatus(BSTR Text/*[in]*/, 
                                               Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TBuddyStatus __fastcall TextToBuddyStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/);
  HRESULT         __fastcall TextToCallStatus(BSTR Text/*[in]*/, 
                                              Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall TextToCallStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/);
  HRESULT         __fastcall TextToCallType(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall TextToCallType(BSTR Text/*[in]*/);
  HRESULT         __fastcall UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/);
  HRESULT         __fastcall TextToUserSex(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall TextToUserSex(BSTR Text/*[in]*/);
  HRESULT         __fastcall ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/);
  HRESULT         __fastcall TextToConnectionStatus(BSTR Text/*[in]*/, 
                                                    Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TConnectionStatus __fastcall TextToConnectionStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/);
  HRESULT         __fastcall TextToUserStatus(BSTR Text/*[in]*/, 
                                              Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserStatus __fastcall TextToUserStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/);
  HRESULT         __fastcall AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/);
  HRESULT         __fastcall ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/);
  HRESULT         __fastcall ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/);
  HRESULT         __fastcall VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/, 
                                                 BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/);
  HRESULT         __fastcall VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/);
  HRESULT         __fastcall TextToVoicemailStatus(BSTR Text/*[in]*/, 
                                                   Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailStatus __fastcall TextToVoicemailStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/);
  HRESULT         __fastcall ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/);
  HRESULT         __fastcall TextToChatMessageStatus(BSTR Text/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageStatus __fastcall TextToChatMessageStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/);
  HRESULT         __fastcall TextToChatMessageType(BSTR Text/*[in]*/, 
                                                   Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageType __fastcall TextToChatMessageType(BSTR Text/*[in]*/);
  HRESULT         __fastcall TextToAttachmentStatus(BSTR Text/*[in]*/, 
                                                    Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TAttachmentStatus __fastcall TextToAttachmentStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/);
  HRESULT         __fastcall TextToGroupType(BSTR Text/*[in]*/, 
                                             Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TGroupType __fastcall TextToGroupType(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/);
  HRESULT         __fastcall CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(BSTR pVal/*[in]*/);
  HRESULT         __fastcall SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/);
  HRESULT         __fastcall SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/, 
                                                  BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/);
  HRESULT         __fastcall SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/);

  __property   BSTR            Language = {read = get_Language};
};
typedef TCOMIConversionT<IConversion> TCOMIConversion;

// *********************************************************************//
// DispIntf:  IConversion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D82F88A-B307-4074-8ED5-11C3BD213452}
// *********************************************************************//
template<class T>
class IConversionDispT : public TAutoDriver<IConversion>
{
public:
  IConversionDispT(){}

  IConversionDispT(IConversion *pintf)
  {
    TAutoDriver<IConversion>::Bind(pintf, false);
  }

  IConversionDispT(IConversionPtr pintf)
  {
    TAutoDriver<IConversion>::Bind(pintf, true);
  }

  IConversionDispT& operator=(IConversion *pintf)
  {
    TAutoDriver<IConversion>::Bind(pintf, false);
    return *this;
  }

  IConversionDispT& operator=(IConversionPtr pintf)
  {
    TAutoDriver<IConversion>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Conversion));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Conversion);
  }

  HRESULT         __fastcall OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/, 
                                                BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/);
  HRESULT         __fastcall TextToOnlineStatus(BSTR Text/*[in]*/, 
                                                Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TOnlineStatus __fastcall TextToOnlineStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/, 
                                               BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/);
  HRESULT         __fastcall TextToBuddyStatus(BSTR Text/*[in]*/, 
                                               Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TBuddyStatus __fastcall TextToBuddyStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/);
  HRESULT         __fastcall TextToCallStatus(BSTR Text/*[in]*/, 
                                              Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall TextToCallStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/);
  HRESULT         __fastcall TextToCallType(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall TextToCallType(BSTR Text/*[in]*/);
  HRESULT         __fastcall UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/);
  HRESULT         __fastcall TextToUserSex(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall TextToUserSex(BSTR Text/*[in]*/);
  HRESULT         __fastcall ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/
                                                    , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/);
  HRESULT         __fastcall TextToConnectionStatus(BSTR Text/*[in]*/, 
                                                    Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TConnectionStatus __fastcall TextToConnectionStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/);
  HRESULT         __fastcall TextToUserStatus(BSTR Text/*[in]*/, 
                                              Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserStatus __fastcall TextToUserStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/
                                                     , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/);
  HRESULT         __fastcall AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/
                                                    , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/);
  HRESULT         __fastcall ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/
                                                   , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/);
  HRESULT         __fastcall ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/);
  HRESULT         __fastcall VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/, 
                                                 BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/);
  HRESULT         __fastcall VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/
                                                   , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/);
  HRESULT         __fastcall TextToVoicemailStatus(BSTR Text/*[in]*/, 
                                                   Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailStatus __fastcall TextToVoicemailStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/
                                                          , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/);
  HRESULT         __fastcall ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/
                                                     , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/);
  HRESULT         __fastcall TextToChatMessageStatus(BSTR Text/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageStatus __fastcall TextToChatMessageStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/);
  HRESULT         __fastcall TextToChatMessageType(BSTR Text/*[in]*/, 
                                                   Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageType __fastcall TextToChatMessageType(BSTR Text/*[in]*/);
  HRESULT         __fastcall TextToAttachmentStatus(BSTR Text/*[in]*/, 
                                                    Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TAttachmentStatus __fastcall TextToAttachmentStatus(BSTR Text/*[in]*/);
  HRESULT         __fastcall GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/);
  HRESULT         __fastcall TextToGroupType(BSTR Text/*[in]*/, 
                                             Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TGroupType __fastcall TextToGroupType(BSTR Text/*[in]*/);
  HRESULT         __fastcall CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/
                                                   , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/);
  HRESULT         __fastcall CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/
                                                       , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(BSTR pVal/*[in]*/);
  HRESULT         __fastcall SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/
                                                    , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/);
  HRESULT         __fastcall SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/, 
                                                  BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/);
  HRESULT         __fastcall SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/
                                                   , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/);

  __property   BSTR            Language = {read = get_Language};
};
typedef IConversionDispT<IConversion> IConversionDisp;

// *********************************************************************//
// SmartIntf: TCOMICallCollection
// Interface: ICallCollection
// *********************************************************************//
template <class T /* ICallCollection */ >
class TCOMICallCollectionT : public TComInterface<ICallCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallCollectionT() {}
  TCOMICallCollectionT(ICallCollection *intf, bool addRef = false) : TComInterface<ICallCollection>(intf, addRef) {}
  TCOMICallCollectionT(const TCOMICallCollectionT& src) : TComInterface<ICallCollection>(src) {}
  TCOMICallCollectionT& operator=(const TCOMICallCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ICall* pCall/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMICallCollectionT<ICallCollection> TCOMICallCollection;

// *********************************************************************//
// DispIntf:  ICallCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {72E1EC13-0DF9-48AE-8A31-E2900D85BA55}
// *********************************************************************//
template<class T>
class ICallCollectionDispT : public TAutoDriver<ICallCollection>
{
public:
  ICallCollectionDispT(){}

  ICallCollectionDispT(ICallCollection *pintf)
  {
    TAutoDriver<ICallCollection>::Bind(pintf, false);
  }

  ICallCollectionDispT(ICallCollectionPtr pintf)
  {
    TAutoDriver<ICallCollection>::Bind(pintf, true);
  }

  ICallCollectionDispT& operator=(ICallCollection *pintf)
  {
    TAutoDriver<ICallCollection>::Bind(pintf, false);
    return *this;
  }

  ICallCollectionDispT& operator=(ICallCollectionPtr pintf)
  {
    TAutoDriver<ICallCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CallCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CallCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ICall* pCall/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ICall** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICall* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ICallCollectionDispT<ICallCollection> ICallCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIChatMessageCollection
// Interface: IChatMessageCollection
// *********************************************************************//
template <class T /* IChatMessageCollection */ >
class TCOMIChatMessageCollectionT : public TComInterface<IChatMessageCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChatMessageCollectionT() {}
  TCOMIChatMessageCollectionT(IChatMessageCollection *intf, bool addRef = false) : TComInterface<IChatMessageCollection>(intf, addRef) {}
  TCOMIChatMessageCollectionT(const TCOMIChatMessageCollectionT& src) : TComInterface<IChatMessageCollection>(src) {}
  TCOMIChatMessageCollectionT& operator=(const TCOMIChatMessageCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IChatMessage* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIChatMessageCollectionT<IChatMessageCollection> TCOMIChatMessageCollection;

// *********************************************************************//
// DispIntf:  IChatMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9511117A-7BCA-4669-BE96-6EA6866975C1}
// *********************************************************************//
template<class T>
class IChatMessageCollectionDispT : public TAutoDriver<IChatMessageCollection>
{
public:
  IChatMessageCollectionDispT(){}

  IChatMessageCollectionDispT(IChatMessageCollection *pintf)
  {
    TAutoDriver<IChatMessageCollection>::Bind(pintf, false);
  }

  IChatMessageCollectionDispT(IChatMessageCollectionPtr pintf)
  {
    TAutoDriver<IChatMessageCollection>::Bind(pintf, true);
  }

  IChatMessageCollectionDispT& operator=(IChatMessageCollection *pintf)
  {
    TAutoDriver<IChatMessageCollection>::Bind(pintf, false);
    return *this;
  }

  IChatMessageCollectionDispT& operator=(IChatMessageCollectionPtr pintf)
  {
    TAutoDriver<IChatMessageCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChatMessageCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChatMessageCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IChatMessage* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IChatMessageCollectionDispT<IChatMessageCollection> IChatMessageCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIChatMessage
// Interface: IChatMessage
// *********************************************************************//
template <class T /* IChatMessage */ >
class TCOMIChatMessageT : public TComInterface<IChatMessage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChatMessageT() {}
  TCOMIChatMessageT(IChatMessage *intf, bool addRef = false) : TComInterface<IChatMessage>(intf, addRef) {}
  TCOMIChatMessageT(const TCOMIChatMessageT& src) : TComInterface<IChatMessage>(src) {}
  TCOMIChatMessageT& operator=(const TCOMIChatMessageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_FromHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FromHandle(void);
  HRESULT         __fastcall get_FromDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FromDisplayName(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_LeaveReason(Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatLeaveReason __fastcall get_LeaveReason(void);
  HRESULT         __fastcall get_Body(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Body(void);
  HRESULT         __fastcall get_ChatName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatName(void);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Users(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall set_Seen(TOLEBOOL Param1/*[in]*/);
  HRESULT         __fastcall get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Chat(Skype4comlib_tlb::IChatPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatPtr __fastcall get_Chat(void);
  HRESULT         __fastcall get_Sender(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Sender(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserPtr __fastcall get_Sender(void);
  HRESULT         __fastcall get_EditedBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EditedBy(void);
  HRESULT         __fastcall get_EditedTimestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_EditedTimestamp(void);
  HRESULT         __fastcall set_Body(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_Role(void);
  HRESULT         __fastcall get_Options(long* pVal/*[out,retval]*/);
  long            __fastcall get_Options(void);
  HRESULT         __fastcall get_IsEditable(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsEditable(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsEditable(void);
  HRESULT         __fastcall get_Guid(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);

  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            FromHandle = {read = get_FromHandle};
  __property   BSTR            FromDisplayName = {read = get_FromDisplayName};
  __property   Skype4comlib_tlb::TChatMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TChatLeaveReason LeaveReason = {read = get_LeaveReason};
  __property   BSTR            Body = {read = get_Body};
  __property   BSTR            ChatName = {read = get_ChatName};
  __property   Skype4comlib_tlb::IUserCollectionPtr Users = {read = get_Users};
  __property   TOLEBOOL        Seen = {write = set_Seen};
  __property   Skype4comlib_tlb::IChatPtr Chat = {read = get_Chat};
  __property   Skype4comlib_tlb::IUserPtr Sender = {read = get_Sender};
  __property   BSTR            EditedBy = {read = get_EditedBy};
  __property   DATE            EditedTimestamp = {read = get_EditedTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole Role = {read = get_Role};
  __property   long            Options = {read = get_Options};
  __property   TOLEBOOL        IsEditable = {read = get_IsEditable};
  __property   BSTR            Guid = {read = get_Guid};
};
typedef TCOMIChatMessageT<IChatMessage> TCOMIChatMessage;

// *********************************************************************//
// DispIntf:  IChatMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4CFF5C70-3C95-4566-824A-FA164586D535}
// *********************************************************************//
template<class T>
class IChatMessageDispT : public TAutoDriver<IChatMessage>
{
public:
  IChatMessageDispT(){}

  IChatMessageDispT(IChatMessage *pintf)
  {
    TAutoDriver<IChatMessage>::Bind(pintf, false);
  }

  IChatMessageDispT(IChatMessagePtr pintf)
  {
    TAutoDriver<IChatMessage>::Bind(pintf, true);
  }

  IChatMessageDispT& operator=(IChatMessage *pintf)
  {
    TAutoDriver<IChatMessage>::Bind(pintf, false);
    return *this;
  }

  IChatMessageDispT& operator=(IChatMessagePtr pintf)
  {
    TAutoDriver<IChatMessage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChatMessage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChatMessage);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_FromHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FromHandle(void);
  HRESULT         __fastcall get_FromDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FromDisplayName(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_LeaveReason(Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatLeaveReason __fastcall get_LeaveReason(void);
  HRESULT         __fastcall get_Body(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Body(void);
  HRESULT         __fastcall get_ChatName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatName(void);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Users(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Chat(void);
  HRESULT         __fastcall get_Sender(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_Sender(void);
  HRESULT         __fastcall get_EditedBy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EditedBy(void);
  HRESULT         __fastcall get_EditedTimestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_EditedTimestamp(void);
  HRESULT         __fastcall set_Body(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_Role(void);
  HRESULT         __fastcall get_Options(long* pVal/*[out,retval]*/);
  long            __fastcall get_Options(void);
  HRESULT         __fastcall get_IsEditable(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsEditable(void);
  HRESULT         __fastcall get_Guid(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);

  __property   long            Id = {read = get_Id};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            FromHandle = {read = get_FromHandle};
  __property   BSTR            FromDisplayName = {read = get_FromDisplayName};
  __property   Skype4comlib_tlb::TChatMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TChatLeaveReason LeaveReason = {read = get_LeaveReason};
  __property   BSTR            Body = {read = get_Body};
  __property   BSTR            ChatName = {read = get_ChatName};
  __property   Skype4comlib_tlb::IUserCollection* Users = {read = get_Users};
  __property   VARIANT_BOOL    Seen = {write = set_Seen};
  __property   Skype4comlib_tlb::IChat* Chat = {read = get_Chat};
  __property   Skype4comlib_tlb::IUser* Sender = {read = get_Sender};
  __property   BSTR            EditedBy = {read = get_EditedBy};
  __property   DATE            EditedTimestamp = {read = get_EditedTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole Role = {read = get_Role};
  __property   long            Options = {read = get_Options};
  __property   VARIANT_BOOL    IsEditable = {read = get_IsEditable};
  __property   BSTR            Guid = {read = get_Guid};
};
typedef IChatMessageDispT<IChatMessage> IChatMessageDisp;

// *********************************************************************//
// SmartIntf: TCOMIChat
// Interface: IChat
// *********************************************************************//
template <class T /* IChat */ >
class TCOMIChatT : public TComInterface<IChat>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChatT() {}
  TCOMIChatT(IChat *intf, bool addRef = false) : TComInterface<IChat>(intf, addRef) {}
  TCOMIChatT(const TCOMIChatT& src) : TComInterface<IChat>(src) {}
  TCOMIChatT& operator=(const TCOMIChatT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Messages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Messages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall get_Messages(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_Adder(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Adder(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserPtr __fastcall get_Adder(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_Posters(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Posters(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Posters(void);
  HRESULT         __fastcall get_Members(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Members(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Members(void);
  HRESULT         __fastcall get_Topic(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Topic(void);
  HRESULT         __fastcall set_Topic(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ActiveMembers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveMembers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_ActiveMembers(void);
  HRESULT         __fastcall get_FriendlyName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FriendlyName(void);
  HRESULT         __fastcall OpenWindow(void);
  HRESULT         __fastcall SendMessage(BSTR MessageText/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR MessageText/*[in]*/);
  HRESULT         __fastcall Leave(void);
  HRESULT         __fastcall AddMembers(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall get_RecentMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_RecentMessages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall get_RecentMessages(void);
  HRESULT         __fastcall get_Bookmarked(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Bookmarked(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Bookmarked(void);
  HRESULT         __fastcall Bookmark(void);
  HRESULT         __fastcall Unbookmark(void);
  HRESULT         __fastcall get_TopicXML(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TopicXML(void);
  HRESULT         __fastcall set_TopicXML(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MemberObjects(Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MemberObjects(Skype4comlib_tlb::IChatMemberCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMemberCollectionPtr __fastcall get_MemberObjects(void);
  HRESULT         __fastcall get_Blob(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Blob(void);
  HRESULT         __fastcall get_Options(long* pVal/*[out,retval]*/);
  long            __fastcall get_Options(void);
  HRESULT         __fastcall set_Options(long pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordHint(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PasswordHint(void);
  HRESULT         __fastcall SetPassword(BSTR Password/*[in]*/, BSTR Hint/*[in,def,opt]*/);
  HRESULT         __fastcall get_GuideLines(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_GuideLines(void);
  HRESULT         __fastcall set_GuideLines(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DialogPartner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DialogPartner(void);
  HRESULT         __fastcall get_ActivityTimestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ActivityTimestamp(void);
  HRESULT         __fastcall get_MyRole(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_MyRole(void);
  HRESULT         __fastcall get_Applicants(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Applicants(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Applicants(void);
  HRESULT         __fastcall Join(void);
  HRESULT         __fastcall Kick(BSTR Handle/*[in]*/);
  HRESULT         __fastcall KickBan(BSTR Handle/*[in]*/);
  HRESULT         __fastcall Disband(void);
  HRESULT         __fastcall EnterPassword(BSTR Password/*[in]*/);
  HRESULT         __fastcall ClearRecentMessages(void);
  HRESULT         __fastcall AcceptAdd(void);
  HRESULT         __fastcall set_AlertString(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatType __fastcall get_Type(void);
  HRESULT         __fastcall get_MyStatus(Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMyStatus __fastcall get_MyStatus(void);

  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IChatMessageCollectionPtr Messages = {read = get_Messages};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   Skype4comlib_tlb::IUserPtr Adder = {read = get_Adder};
  __property   Skype4comlib_tlb::TChatStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::IUserCollectionPtr Posters = {read = get_Posters};
  __property   Skype4comlib_tlb::IUserCollectionPtr Members = {read = get_Members};
  __property   BSTR            Topic = {read = get_Topic};
  __property   Skype4comlib_tlb::IUserCollectionPtr ActiveMembers = {read = get_ActiveMembers};
  __property   BSTR            FriendlyName = {read = get_FriendlyName};
  __property   Skype4comlib_tlb::IChatMessageCollectionPtr RecentMessages = {read = get_RecentMessages};
  __property   TOLEBOOL        Bookmarked = {read = get_Bookmarked};
  __property   BSTR            TopicXML = {read = get_TopicXML};
  __property   Skype4comlib_tlb::IChatMemberCollectionPtr MemberObjects = {read = get_MemberObjects};
  __property   BSTR            Blob = {read = get_Blob};
  __property   long            Options = {read = get_Options, write = set_Options};
  __property   BSTR            PasswordHint = {read = get_PasswordHint};
  __property   BSTR            GuideLines = {read = get_GuideLines};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            DialogPartner = {read = get_DialogPartner};
  __property   DATE            ActivityTimestamp = {read = get_ActivityTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole MyRole = {read = get_MyRole};
  __property   Skype4comlib_tlb::IUserCollectionPtr Applicants = {read = get_Applicants};
  __property   BSTR            AlertString = {write = set_AlertString};
  __property   Skype4comlib_tlb::TChatType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMyStatus MyStatus = {read = get_MyStatus};
};
typedef TCOMIChatT<IChat> TCOMIChat;

// *********************************************************************//
// DispIntf:  IChat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C24106C-3368-4580-93E5-5ED4ACCDE306}
// *********************************************************************//
template<class T>
class IChatDispT : public TAutoDriver<IChat>
{
public:
  IChatDispT(){}

  IChatDispT(IChat *pintf)
  {
    TAutoDriver<IChat>::Bind(pintf, false);
  }

  IChatDispT(IChatPtr pintf)
  {
    TAutoDriver<IChat>::Bind(pintf, true);
  }

  IChatDispT& operator=(IChat *pintf)
  {
    TAutoDriver<IChat>::Bind(pintf, false);
    return *this;
  }

  IChatDispT& operator=(IChatPtr pintf)
  {
    TAutoDriver<IChat>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Chat));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Chat);
  }

  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Messages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_Messages(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_Adder(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_Adder(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_Posters(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Posters(void);
  HRESULT         __fastcall get_Members(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Members(void);
  HRESULT         __fastcall get_Topic(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Topic(void);
  HRESULT         __fastcall set_Topic(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ActiveMembers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ActiveMembers(void);
  HRESULT         __fastcall get_FriendlyName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FriendlyName(void);
  HRESULT         __fastcall OpenWindow();
  HRESULT         __fastcall SendMessage(BSTR MessageText/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall SendMessage(BSTR MessageText/*[in]*/);
  HRESULT         __fastcall Leave();
  HRESULT         __fastcall AddMembers(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall get_RecentMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_RecentMessages(void);
  HRESULT         __fastcall get_Bookmarked(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bookmarked(void);
  HRESULT         __fastcall Bookmark();
  HRESULT         __fastcall Unbookmark();
  HRESULT         __fastcall get_TopicXML(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TopicXML(void);
  HRESULT         __fastcall set_TopicXML(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MemberObjects(Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMemberCollection* __fastcall get_MemberObjects(void);
  HRESULT         __fastcall get_Blob(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Blob(void);
  HRESULT         __fastcall get_Options(long* pVal/*[out,retval]*/);
  long            __fastcall get_Options(void);
  HRESULT         __fastcall set_Options(long pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordHint(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PasswordHint(void);
  HRESULT         __fastcall SetPassword(BSTR Password/*[in]*/, BSTR Hint/*[in,def,opt]*/);
  HRESULT         __fastcall get_GuideLines(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_GuideLines(void);
  HRESULT         __fastcall set_GuideLines(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DialogPartner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DialogPartner(void);
  HRESULT         __fastcall get_ActivityTimestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ActivityTimestamp(void);
  HRESULT         __fastcall get_MyRole(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_MyRole(void);
  HRESULT         __fastcall get_Applicants(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Applicants(void);
  HRESULT         __fastcall Join();
  HRESULT         __fastcall Kick(BSTR Handle/*[in]*/);
  HRESULT         __fastcall KickBan(BSTR Handle/*[in]*/);
  HRESULT         __fastcall Disband();
  HRESULT         __fastcall EnterPassword(BSTR Password/*[in]*/);
  HRESULT         __fastcall ClearRecentMessages();
  HRESULT         __fastcall AcceptAdd();
  HRESULT         __fastcall set_AlertString(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatType __fastcall get_Type(void);
  HRESULT         __fastcall get_MyStatus(Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMyStatus __fastcall get_MyStatus(void);

  __property   BSTR            Name = {read = get_Name};
  __property   Skype4comlib_tlb::IChatMessageCollection* Messages = {read = get_Messages};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   Skype4comlib_tlb::IUser* Adder = {read = get_Adder};
  __property   Skype4comlib_tlb::TChatStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::IUserCollection* Posters = {read = get_Posters};
  __property   Skype4comlib_tlb::IUserCollection* Members = {read = get_Members};
  __property   BSTR            Topic = {read = get_Topic};
  __property   Skype4comlib_tlb::IUserCollection* ActiveMembers = {read = get_ActiveMembers};
  __property   BSTR            FriendlyName = {read = get_FriendlyName};
  __property   Skype4comlib_tlb::IChatMessageCollection* RecentMessages = {read = get_RecentMessages};
  __property   VARIANT_BOOL    Bookmarked = {read = get_Bookmarked};
  __property   BSTR            TopicXML = {read = get_TopicXML};
  __property   Skype4comlib_tlb::IChatMemberCollection* MemberObjects = {read = get_MemberObjects};
  __property   BSTR            Blob = {read = get_Blob};
  __property   long            Options = {read = get_Options, write = set_Options};
  __property   BSTR            PasswordHint = {read = get_PasswordHint};
  __property   BSTR            GuideLines = {read = get_GuideLines};
  __property   BSTR            Description = {read = get_Description};
  __property   BSTR            DialogPartner = {read = get_DialogPartner};
  __property   DATE            ActivityTimestamp = {read = get_ActivityTimestamp};
  __property   Skype4comlib_tlb::TChatMemberRole MyRole = {read = get_MyRole};
  __property   Skype4comlib_tlb::IUserCollection* Applicants = {read = get_Applicants};
  __property   BSTR            AlertString = {write = set_AlertString};
  __property   Skype4comlib_tlb::TChatType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TChatMyStatus MyStatus = {read = get_MyStatus};
};
typedef IChatDispT<IChat> IChatDisp;

typedef TComInterface<IChatMemberCollection>  TCOMIChatMemberCollection;

// *********************************************************************//
// DispIntf:  IChatMemberCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FFC686B-2E5E-4763-8B03-FF4FD3A0C4DA}
// *********************************************************************//
template<class T>
class IChatMemberCollectionDispT : public TAutoDriver<IChatMemberCollection>
{
public:
  IChatMemberCollectionDispT(){}

  IChatMemberCollectionDispT(IChatMemberCollection *pintf)
  {
    TAutoDriver<IChatMemberCollection>::Bind(pintf, false);
  }

  IChatMemberCollectionDispT(IChatMemberCollectionPtr pintf)
  {
    TAutoDriver<IChatMemberCollection>::Bind(pintf, true);
  }

  IChatMemberCollectionDispT& operator=(IChatMemberCollection *pintf)
  {
    TAutoDriver<IChatMemberCollection>::Bind(pintf, false);
    return *this;
  }

  IChatMemberCollectionDispT& operator=(IChatMemberCollectionPtr pintf)
  {
    TAutoDriver<IChatMemberCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IChatMember** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMember* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IChatMemberCollectionDispT<IChatMemberCollection> IChatMemberCollectionDisp;

typedef TComInterface<IChatMember>  TCOMIChatMember;

// *********************************************************************//
// DispIntf:  IChatMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9E9F0473-94C2-4FDD-85D2-43E3478765F9}
// *********************************************************************//
template<class T>
class IChatMemberDispT : public TAutoDriver<IChatMember>
{
public:
  IChatMemberDispT(){}

  IChatMemberDispT(IChatMember *pintf)
  {
    TAutoDriver<IChatMember>::Bind(pintf, false);
  }

  IChatMemberDispT(IChatMemberPtr pintf)
  {
    TAutoDriver<IChatMember>::Bind(pintf, true);
  }

  IChatMemberDispT& operator=(IChatMember *pintf)
  {
    TAutoDriver<IChatMember>::Bind(pintf, false);
    return *this;
  }

  IChatMemberDispT& operator=(IChatMemberPtr pintf)
  {
    TAutoDriver<IChatMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall get_Handle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Handle(void);
  HRESULT         __fastcall get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_Role(void);
  HRESULT         __fastcall set_Role(Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/);
  HRESULT         __fastcall get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/);
  HRESULT         __fastcall get_IsActive(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsActive(void);
  HRESULT         __fastcall get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Chat(void);

  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            Handle = {read = get_Handle};
  __property   Skype4comlib_tlb::TChatMemberRole Role = {read = get_Role, write = set_Role};
  __property   VARIANT_BOOL    IsActive = {read = get_IsActive};
  __property   Skype4comlib_tlb::IChat* Chat = {read = get_Chat};
};
typedef IChatMemberDispT<IChatMember> IChatMemberDisp;

// *********************************************************************//
// SmartIntf: TCOMICommand
// Interface: ICommand
// *********************************************************************//
template <class T /* ICommand */ >
class TCOMICommandT : public TComInterface<ICommand>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICommandT() {}
  TCOMICommandT(ICommand *intf, bool addRef = false) : TComInterface<ICommand>(intf, addRef) {}
  TCOMICommandT(const TCOMICommandT& src) : TComInterface<ICommand>(src) {}
  TCOMICommandT& operator=(const TCOMICommandT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall set_Id(long pVal/*[in]*/);
  HRESULT         __fastcall get_Timeout(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timeout(void);
  HRESULT         __fastcall set_Timeout(long pVal/*[in]*/);
  HRESULT         __fastcall get_Blocking(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Blocking(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Blocking(void);
  HRESULT         __fastcall set_Blocking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_Blocking(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Command(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Command(void);
  HRESULT         __fastcall set_Command(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Reply(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Reply(void);
  HRESULT         __fastcall set_Reply(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Expected(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Expected(void);
  HRESULT         __fastcall set_Expected(BSTR pVal/*[in]*/);

  __property   long            Id = {read = get_Id, write = set_Id};
  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   TOLEBOOL        Blocking = {read = get_Blocking, write = set_Blocking};
  __property   BSTR            Command = {read = get_Command};
  __property   BSTR            Reply = {read = get_Reply};
  __property   BSTR            Expected = {read = get_Expected};
};
typedef TCOMICommandT<ICommand> TCOMICommand;

// *********************************************************************//
// DispIntf:  ICommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48E046A8-31D7-4E5F-A611-47BF32B86405}
// *********************************************************************//
template<class T>
class ICommandDispT : public TAutoDriver<ICommand>
{
public:
  ICommandDispT(){}

  ICommandDispT(ICommand *pintf)
  {
    TAutoDriver<ICommand>::Bind(pintf, false);
  }

  ICommandDispT(ICommandPtr pintf)
  {
    TAutoDriver<ICommand>::Bind(pintf, true);
  }

  ICommandDispT& operator=(ICommand *pintf)
  {
    TAutoDriver<ICommand>::Bind(pintf, false);
    return *this;
  }

  ICommandDispT& operator=(ICommandPtr pintf)
  {
    TAutoDriver<ICommand>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Command));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Command);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall set_Id(long pVal/*[in]*/);
  HRESULT         __fastcall get_Timeout(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timeout(void);
  HRESULT         __fastcall set_Timeout(long pVal/*[in]*/);
  HRESULT         __fastcall get_Blocking(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Blocking(void);
  HRESULT         __fastcall set_Blocking(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Command(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Command(void);
  HRESULT         __fastcall set_Command(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Reply(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Reply(void);
  HRESULT         __fastcall set_Reply(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Expected(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Expected(void);
  HRESULT         __fastcall set_Expected(BSTR pVal/*[in]*/);

  __property   long            Id = {read = get_Id, write = set_Id};
  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   VARIANT_BOOL    Blocking = {read = get_Blocking, write = set_Blocking};
  __property   BSTR            Command = {read = get_Command};
  __property   BSTR            Reply = {read = get_Reply};
  __property   BSTR            Expected = {read = get_Expected};
};
typedef ICommandDispT<ICommand> ICommandDisp;

// *********************************************************************//
// SmartIntf: TCOMIChatCollection
// Interface: IChatCollection
// *********************************************************************//
template <class T /* IChatCollection */ >
class TCOMIChatCollectionT : public TComInterface<IChatCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChatCollectionT() {}
  TCOMIChatCollectionT(IChatCollection *intf, bool addRef = false) : TComInterface<IChatCollection>(intf, addRef) {}
  TCOMIChatCollectionT(const TCOMIChatCollectionT& src) : TComInterface<IChatCollection>(src) {}
  TCOMIChatCollectionT& operator=(const TCOMIChatCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IChat* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIChatCollectionT<IChatCollection> TCOMIChatCollection;

// *********************************************************************//
// DispIntf:  IChatCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {052A4165-010A-457D-A874-E661B6322846}
// *********************************************************************//
template<class T>
class IChatCollectionDispT : public TAutoDriver<IChatCollection>
{
public:
  IChatCollectionDispT(){}

  IChatCollectionDispT(IChatCollection *pintf)
  {
    TAutoDriver<IChatCollection>::Bind(pintf, false);
  }

  IChatCollectionDispT(IChatCollectionPtr pintf)
  {
    TAutoDriver<IChatCollection>::Bind(pintf, true);
  }

  IChatCollectionDispT& operator=(IChatCollection *pintf)
  {
    TAutoDriver<IChatCollection>::Bind(pintf, false);
    return *this;
  }

  IChatCollectionDispT& operator=(IChatCollectionPtr pintf)
  {
    TAutoDriver<IChatCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChatCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChatCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IChat* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IChatCollectionDispT<IChatCollection> IChatCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIConference
// Interface: IConference
// *********************************************************************//
template <class T /* IConference */ >
class TCOMIConferenceT : public TComInterface<IConference>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIConferenceT() {}
  TCOMIConferenceT(IConference *intf, bool addRef = false) : TComInterface<IConference>(intf, addRef) {}
  TCOMIConferenceT(const TCOMIConferenceT& src) : TComInterface<IConference>(src) {}
  TCOMIConferenceT& operator=(const TCOMIConferenceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Calls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Calls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollectionPtr __fastcall get_Calls(void);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollectionPtr __fastcall get_ActiveCalls(void);
  HRESULT         __fastcall Hold(void);
  HRESULT         __fastcall Resume(void);
  HRESULT         __fastcall Finish(void);

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::ICallCollectionPtr Calls = {read = get_Calls};
  __property   Skype4comlib_tlb::ICallCollectionPtr ActiveCalls = {read = get_ActiveCalls};
};
typedef TCOMIConferenceT<IConference> TCOMIConference;

// *********************************************************************//
// DispIntf:  IConference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AEB48497-5090-479C-8BE0-BD51597156A1}
// *********************************************************************//
template<class T>
class IConferenceDispT : public TAutoDriver<IConference>
{
public:
  IConferenceDispT(){}

  IConferenceDispT(IConference *pintf)
  {
    TAutoDriver<IConference>::Bind(pintf, false);
  }

  IConferenceDispT(IConferencePtr pintf)
  {
    TAutoDriver<IConference>::Bind(pintf, true);
  }

  IConferenceDispT& operator=(IConference *pintf)
  {
    TAutoDriver<IConference>::Bind(pintf, false);
    return *this;
  }

  IConferenceDispT& operator=(IConferencePtr pintf)
  {
    TAutoDriver<IConference>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Conference));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Conference);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Calls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_Calls(void);
  HRESULT         __fastcall get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_ActiveCalls(void);
  HRESULT         __fastcall Hold();
  HRESULT         __fastcall Resume();
  HRESULT         __fastcall Finish();

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::ICallCollection* Calls = {read = get_Calls};
  __property   Skype4comlib_tlb::ICallCollection* ActiveCalls = {read = get_ActiveCalls};
};
typedef IConferenceDispT<IConference> IConferenceDisp;

// *********************************************************************//
// SmartIntf: TCOMIConferenceCollection
// Interface: IConferenceCollection
// *********************************************************************//
template <class T /* IConferenceCollection */ >
class TCOMIConferenceCollectionT : public TComInterface<IConferenceCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIConferenceCollectionT() {}
  TCOMIConferenceCollectionT(IConferenceCollection *intf, bool addRef = false) : TComInterface<IConferenceCollection>(intf, addRef) {}
  TCOMIConferenceCollectionT(const TCOMIConferenceCollectionT& src) : TComInterface<IConferenceCollection>(src) {}
  TCOMIConferenceCollectionT& operator=(const TCOMIConferenceCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IConference* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IConference** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConference* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIConferenceCollectionT<IConferenceCollection> TCOMIConferenceCollection;

// *********************************************************************//
// DispIntf:  IConferenceCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3E0C529-7D4F-4AF5-B501-27D25D4D2825}
// *********************************************************************//
template<class T>
class IConferenceCollectionDispT : public TAutoDriver<IConferenceCollection>
{
public:
  IConferenceCollectionDispT(){}

  IConferenceCollectionDispT(IConferenceCollection *pintf)
  {
    TAutoDriver<IConferenceCollection>::Bind(pintf, false);
  }

  IConferenceCollectionDispT(IConferenceCollectionPtr pintf)
  {
    TAutoDriver<IConferenceCollection>::Bind(pintf, true);
  }

  IConferenceCollectionDispT& operator=(IConferenceCollection *pintf)
  {
    TAutoDriver<IConferenceCollection>::Bind(pintf, false);
    return *this;
  }

  IConferenceCollectionDispT& operator=(IConferenceCollectionPtr pintf)
  {
    TAutoDriver<IConferenceCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ConferenceCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ConferenceCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IConference* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IConference** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IConference* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IConferenceCollectionDispT<IConferenceCollection> IConferenceCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIVoicemailCollection
// Interface: IVoicemailCollection
// *********************************************************************//
template <class T /* IVoicemailCollection */ >
class TCOMIVoicemailCollectionT : public TComInterface<IVoicemailCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVoicemailCollectionT() {}
  TCOMIVoicemailCollectionT(IVoicemailCollection *intf, bool addRef = false) : TComInterface<IVoicemailCollection>(intf, addRef) {}
  TCOMIVoicemailCollectionT(const TCOMIVoicemailCollectionT& src) : TComInterface<IVoicemailCollection>(src) {}
  TCOMIVoicemailCollectionT& operator=(const TCOMIVoicemailCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IVoicemail* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIVoicemailCollectionT<IVoicemailCollection> TCOMIVoicemailCollection;

// *********************************************************************//
// DispIntf:  IVoicemailCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21494848-BBD5-4192-BE32-57D1A19D8E94}
// *********************************************************************//
template<class T>
class IVoicemailCollectionDispT : public TAutoDriver<IVoicemailCollection>
{
public:
  IVoicemailCollectionDispT(){}

  IVoicemailCollectionDispT(IVoicemailCollection *pintf)
  {
    TAutoDriver<IVoicemailCollection>::Bind(pintf, false);
  }

  IVoicemailCollectionDispT(IVoicemailCollectionPtr pintf)
  {
    TAutoDriver<IVoicemailCollection>::Bind(pintf, true);
  }

  IVoicemailCollectionDispT& operator=(IVoicemailCollection *pintf)
  {
    TAutoDriver<IVoicemailCollection>::Bind(pintf, false);
    return *this;
  }

  IVoicemailCollectionDispT& operator=(IVoicemailCollectionPtr pintf)
  {
    TAutoDriver<IVoicemailCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VoicemailCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VoicemailCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IVoicemail* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IVoicemail* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IVoicemailCollectionDispT<IVoicemailCollection> IVoicemailCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIVoicemail
// Interface: IVoicemail
// *********************************************************************//
template <class T /* IVoicemail */ >
class TCOMIVoicemailT : public TComInterface<IVoicemail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVoicemailT() {}
  TCOMIVoicemailT(IVoicemail *intf, bool addRef = false) : TComInterface<IVoicemail>(intf, addRef) {}
  TCOMIVoicemailT(const TCOMIVoicemailT& src) : TComInterface<IVoicemail>(src) {}
  TCOMIVoicemailT& operator=(const TCOMIVoicemailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailType __fastcall get_Type(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);
  HRESULT         __fastcall get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerDisplayName(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_AllowedDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_AllowedDuration(void);
  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall Open(void);
  HRESULT         __fastcall StartPlayback(void);
  HRESULT         __fastcall StopPlayback(void);
  HRESULT         __fastcall Upload(void);
  HRESULT         __fastcall Download(void);
  HRESULT         __fastcall StartRecording(void);
  HRESULT         __fastcall StopRecording(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall StartPlaybackInCall(void);
  HRESULT         __fastcall SetUnplayed(void);

  __property   Skype4comlib_tlb::TVoicemailType Type = {read = get_Type};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   Skype4comlib_tlb::TVoicemailStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TVoicemailFailureReason FailureReason = {read = get_FailureReason};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   long            Duration = {read = get_Duration};
  __property   long            AllowedDuration = {read = get_AllowedDuration};
  __property   long            Id = {read = get_Id};
};
typedef TCOMIVoicemailT<IVoicemail> TCOMIVoicemail;

// *********************************************************************//
// DispIntf:  IVoicemail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {120B425E-6313-4924-B5A9-3E9F2E444A00}
// *********************************************************************//
template<class T>
class IVoicemailDispT : public TAutoDriver<IVoicemail>
{
public:
  IVoicemailDispT(){}

  IVoicemailDispT(IVoicemail *pintf)
  {
    TAutoDriver<IVoicemail>::Bind(pintf, false);
  }

  IVoicemailDispT(IVoicemailPtr pintf)
  {
    TAutoDriver<IVoicemail>::Bind(pintf, true);
  }

  IVoicemailDispT& operator=(IVoicemail *pintf)
  {
    TAutoDriver<IVoicemail>::Bind(pintf, false);
    return *this;
  }

  IVoicemailDispT& operator=(IVoicemailPtr pintf)
  {
    TAutoDriver<IVoicemail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Voicemail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Voicemail);
  }

  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailType __fastcall get_Type(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);
  HRESULT         __fastcall get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerDisplayName(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_AllowedDuration(long* pVal/*[out,retval]*/);
  long            __fastcall get_AllowedDuration(void);
  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall Open();
  HRESULT         __fastcall StartPlayback();
  HRESULT         __fastcall StopPlayback();
  HRESULT         __fastcall Upload();
  HRESULT         __fastcall Download();
  HRESULT         __fastcall StartRecording();
  HRESULT         __fastcall StopRecording();
  HRESULT         __fastcall Delete();
  HRESULT         __fastcall StartPlaybackInCall();
  HRESULT         __fastcall SetUnplayed();

  __property   Skype4comlib_tlb::TVoicemailType Type = {read = get_Type};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   Skype4comlib_tlb::TVoicemailStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TVoicemailFailureReason FailureReason = {read = get_FailureReason};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   long            Duration = {read = get_Duration};
  __property   long            AllowedDuration = {read = get_AllowedDuration};
  __property   long            Id = {read = get_Id};
};
typedef IVoicemailDispT<IVoicemail> IVoicemailDisp;

// *********************************************************************//
// SmartIntf: TCOMIProfile
// Interface: IProfile
// *********************************************************************//
template <class T /* IProfile */ >
class TCOMIProfileT : public TComInterface<IProfile>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIProfileT() {}
  TCOMIProfileT(IProfile *intf, bool addRef = false) : TComInterface<IProfile>(intf, addRef) {}
  TCOMIProfileT(const TCOMIProfileT& src) : TComInterface<IProfile>(src) {}
  TCOMIProfileT& operator=(const TCOMIProfileT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall set_FullName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Birthday(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Birthday(void);
  HRESULT         __fastcall set_Birthday(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void);
  HRESULT         __fastcall set_Sex(Skype4comlib_tlb::TUserSex pVal/*[in]*/);
  HRESULT         __fastcall get_Languages(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Languages(void);
  HRESULT         __fastcall set_Languages(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall set_Country(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall set_Province(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall set_City(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneHome(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneHome(void);
  HRESULT         __fastcall set_PhoneHome(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneOffice(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneOffice(void);
  HRESULT         __fastcall set_PhoneOffice(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneMobile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneMobile(void);
  HRESULT         __fastcall set_PhoneMobile(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Homepage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Homepage(void);
  HRESULT         __fastcall set_Homepage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_About(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT         __fastcall set_About(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MoodText(void);
  HRESULT         __fastcall set_MoodText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Timezone(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timezone(void);
  HRESULT         __fastcall set_Timezone(long pVal/*[in]*/);
  HRESULT         __fastcall get_CallNoAnswerTimeout(short* pVal/*[out,retval]*/);
  short           __fastcall get_CallNoAnswerTimeout(void);
  HRESULT         __fastcall set_CallNoAnswerTimeout(short pVal/*[in]*/);
  HRESULT         __fastcall get_CallApplyCF(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CallApplyCF(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CallApplyCF(void);
  HRESULT         __fastcall set_CallApplyCF(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_CallApplyCF(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CallSendToVM(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_CallSendToVM(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CallSendToVM(void);
  HRESULT         __fastcall set_CallSendToVM(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_CallSendToVM(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CallForwardRules(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallForwardRules(void);
  HRESULT         __fastcall set_CallForwardRules(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Balance(long* pVal/*[out,retval]*/);
  long            __fastcall get_Balance(void);
  HRESULT         __fastcall get_BalanceCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BalanceCurrency(void);
  HRESULT         __fastcall get_BalanceToText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BalanceToText(void);
  HRESULT         __fastcall get_IPCountry(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IPCountry(void);
  HRESULT         __fastcall get_ValidatedSmsNumbers(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ValidatedSmsNumbers(void);
  HRESULT         __fastcall get_RichMoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RichMoodText(void);
  HRESULT         __fastcall set_RichMoodText(BSTR pVal/*[in]*/);

  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex, write = set_Sex};
  __property   BSTR            Languages = {read = get_Languages};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   long            Timezone = {read = get_Timezone, write = set_Timezone};
  __property   short           CallNoAnswerTimeout = {read = get_CallNoAnswerTimeout, write = set_CallNoAnswerTimeout};
  __property   TOLEBOOL        CallApplyCF = {read = get_CallApplyCF, write = set_CallApplyCF};
  __property   TOLEBOOL        CallSendToVM = {read = get_CallSendToVM, write = set_CallSendToVM};
  __property   BSTR            CallForwardRules = {read = get_CallForwardRules};
  __property   long            Balance = {read = get_Balance};
  __property   BSTR            BalanceCurrency = {read = get_BalanceCurrency};
  __property   BSTR            BalanceToText = {read = get_BalanceToText};
  __property   BSTR            IPCountry = {read = get_IPCountry};
  __property   BSTR            ValidatedSmsNumbers = {read = get_ValidatedSmsNumbers};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};
};
typedef TCOMIProfileT<IProfile> TCOMIProfile;

// *********************************************************************//
// DispIntf:  IProfile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9A3D72F-04C1-4878-993C-D89F83E20569}
// *********************************************************************//
template<class T>
class IProfileDispT : public TAutoDriver<IProfile>
{
public:
  IProfileDispT(){}

  IProfileDispT(IProfile *pintf)
  {
    TAutoDriver<IProfile>::Bind(pintf, false);
  }

  IProfileDispT(IProfilePtr pintf)
  {
    TAutoDriver<IProfile>::Bind(pintf, true);
  }

  IProfileDispT& operator=(IProfile *pintf)
  {
    TAutoDriver<IProfile>::Bind(pintf, false);
    return *this;
  }

  IProfileDispT& operator=(IProfilePtr pintf)
  {
    TAutoDriver<IProfile>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Profile));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Profile);
  }

  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall set_FullName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Birthday(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Birthday(void);
  HRESULT         __fastcall set_Birthday(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall get_Sex(void);
  HRESULT         __fastcall set_Sex(Skype4comlib_tlb::TUserSex pVal/*[in]*/);
  HRESULT         __fastcall get_Languages(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Languages(void);
  HRESULT         __fastcall set_Languages(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall set_Country(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall set_Province(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall set_City(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneHome(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneHome(void);
  HRESULT         __fastcall set_PhoneHome(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneOffice(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneOffice(void);
  HRESULT         __fastcall set_PhoneOffice(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PhoneMobile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PhoneMobile(void);
  HRESULT         __fastcall set_PhoneMobile(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Homepage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Homepage(void);
  HRESULT         __fastcall set_Homepage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_About(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT         __fastcall set_About(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MoodText(void);
  HRESULT         __fastcall set_MoodText(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Timezone(long* pVal/*[out,retval]*/);
  long            __fastcall get_Timezone(void);
  HRESULT         __fastcall set_Timezone(long pVal/*[in]*/);
  HRESULT         __fastcall get_CallNoAnswerTimeout(short* pVal/*[out,retval]*/);
  short           __fastcall get_CallNoAnswerTimeout(void);
  HRESULT         __fastcall set_CallNoAnswerTimeout(short pVal/*[in]*/);
  HRESULT         __fastcall get_CallApplyCF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallApplyCF(void);
  HRESULT         __fastcall set_CallApplyCF(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CallSendToVM(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallSendToVM(void);
  HRESULT         __fastcall set_CallSendToVM(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_CallForwardRules(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallForwardRules(void);
  HRESULT         __fastcall set_CallForwardRules(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Balance(long* pVal/*[out,retval]*/);
  long            __fastcall get_Balance(void);
  HRESULT         __fastcall get_BalanceCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BalanceCurrency(void);
  HRESULT         __fastcall get_BalanceToText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BalanceToText(void);
  HRESULT         __fastcall get_IPCountry(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IPCountry(void);
  HRESULT         __fastcall get_ValidatedSmsNumbers(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ValidatedSmsNumbers(void);
  HRESULT         __fastcall get_RichMoodText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RichMoodText(void);
  HRESULT         __fastcall set_RichMoodText(BSTR pVal/*[in]*/);

  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Birthday = {read = get_Birthday};
  __property   Skype4comlib_tlb::TUserSex Sex = {read = get_Sex, write = set_Sex};
  __property   BSTR            Languages = {read = get_Languages};
  __property   BSTR            Country = {read = get_Country};
  __property   BSTR            Province = {read = get_Province};
  __property   BSTR            City = {read = get_City};
  __property   BSTR            PhoneHome = {read = get_PhoneHome};
  __property   BSTR            PhoneOffice = {read = get_PhoneOffice};
  __property   BSTR            PhoneMobile = {read = get_PhoneMobile};
  __property   BSTR            Homepage = {read = get_Homepage};
  __property   BSTR            About = {read = get_About};
  __property   BSTR            MoodText = {read = get_MoodText};
  __property   long            Timezone = {read = get_Timezone, write = set_Timezone};
  __property   short           CallNoAnswerTimeout = {read = get_CallNoAnswerTimeout, write = set_CallNoAnswerTimeout};
  __property   VARIANT_BOOL    CallApplyCF = {read = get_CallApplyCF, write = set_CallApplyCF};
  __property   VARIANT_BOOL    CallSendToVM = {read = get_CallSendToVM, write = set_CallSendToVM};
  __property   BSTR            CallForwardRules = {read = get_CallForwardRules};
  __property   long            Balance = {read = get_Balance};
  __property   BSTR            BalanceCurrency = {read = get_BalanceCurrency};
  __property   BSTR            BalanceToText = {read = get_BalanceToText};
  __property   BSTR            IPCountry = {read = get_IPCountry};
  __property   BSTR            ValidatedSmsNumbers = {read = get_ValidatedSmsNumbers};
  __property   BSTR            RichMoodText = {read = get_RichMoodText};
};
typedef IProfileDispT<IProfile> IProfileDisp;

// *********************************************************************//
// SmartIntf: TCOMIGroupCollection
// Interface: IGroupCollection
// *********************************************************************//
template <class T /* IGroupCollection */ >
class TCOMIGroupCollectionT : public TComInterface<IGroupCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIGroupCollectionT() {}
  TCOMIGroupCollectionT(IGroupCollection *intf, bool addRef = false) : TComInterface<IGroupCollection>(intf, addRef) {}
  TCOMIGroupCollectionT(const TCOMIGroupCollectionT& src) : TComInterface<IGroupCollection>(src) {}
  TCOMIGroupCollectionT& operator=(const TCOMIGroupCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IGroup* pGroup/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IGroup** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroup* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMIGroupCollectionT<IGroupCollection> TCOMIGroupCollection;

// *********************************************************************//
// DispIntf:  IGroupCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C5C99DC-09CF-4A9C-BD94-8D655454A1F4}
// *********************************************************************//
template<class T>
class IGroupCollectionDispT : public TAutoDriver<IGroupCollection>
{
public:
  IGroupCollectionDispT(){}

  IGroupCollectionDispT(IGroupCollection *pintf)
  {
    TAutoDriver<IGroupCollection>::Bind(pintf, false);
  }

  IGroupCollectionDispT(IGroupCollectionPtr pintf)
  {
    TAutoDriver<IGroupCollection>::Bind(pintf, true);
  }

  IGroupCollectionDispT& operator=(IGroupCollection *pintf)
  {
    TAutoDriver<IGroupCollection>::Bind(pintf, false);
    return *this;
  }

  IGroupCollectionDispT& operator=(IGroupCollectionPtr pintf)
  {
    TAutoDriver<IGroupCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_GroupCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_GroupCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IGroup* pGroup/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IGroup** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IGroup* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IGroupCollectionDispT<IGroupCollection> IGroupCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIGroup
// Interface: IGroup
// *********************************************************************//
template <class T /* IGroup */ >
class TCOMIGroupT : public TComInterface<IGroup>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIGroupT() {}
  TCOMIGroupT(IGroup *intf, bool addRef = false) : TComInterface<IGroup>(intf, addRef) {}
  TCOMIGroupT(const TCOMIGroupT& src) : TComInterface<IGroup>(src) {}
  TCOMIGroupT& operator=(const TCOMIGroupT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TGroupType __fastcall get_Type(void);
  HRESULT         __fastcall get_CustomGroupId(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomGroupId(void);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall set_DisplayName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_Users(void);
  HRESULT         __fastcall get_OnlineUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_OnlineUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollectionPtr __fastcall get_OnlineUsers(void);
  HRESULT         __fastcall get_IsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall get_IsExpanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsExpanded(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsExpanded(void);
  HRESULT         __fastcall AddUser(BSTR Username/*[in]*/);
  HRESULT         __fastcall RemoveUser(BSTR Username/*[in]*/);
  HRESULT         __fastcall Share(BSTR MessageText/*[in,def,opt]*/);
  HRESULT         __fastcall Accept(void);
  HRESULT         __fastcall Decline(void);

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TGroupType Type = {read = get_Type};
  __property   BSTR            CustomGroupId = {read = get_CustomGroupId};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::IUserCollectionPtr Users = {read = get_Users};
  __property   Skype4comlib_tlb::IUserCollectionPtr OnlineUsers = {read = get_OnlineUsers};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible};
  __property   TOLEBOOL        IsExpanded = {read = get_IsExpanded};
};
typedef TCOMIGroupT<IGroup> TCOMIGroup;

// *********************************************************************//
// DispIntf:  IGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84513274-9C49-4AAA-B8FC-316EB32CFE95}
// *********************************************************************//
template<class T>
class IGroupDispT : public TAutoDriver<IGroup>
{
public:
  IGroupDispT(){}

  IGroupDispT(IGroup *pintf)
  {
    TAutoDriver<IGroup>::Bind(pintf, false);
  }

  IGroupDispT(IGroupPtr pintf)
  {
    TAutoDriver<IGroup>::Bind(pintf, true);
  }

  IGroupDispT& operator=(IGroup *pintf)
  {
    TAutoDriver<IGroup>::Bind(pintf, false);
    return *this;
  }

  IGroupDispT& operator=(IGroupPtr pintf)
  {
    TAutoDriver<IGroup>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Group));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Group);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TGroupType __fastcall get_Type(void);
  HRESULT         __fastcall get_CustomGroupId(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomGroupId(void);
  HRESULT         __fastcall get_DisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT         __fastcall set_DisplayName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_Users(void);
  HRESULT         __fastcall get_OnlineUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_OnlineUsers(void);
  HRESULT         __fastcall get_IsVisible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsVisible(void);
  HRESULT         __fastcall get_IsExpanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsExpanded(void);
  HRESULT         __fastcall AddUser(BSTR Username/*[in]*/);
  HRESULT         __fastcall RemoveUser(BSTR Username/*[in]*/);
  HRESULT         __fastcall Share(BSTR MessageText/*[in,def,opt]*/);
  HRESULT         __fastcall Accept();
  HRESULT         __fastcall Decline();

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TGroupType Type = {read = get_Type};
  __property   BSTR            CustomGroupId = {read = get_CustomGroupId};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Skype4comlib_tlb::IUserCollection* Users = {read = get_Users};
  __property   Skype4comlib_tlb::IUserCollection* OnlineUsers = {read = get_OnlineUsers};
  __property   VARIANT_BOOL    IsVisible = {read = get_IsVisible};
  __property   VARIANT_BOOL    IsExpanded = {read = get_IsExpanded};
};
typedef IGroupDispT<IGroup> IGroupDisp;

// *********************************************************************//
// SmartIntf: TCOMISettings
// Interface: ISettings
// *********************************************************************//
template <class T /* ISettings */ >
class TCOMISettingsT : public TComInterface<ISettings>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISettingsT() {}
  TCOMISettingsT(ISettings *intf, bool addRef = false) : TComInterface<ISettings>(intf, addRef) {}
  TCOMISettingsT(const TCOMISettingsT& src) : TComInterface<ISettings>(src) {}
  TCOMISettingsT& operator=(const TCOMISettingsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AudioIn(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AudioIn(void);
  HRESULT         __fastcall set_AudioIn(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AudioOut(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AudioOut(void);
  HRESULT         __fastcall set_AudioOut(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AutoAway(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_AutoAway(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoAway(void);
  HRESULT         __fastcall set_AutoAway(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_AutoAway(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Ringer(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Ringer(void);
  HRESULT         __fastcall set_Ringer(BSTR pVal/*[in]*/);
  HRESULT         __fastcall set_Avatar(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_RingToneStatus(BSTR Id/*[in,def,opt]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RingToneStatus(BSTR Id/*[in,def,opt]*/);
  HRESULT         __fastcall set_RingTone(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_VideoIn(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VideoIn(void);
  HRESULT         __fastcall set_VideoIn(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PCSpeaker(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_PCSpeaker(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PCSpeaker(void);
  HRESULT         __fastcall set_PCSpeaker(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_PCSpeaker(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AGC(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_AGC(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AGC(void);
  HRESULT         __fastcall set_AGC(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_AGC(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AEC(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_AEC(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AEC(void);
  HRESULT         __fastcall set_AEC(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_AEC(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(BSTR pVal/*[in]*/);
  HRESULT         __fastcall set_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SaveAvatarToFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/);
  HRESULT         __fastcall LoadAvatarFromFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/);
  HRESULT         __fastcall ResetIdleTimer(void);

  __property   BSTR            AudioIn = {read = get_AudioIn};
  __property   BSTR            AudioOut = {read = get_AudioOut};
  __property   TOLEBOOL        AutoAway = {read = get_AutoAway, write = set_AutoAway};
  __property   BSTR            Ringer = {read = get_Ringer};
  __property   BSTR            VideoIn = {read = get_VideoIn};
  __property   TOLEBOOL        PCSpeaker = {read = get_PCSpeaker, write = set_PCSpeaker};
  __property   TOLEBOOL        AGC = {read = get_AGC, write = set_AGC};
  __property   TOLEBOOL        AEC = {read = get_AEC, write = set_AEC};
  __property   BSTR            Language = {read = get_Language};
};
typedef TCOMISettingsT<ISettings> TCOMISettings;

// *********************************************************************//
// DispIntf:  ISettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2BC8C53B-3312-4A77-AC87-31DF18A1EC51}
// *********************************************************************//
template<class T>
class ISettingsDispT : public TAutoDriver<ISettings>
{
public:
  ISettingsDispT(){}

  ISettingsDispT(ISettings *pintf)
  {
    TAutoDriver<ISettings>::Bind(pintf, false);
  }

  ISettingsDispT(ISettingsPtr pintf)
  {
    TAutoDriver<ISettings>::Bind(pintf, true);
  }

  ISettingsDispT& operator=(ISettings *pintf)
  {
    TAutoDriver<ISettings>::Bind(pintf, false);
    return *this;
  }

  ISettingsDispT& operator=(ISettingsPtr pintf)
  {
    TAutoDriver<ISettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Settings));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Settings);
  }

  HRESULT         __fastcall get_AudioIn(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AudioIn(void);
  HRESULT         __fastcall set_AudioIn(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AudioOut(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AudioOut(void);
  HRESULT         __fastcall set_AudioOut(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AutoAway(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoAway(void);
  HRESULT         __fastcall set_AutoAway(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Ringer(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Ringer(void);
  HRESULT         __fastcall set_Ringer(BSTR pVal/*[in]*/);
  HRESULT         __fastcall set_Avatar(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_RingToneStatus(BSTR Id/*[in,def,opt]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RingToneStatus(BSTR Id/*[in,def,opt]*/);
  HRESULT         __fastcall set_RingTone(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_VideoIn(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VideoIn(void);
  HRESULT         __fastcall set_VideoIn(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PCSpeaker(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PCSpeaker(void);
  HRESULT         __fastcall set_PCSpeaker(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AGC(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AGC(void);
  HRESULT         __fastcall set_AGC(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_AEC(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AEC(void);
  HRESULT         __fastcall set_AEC(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Language(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(BSTR pVal/*[in]*/);
  HRESULT         __fastcall set_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall SaveAvatarToFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/);
  HRESULT         __fastcall LoadAvatarFromFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/);
  HRESULT         __fastcall ResetIdleTimer();

  __property   BSTR            AudioIn = {read = get_AudioIn};
  __property   BSTR            AudioOut = {read = get_AudioOut};
  __property   VARIANT_BOOL    AutoAway = {read = get_AutoAway, write = set_AutoAway};
  __property   BSTR            Ringer = {read = get_Ringer};
  __property   BSTR            VideoIn = {read = get_VideoIn};
  __property   VARIANT_BOOL    PCSpeaker = {read = get_PCSpeaker, write = set_PCSpeaker};
  __property   VARIANT_BOOL    AGC = {read = get_AGC, write = set_AGC};
  __property   VARIANT_BOOL    AEC = {read = get_AEC, write = set_AEC};
  __property   BSTR            Language = {read = get_Language};
};
typedef ISettingsDispT<ISettings> ISettingsDisp;

// *********************************************************************//
// SmartIntf: TCOMIClient
// Interface: IClient
// *********************************************************************//
template <class T /* IClient */ >
class TCOMIClientT : public TComInterface<IClient>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIClientT() {}
  TCOMIClientT(IClient *intf, bool addRef = false) : TComInterface<IClient>(intf, addRef) {}
  TCOMIClientT(const TCOMIClientT& src) : TComInterface<IClient>(src) {}
  TCOMIClientT& operator=(const TCOMIClientT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Start(VARIANT_BOOL Minimized/*[in,def,opt]*/, 
                                   VARIANT_BOOL Nosplash/*[in,def,opt]*/);
  HRESULT         __fastcall Minimize(void);
  HRESULT         __fastcall Shutdown(void);
  HRESULT         __fastcall get_IsRunning(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsRunning(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsRunning(void);
  HRESULT         __fastcall OpenProfileDialog(void);
  HRESULT         __fastcall OpenUserInfoDialog(BSTR Username/*[in]*/);
  HRESULT         __fastcall OpenConferenceDialog(void);
  HRESULT         __fastcall OpenSearchDialog(void);
  HRESULT         __fastcall OpenOptionsDialog(BSTR Page/*[in]*/);
  HRESULT         __fastcall OpenCallHistoryTab(void);
  HRESULT         __fastcall OpenContactsTab(void);
  HRESULT         __fastcall OpenDialpadTab(void);
  HRESULT         __fastcall OpenSendContactsDialog(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall OpenBlockedUsersDialog(void);
  HRESULT         __fastcall OpenImportContactsWizard(void);
  HRESULT         __fastcall OpenGettingStartedWizard(void);
  HRESULT         __fastcall OpenAuthorizationDialog(BSTR Username/*[in]*/);
  HRESULT         __fastcall OpenDialog(BSTR Name/*[in]*/, BSTR Param1/*[in,def,opt]*/, 
                                        BSTR Param2/*[in,def,opt]*/);
  HRESULT         __fastcall OpenVideoTestDialog(void);
  HRESULT         __fastcall OpenAddContactDialog(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall OpenMessageDialog(BSTR Username/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall OpenFileTransferDialog(BSTR User/*[in]*/, BSTR Folder/*[in]*/);
  HRESULT         __fastcall Focus(void);
  HRESULT         __fastcall ButtonPressed(BSTR Key/*[in]*/);
  HRESULT         __fastcall ButtonReleased(BSTR Key/*[in]*/);
  HRESULT         __fastcall OpenSmsDialog(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                         BSTR Hint/*[in]*/, 
                                         Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/);
  Skype4comlib_tlb::IPluginEvent* __fastcall CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                                         BSTR Hint/*[in]*/);
  HRESULT         __fastcall CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                            Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                            BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                            BSTR IconPath/*[in,def,opt]*/, 
                                            VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                            VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/);
  Skype4comlib_tlb::IPluginMenuItem* __fastcall CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                                               Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                               BSTR CaptionText/*[in]*/, 
                                                               BSTR HintText/*[in,def,opt]*/, 
                                                               BSTR IconPath/*[in,def,opt]*/, 
                                                               VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                               Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                               VARIANT_BOOL MultipleContacts/*[in,def,opt]*/);
  HRESULT         __fastcall get_Wallpaper(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Wallpaper(void);
  HRESULT         __fastcall set_Wallpaper(BSTR pVal/*[in]*/);
  HRESULT         __fastcall OpenLiveTab(void);

  __property   TOLEBOOL        IsRunning = {read = get_IsRunning};
  __property   BSTR            Wallpaper = {read = get_Wallpaper};
};
typedef TCOMIClientT<IClient> TCOMIClient;

// *********************************************************************//
// DispIntf:  IClient
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {838731B0-88E7-4BED-81DC-B35CA8433341}
// *********************************************************************//
template<class T>
class IClientDispT : public TAutoDriver<IClient>
{
public:
  IClientDispT(){}

  IClientDispT(IClient *pintf)
  {
    TAutoDriver<IClient>::Bind(pintf, false);
  }

  IClientDispT(IClientPtr pintf)
  {
    TAutoDriver<IClient>::Bind(pintf, true);
  }

  IClientDispT& operator=(IClient *pintf)
  {
    TAutoDriver<IClient>::Bind(pintf, false);
    return *this;
  }

  IClientDispT& operator=(IClientPtr pintf)
  {
    TAutoDriver<IClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Client));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Client);
  }

  HRESULT         __fastcall Start(VARIANT_BOOL Minimized/*[in,def,opt]*/, 
                                   VARIANT_BOOL Nosplash/*[in,def,opt]*/);
  HRESULT         __fastcall Minimize();
  HRESULT         __fastcall Shutdown();
  HRESULT         __fastcall get_IsRunning(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsRunning(void);
  HRESULT         __fastcall OpenProfileDialog();
  HRESULT         __fastcall OpenUserInfoDialog(BSTR Username/*[in]*/);
  HRESULT         __fastcall OpenConferenceDialog();
  HRESULT         __fastcall OpenSearchDialog();
  HRESULT         __fastcall OpenOptionsDialog(BSTR Page/*[in]*/);
  HRESULT         __fastcall OpenCallHistoryTab();
  HRESULT         __fastcall OpenContactsTab();
  HRESULT         __fastcall OpenDialpadTab();
  HRESULT         __fastcall OpenSendContactsDialog(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall OpenBlockedUsersDialog();
  HRESULT         __fastcall OpenImportContactsWizard();
  HRESULT         __fastcall OpenGettingStartedWizard();
  HRESULT         __fastcall OpenAuthorizationDialog(BSTR Username/*[in]*/);
  HRESULT         __fastcall OpenDialog(BSTR Name/*[in]*/, BSTR Param1/*[in,def,opt]*/, 
                                        BSTR Param2/*[in,def,opt]*/);
  HRESULT         __fastcall OpenVideoTestDialog();
  HRESULT         __fastcall OpenAddContactDialog(BSTR Username/*[in,def,opt]*/);
  HRESULT         __fastcall OpenMessageDialog(BSTR Username/*[in]*/, BSTR Text/*[in,def,opt]*/);
  HRESULT         __fastcall OpenFileTransferDialog(BSTR User/*[in]*/, BSTR Folder/*[in]*/);
  HRESULT         __fastcall Focus();
  HRESULT         __fastcall ButtonPressed(BSTR Key/*[in]*/);
  HRESULT         __fastcall ButtonReleased(BSTR Key/*[in]*/);
  HRESULT         __fastcall OpenSmsDialog(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                         BSTR Hint/*[in]*/, 
                                         Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/);
  Skype4comlib_tlb::IPluginEvent* __fastcall CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                                         BSTR Hint/*[in]*/);
  HRESULT         __fastcall CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                            Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                            BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/
                                            , BSTR IconPath/*[in,def,opt]*/, 
                                            VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/
                                            , VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                            Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/);
  Skype4comlib_tlb::IPluginMenuItem* __fastcall CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                                               Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                               BSTR CaptionText/*[in]*/, 
                                                               BSTR HintText/*[in,def,opt]*/, 
                                                               BSTR IconPath/*[in,def,opt]*/, 
                                                               VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                               Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                               VARIANT_BOOL MultipleContacts/*[in,def,opt]*/);
  HRESULT         __fastcall get_Wallpaper(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Wallpaper(void);
  HRESULT         __fastcall set_Wallpaper(BSTR pVal/*[in]*/);
  HRESULT         __fastcall OpenLiveTab();

  __property   VARIANT_BOOL    IsRunning = {read = get_IsRunning};
  __property   BSTR            Wallpaper = {read = get_Wallpaper};
};
typedef IClientDispT<IClient> IClientDisp;

// *********************************************************************//
// SmartIntf: TCOMIPluginEvent
// Interface: IPluginEvent
// *********************************************************************//
template <class T /* IPluginEvent */ >
class TCOMIPluginEventT : public TComInterface<IPluginEvent>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPluginEventT() {}
  TCOMIPluginEventT(IPluginEvent *intf, bool addRef = false) : TComInterface<IPluginEvent>(intf, addRef) {}
  TCOMIPluginEventT(const TCOMIPluginEventT& src) : TComInterface<IPluginEvent>(src) {}
  TCOMIPluginEventT& operator=(const TCOMIPluginEventT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall Delete(void);

  __property   BSTR            Id = {read = get_Id};
};
typedef TCOMIPluginEventT<IPluginEvent> TCOMIPluginEvent;

// *********************************************************************//
// DispIntf:  IPluginEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4DF5F83A-0ABA-417D-A6FC-62A68AE06EF7}
// *********************************************************************//
template<class T>
class IPluginEventDispT : public TAutoDriver<IPluginEvent>
{
public:
  IPluginEventDispT(){}

  IPluginEventDispT(IPluginEvent *pintf)
  {
    TAutoDriver<IPluginEvent>::Bind(pintf, false);
  }

  IPluginEventDispT(IPluginEventPtr pintf)
  {
    TAutoDriver<IPluginEvent>::Bind(pintf, true);
  }

  IPluginEventDispT& operator=(IPluginEvent *pintf)
  {
    TAutoDriver<IPluginEvent>::Bind(pintf, false);
    return *this;
  }

  IPluginEventDispT& operator=(IPluginEventPtr pintf)
  {
    TAutoDriver<IPluginEvent>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PluginEvent));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PluginEvent);
  }

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall Delete();

  __property   BSTR            Id = {read = get_Id};
};
typedef IPluginEventDispT<IPluginEvent> IPluginEventDisp;

// *********************************************************************//
// SmartIntf: TCOMIPluginMenuItem
// Interface: IPluginMenuItem
// *********************************************************************//
template <class T /* IPluginMenuItem */ >
class TCOMIPluginMenuItemT : public TComInterface<IPluginMenuItem>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPluginMenuItemT() {}
  TCOMIPluginMenuItemT(IPluginMenuItem *intf, bool addRef = false) : TComInterface<IPluginMenuItem>(intf, addRef) {}
  TCOMIPluginMenuItemT(const TCOMIPluginMenuItemT& src) : TComInterface<IPluginMenuItem>(src) {}
  TCOMIPluginMenuItemT& operator=(const TCOMIPluginMenuItemT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall set_Caption(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Hint(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Param1/*[in]*/);
  HRESULT         __fastcall Delete(void);

  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            Caption = {write = set_Caption};
  __property   BSTR            Hint = {write = set_Hint};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
};
typedef TCOMIPluginMenuItemT<IPluginMenuItem> TCOMIPluginMenuItem;

// *********************************************************************//
// DispIntf:  IPluginMenuItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C4BDF667-3FF7-4B44-A9F4-F3937E3E6D86}
// *********************************************************************//
template<class T>
class IPluginMenuItemDispT : public TAutoDriver<IPluginMenuItem>
{
public:
  IPluginMenuItemDispT(){}

  IPluginMenuItemDispT(IPluginMenuItem *pintf)
  {
    TAutoDriver<IPluginMenuItem>::Bind(pintf, false);
  }

  IPluginMenuItemDispT(IPluginMenuItemPtr pintf)
  {
    TAutoDriver<IPluginMenuItem>::Bind(pintf, true);
  }

  IPluginMenuItemDispT& operator=(IPluginMenuItem *pintf)
  {
    TAutoDriver<IPluginMenuItem>::Bind(pintf, false);
    return *this;
  }

  IPluginMenuItemDispT& operator=(IPluginMenuItemPtr pintf)
  {
    TAutoDriver<IPluginMenuItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PluginMenuItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PluginMenuItem);
  }

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall set_Caption(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Hint(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall Delete();

  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            Caption = {write = set_Caption};
  __property   BSTR            Hint = {write = set_Hint};
  __property   VARIANT_BOOL    Enabled = {write = set_Enabled};
};
typedef IPluginMenuItemDispT<IPluginMenuItem> IPluginMenuItemDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsMessage
// Interface: ISmsMessage
// *********************************************************************//
template <class T /* ISmsMessage */ >
class TCOMISmsMessageT : public TComInterface<ISmsMessage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsMessageT() {}
  TCOMISmsMessageT(ISmsMessage *intf, bool addRef = false) : TComInterface<ISmsMessage>(intf, addRef) {}
  TCOMISmsMessageT(const TCOMISmsMessageT& src) : TComInterface<ISmsMessage>(src) {}
  TCOMISmsMessageT& operator=(const TCOMISmsMessageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_IsFailedUnseen(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_IsFailedUnseen(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsFailedUnseen(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall set_Seen(TOLEBOOL Param1/*[in]*/);
  HRESULT         __fastcall get_Price(long* pVal/*[out,retval]*/);
  long            __fastcall get_Price(void);
  HRESULT         __fastcall get_PricePrecision(long* pVal/*[out,retval]*/);
  long            __fastcall get_PricePrecision(void);
  HRESULT         __fastcall get_PriceCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PriceCurrency(void);
  HRESULT         __fastcall get_ReplyToNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReplyToNumber(void);
  HRESULT         __fastcall set_ReplyToNumber(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Targets(Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Targets(Skype4comlib_tlb::ISmsTargetCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsTargetCollectionPtr __fastcall get_Targets(void);
  HRESULT         __fastcall get_Body(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Body(void);
  HRESULT         __fastcall set_Body(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Chunks(Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Chunks(Skype4comlib_tlb::ISmsChunkCollectionPtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsChunkCollectionPtr __fastcall get_Chunks(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall Send(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_TargetNumbers(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TargetNumbers(void);
  HRESULT         __fastcall set_TargetNumbers(BSTR pVal/*[in]*/);

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TSmsMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TSmsMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TSmsFailureReason FailureReason = {read = get_FailureReason};
  __property   TOLEBOOL        IsFailedUnseen = {read = get_IsFailedUnseen};
  __property   TOLEBOOL        Seen = {write = set_Seen};
  __property   long            Price = {read = get_Price};
  __property   long            PricePrecision = {read = get_PricePrecision};
  __property   BSTR            PriceCurrency = {read = get_PriceCurrency};
  __property   BSTR            ReplyToNumber = {read = get_ReplyToNumber};
  __property   Skype4comlib_tlb::ISmsTargetCollectionPtr Targets = {read = get_Targets};
  __property   BSTR            Body = {read = get_Body};
  __property   Skype4comlib_tlb::ISmsChunkCollectionPtr Chunks = {read = get_Chunks};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            TargetNumbers = {read = get_TargetNumbers};
};
typedef TCOMISmsMessageT<ISmsMessage> TCOMISmsMessage;

// *********************************************************************//
// DispIntf:  ISmsMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D97F2A-0E17-40F3-8E01-24937F936FF4}
// *********************************************************************//
template<class T>
class ISmsMessageDispT : public TAutoDriver<ISmsMessage>
{
public:
  ISmsMessageDispT(){}

  ISmsMessageDispT(ISmsMessage *pintf)
  {
    TAutoDriver<ISmsMessage>::Bind(pintf, false);
  }

  ISmsMessageDispT(ISmsMessagePtr pintf)
  {
    TAutoDriver<ISmsMessage>::Bind(pintf, true);
  }

  ISmsMessageDispT& operator=(ISmsMessage *pintf)
  {
    TAutoDriver<ISmsMessage>::Bind(pintf, false);
    return *this;
  }

  ISmsMessageDispT& operator=(ISmsMessagePtr pintf)
  {
    TAutoDriver<ISmsMessage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsMessage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsMessage);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_IsFailedUnseen(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsFailedUnseen(void);
  HRESULT         __fastcall set_Seen(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall get_Price(long* pVal/*[out,retval]*/);
  long            __fastcall get_Price(void);
  HRESULT         __fastcall get_PricePrecision(long* pVal/*[out,retval]*/);
  long            __fastcall get_PricePrecision(void);
  HRESULT         __fastcall get_PriceCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PriceCurrency(void);
  HRESULT         __fastcall get_ReplyToNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReplyToNumber(void);
  HRESULT         __fastcall set_ReplyToNumber(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Targets(Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsTargetCollection* __fastcall get_Targets(void);
  HRESULT         __fastcall get_Body(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Body(void);
  HRESULT         __fastcall set_Body(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Chunks(Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsChunkCollection* __fastcall get_Chunks(void);
  HRESULT         __fastcall get_Timestamp(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_Timestamp(void);
  HRESULT         __fastcall Send();
  HRESULT         __fastcall Delete();
  HRESULT         __fastcall get_TargetNumbers(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TargetNumbers(void);
  HRESULT         __fastcall set_TargetNumbers(BSTR pVal/*[in]*/);

  __property   long            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TSmsMessageType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TSmsMessageStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TSmsFailureReason FailureReason = {read = get_FailureReason};
  __property   VARIANT_BOOL    IsFailedUnseen = {read = get_IsFailedUnseen};
  __property   VARIANT_BOOL    Seen = {write = set_Seen};
  __property   long            Price = {read = get_Price};
  __property   long            PricePrecision = {read = get_PricePrecision};
  __property   BSTR            PriceCurrency = {read = get_PriceCurrency};
  __property   BSTR            ReplyToNumber = {read = get_ReplyToNumber};
  __property   Skype4comlib_tlb::ISmsTargetCollection* Targets = {read = get_Targets};
  __property   BSTR            Body = {read = get_Body};
  __property   Skype4comlib_tlb::ISmsChunkCollection* Chunks = {read = get_Chunks};
  __property   DATE            Timestamp = {read = get_Timestamp};
  __property   BSTR            TargetNumbers = {read = get_TargetNumbers};
};
typedef ISmsMessageDispT<ISmsMessage> ISmsMessageDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsTargetCollection
// Interface: ISmsTargetCollection
// *********************************************************************//
template <class T /* ISmsTargetCollection */ >
class TCOMISmsTargetCollectionT : public TComInterface<ISmsTargetCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsTargetCollectionT() {}
  TCOMISmsTargetCollectionT(ISmsTargetCollection *intf, bool addRef = false) : TComInterface<ISmsTargetCollection>(intf, addRef) {}
  TCOMISmsTargetCollectionT(const TCOMISmsTargetCollectionT& src) : TComInterface<ISmsTargetCollection>(src) {}
  TCOMISmsTargetCollectionT& operator=(const TCOMISmsTargetCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsTarget* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsTarget** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsTarget* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMISmsTargetCollectionT<ISmsTargetCollection> TCOMISmsTargetCollection;

// *********************************************************************//
// DispIntf:  ISmsTargetCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2365EF3-4805-4DD3-A9D4-1A8AE3E17D84}
// *********************************************************************//
template<class T>
class ISmsTargetCollectionDispT : public TAutoDriver<ISmsTargetCollection>
{
public:
  ISmsTargetCollectionDispT(){}

  ISmsTargetCollectionDispT(ISmsTargetCollection *pintf)
  {
    TAutoDriver<ISmsTargetCollection>::Bind(pintf, false);
  }

  ISmsTargetCollectionDispT(ISmsTargetCollectionPtr pintf)
  {
    TAutoDriver<ISmsTargetCollection>::Bind(pintf, true);
  }

  ISmsTargetCollectionDispT& operator=(ISmsTargetCollection *pintf)
  {
    TAutoDriver<ISmsTargetCollection>::Bind(pintf, false);
    return *this;
  }

  ISmsTargetCollectionDispT& operator=(ISmsTargetCollectionPtr pintf)
  {
    TAutoDriver<ISmsTargetCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsTargetCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsTargetCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsTarget* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsTarget** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsTarget* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ISmsTargetCollectionDispT<ISmsTargetCollection> ISmsTargetCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsTarget
// Interface: ISmsTarget
// *********************************************************************//
template <class T /* ISmsTarget */ >
class TCOMISmsTargetT : public TComInterface<ISmsTarget>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsTargetT() {}
  TCOMISmsTargetT(ISmsTarget *intf, bool addRef = false) : TComInterface<ISmsTarget>(intf, addRef) {}
  TCOMISmsTargetT(const TCOMISmsTargetT& src) : TComInterface<ISmsTarget>(src) {}
  TCOMISmsTargetT& operator=(const TCOMISmsTargetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsTargetStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_Number(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Number(void);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessagePtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessagePtr __fastcall get_Message(void);

  __property   Skype4comlib_tlb::TSmsTargetStatus Status = {read = get_Status};
  __property   BSTR            Number = {read = get_Number};
  __property   Skype4comlib_tlb::ISmsMessagePtr Message = {read = get_Message};
};
typedef TCOMISmsTargetT<ISmsTarget> TCOMISmsTarget;

// *********************************************************************//
// DispIntf:  ISmsTarget
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9B9C33A-49A6-41D5-B13F-2AA4F284F406}
// *********************************************************************//
template<class T>
class ISmsTargetDispT : public TAutoDriver<ISmsTarget>
{
public:
  ISmsTargetDispT(){}

  ISmsTargetDispT(ISmsTarget *pintf)
  {
    TAutoDriver<ISmsTarget>::Bind(pintf, false);
  }

  ISmsTargetDispT(ISmsTargetPtr pintf)
  {
    TAutoDriver<ISmsTarget>::Bind(pintf, true);
  }

  ISmsTargetDispT& operator=(ISmsTarget *pintf)
  {
    TAutoDriver<ISmsTarget>::Bind(pintf, false);
    return *this;
  }

  ISmsTargetDispT& operator=(ISmsTargetPtr pintf)
  {
    TAutoDriver<ISmsTarget>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsTarget));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsTarget);
  }

  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsTargetStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_Number(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Number(void);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall get_Message(void);

  __property   Skype4comlib_tlb::TSmsTargetStatus Status = {read = get_Status};
  __property   BSTR            Number = {read = get_Number};
  __property   Skype4comlib_tlb::ISmsMessage* Message = {read = get_Message};
};
typedef ISmsTargetDispT<ISmsTarget> ISmsTargetDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsChunkCollection
// Interface: ISmsChunkCollection
// *********************************************************************//
template <class T /* ISmsChunkCollection */ >
class TCOMISmsChunkCollectionT : public TComInterface<ISmsChunkCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsChunkCollectionT() {}
  TCOMISmsChunkCollectionT(ISmsChunkCollection *intf, bool addRef = false) : TComInterface<ISmsChunkCollection>(intf, addRef) {}
  TCOMISmsChunkCollectionT(const TCOMISmsChunkCollectionT& src) : TComInterface<ISmsChunkCollection>(src) {}
  TCOMISmsChunkCollectionT& operator=(const TCOMISmsChunkCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsChunk* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsChunk** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsChunk* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMISmsChunkCollectionT<ISmsChunkCollection> TCOMISmsChunkCollection;

// *********************************************************************//
// DispIntf:  ISmsChunkCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBDA7D2D-B1C2-4AF9-AB5B-D762341D8903}
// *********************************************************************//
template<class T>
class ISmsChunkCollectionDispT : public TAutoDriver<ISmsChunkCollection>
{
public:
  ISmsChunkCollectionDispT(){}

  ISmsChunkCollectionDispT(ISmsChunkCollection *pintf)
  {
    TAutoDriver<ISmsChunkCollection>::Bind(pintf, false);
  }

  ISmsChunkCollectionDispT(ISmsChunkCollectionPtr pintf)
  {
    TAutoDriver<ISmsChunkCollection>::Bind(pintf, true);
  }

  ISmsChunkCollectionDispT& operator=(ISmsChunkCollection *pintf)
  {
    TAutoDriver<ISmsChunkCollection>::Bind(pintf, false);
    return *this;
  }

  ISmsChunkCollectionDispT& operator=(ISmsChunkCollectionPtr pintf)
  {
    TAutoDriver<ISmsChunkCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsChunkCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsChunkCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsChunk* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsChunk** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsChunk* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ISmsChunkCollectionDispT<ISmsChunkCollection> ISmsChunkCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsChunk
// Interface: ISmsChunk
// *********************************************************************//
template <class T /* ISmsChunk */ >
class TCOMISmsChunkT : public TComInterface<ISmsChunk>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsChunkT() {}
  TCOMISmsChunkT(ISmsChunk *intf, bool addRef = false) : TComInterface<ISmsChunk>(intf, addRef) {}
  TCOMISmsChunkT(const TCOMISmsChunkT& src) : TComInterface<ISmsChunk>(src) {}
  TCOMISmsChunkT& operator=(const TCOMISmsChunkT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_CharactersLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_CharactersLeft(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessagePtr* pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessagePtr __fastcall get_Message(void);

  __property   long            Id = {read = get_Id};
  __property   long            CharactersLeft = {read = get_CharactersLeft};
  __property   BSTR            Text = {read = get_Text};
  __property   Skype4comlib_tlb::ISmsMessagePtr Message = {read = get_Message};
};
typedef TCOMISmsChunkT<ISmsChunk> TCOMISmsChunk;

// *********************************************************************//
// DispIntf:  ISmsChunk
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9062508-C926-4415-ABB7-A5A46DB34456}
// *********************************************************************//
template<class T>
class ISmsChunkDispT : public TAutoDriver<ISmsChunk>
{
public:
  ISmsChunkDispT(){}

  ISmsChunkDispT(ISmsChunk *pintf)
  {
    TAutoDriver<ISmsChunk>::Bind(pintf, false);
  }

  ISmsChunkDispT(ISmsChunkPtr pintf)
  {
    TAutoDriver<ISmsChunk>::Bind(pintf, true);
  }

  ISmsChunkDispT& operator=(ISmsChunk *pintf)
  {
    TAutoDriver<ISmsChunk>::Bind(pintf, false);
    return *this;
  }

  ISmsChunkDispT& operator=(ISmsChunkPtr pintf)
  {
    TAutoDriver<ISmsChunk>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsChunk));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsChunk);
  }

  HRESULT         __fastcall get_Id(long* pVal/*[out,retval]*/);
  long            __fastcall get_Id(void);
  HRESULT         __fastcall get_CharactersLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_CharactersLeft(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall get_Message(void);

  __property   long            Id = {read = get_Id};
  __property   long            CharactersLeft = {read = get_CharactersLeft};
  __property   BSTR            Text = {read = get_Text};
  __property   Skype4comlib_tlb::ISmsMessage* Message = {read = get_Message};
};
typedef ISmsChunkDispT<ISmsChunk> ISmsChunkDisp;

// *********************************************************************//
// SmartIntf: TCOMISmsMessageCollection
// Interface: ISmsMessageCollection
// *********************************************************************//
template <class T /* ISmsMessageCollection */ >
class TCOMISmsMessageCollectionT : public TComInterface<ISmsMessageCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmsMessageCollectionT() {}
  TCOMISmsMessageCollectionT(ISmsMessageCollection *intf, bool addRef = false) : TComInterface<ISmsMessageCollection>(intf, addRef) {}
  TCOMISmsMessageCollectionT(const TCOMISmsMessageCollectionT& src) : TComInterface<ISmsMessageCollection>(src) {}
  TCOMISmsMessageCollectionT& operator=(const TCOMISmsMessageCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsMessage* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMISmsMessageCollectionT<ISmsMessageCollection> TCOMISmsMessageCollection;

// *********************************************************************//
// DispIntf:  ISmsMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D5BAB2E-69CC-4136-8E02-FC20767DC9E2}
// *********************************************************************//
template<class T>
class ISmsMessageCollectionDispT : public TAutoDriver<ISmsMessageCollection>
{
public:
  ISmsMessageCollectionDispT(){}

  ISmsMessageCollectionDispT(ISmsMessageCollection *pintf)
  {
    TAutoDriver<ISmsMessageCollection>::Bind(pintf, false);
  }

  ISmsMessageCollectionDispT(ISmsMessageCollectionPtr pintf)
  {
    TAutoDriver<ISmsMessageCollection>::Bind(pintf, true);
  }

  ISmsMessageCollectionDispT& operator=(ISmsMessageCollection *pintf)
  {
    TAutoDriver<ISmsMessageCollection>::Bind(pintf, false);
    return *this;
  }

  ISmsMessageCollectionDispT& operator=(ISmsMessageCollectionPtr pintf)
  {
    TAutoDriver<ISmsMessageCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmsMessageCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmsMessageCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ISmsMessage* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsMessage* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ISmsMessageCollectionDispT<ISmsMessageCollection> ISmsMessageCollectionDisp;

typedef TComInterface<IFileTransferCollection>  TCOMIFileTransferCollection;

// *********************************************************************//
// DispIntf:  IFileTransferCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70A59A25-E823-4C3F-8F33-775008895EE3}
// *********************************************************************//
template<class T>
class IFileTransferCollectionDispT : public TAutoDriver<IFileTransferCollection>
{
public:
  IFileTransferCollectionDispT(){}

  IFileTransferCollectionDispT(IFileTransferCollection *pintf)
  {
    TAutoDriver<IFileTransferCollection>::Bind(pintf, false);
  }

  IFileTransferCollectionDispT(IFileTransferCollectionPtr pintf)
  {
    TAutoDriver<IFileTransferCollection>::Bind(pintf, true);
  }

  IFileTransferCollectionDispT& operator=(IFileTransferCollection *pintf)
  {
    TAutoDriver<IFileTransferCollection>::Bind(pintf, false);
    return *this;
  }

  IFileTransferCollectionDispT& operator=(IFileTransferCollectionPtr pintf)
  {
    TAutoDriver<IFileTransferCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::IFileTransfer* pItem/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::IFileTransfer** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IFileTransfer* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IFileTransferCollectionDispT<IFileTransferCollection> IFileTransferCollectionDisp;

typedef TComInterface<IFileTransfer>  TCOMIFileTransfer;

// *********************************************************************//
// DispIntf:  IFileTransfer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D36B368-B88C-45FA-B136-3EF77B2EAD39}
// *********************************************************************//
template<class T>
class IFileTransferDispT : public TAutoDriver<IFileTransfer>
{
public:
  IFileTransferDispT(){}

  IFileTransferDispT(IFileTransfer *pintf)
  {
    TAutoDriver<IFileTransfer>::Bind(pintf, false);
  }

  IFileTransferDispT(IFileTransferPtr pintf)
  {
    TAutoDriver<IFileTransfer>::Bind(pintf, true);
  }

  IFileTransferDispT& operator=(IFileTransfer *pintf)
  {
    TAutoDriver<IFileTransfer>::Bind(pintf, false);
    return *this;
  }

  IFileTransferDispT& operator=(IFileTransferPtr pintf)
  {
    TAutoDriver<IFileTransfer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Id(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall get_Type(Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferType __fastcall get_Type(void);
  HRESULT         __fastcall get_Status(Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_FailureReason(Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferFailureReason __fastcall get_FailureReason(void);
  HRESULT         __fastcall get_PartnerHandle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerHandle(void);
  HRESULT         __fastcall get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PartnerDisplayName(void);
  HRESULT         __fastcall get_StartTime(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_StartTime(void);
  HRESULT         __fastcall get_FinishTime(DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_FinishTime(void);
  HRESULT         __fastcall get_FilePath(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FilePath(void);
  HRESULT         __fastcall get_Filename(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Filename(void);
  HRESULT         __fastcall get_BytesPerSecond(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BytesPerSecond(void);
  HRESULT         __fastcall get_BytesTransferred(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BytesTransferred(void);

  __property   BSTR            Id = {read = get_Id};
  __property   Skype4comlib_tlb::TFileTransferType Type = {read = get_Type};
  __property   Skype4comlib_tlb::TFileTransferStatus Status = {read = get_Status};
  __property   Skype4comlib_tlb::TFileTransferFailureReason FailureReason = {read = get_FailureReason};
  __property   BSTR            PartnerHandle = {read = get_PartnerHandle};
  __property   BSTR            PartnerDisplayName = {read = get_PartnerDisplayName};
  __property   DATE            StartTime = {read = get_StartTime};
  __property   DATE            FinishTime = {read = get_FinishTime};
  __property   BSTR            FilePath = {read = get_FilePath};
  __property   BSTR            Filename = {read = get_Filename};
  __property   BSTR            BytesPerSecond = {read = get_BytesPerSecond};
  __property   BSTR            BytesTransferred = {read = get_BytesTransferred};
};
typedef IFileTransferDispT<IFileTransfer> IFileTransferDisp;

// *********************************************************************//
// SmartIntf: TCOMICallChannelCollection
// Interface: ICallChannelCollection
// *********************************************************************//
template <class T /* ICallChannelCollection */ >
class TCOMICallChannelCollectionT : public TComInterface<ICallChannelCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallChannelCollectionT() {}
  TCOMICallChannelCollectionT(ICallChannelCollection *intf, bool addRef = false) : TComInterface<ICallChannelCollection>(intf, addRef) {}
  TCOMICallChannelCollectionT(const TCOMICallChannelCollectionT& src) : TComInterface<ICallChannelCollection>(src) {}
  TCOMICallChannelCollectionT& operator=(const TCOMICallChannelCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ICallChannel** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannel* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOMICallChannelCollectionT<ICallChannelCollection> TCOMICallChannelCollection;

// *********************************************************************//
// DispIntf:  ICallChannelCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CB09087-E389-4C6D-A6A2-7D4BCA8545D9}
// *********************************************************************//
template<class T>
class ICallChannelCollectionDispT : public TAutoDriver<ICallChannelCollection>
{
public:
  ICallChannelCollectionDispT(){}

  ICallChannelCollectionDispT(ICallChannelCollection *pintf)
  {
    TAutoDriver<ICallChannelCollection>::Bind(pintf, false);
  }

  ICallChannelCollectionDispT(ICallChannelCollectionPtr pintf)
  {
    TAutoDriver<ICallChannelCollection>::Bind(pintf, true);
  }

  ICallChannelCollectionDispT& operator=(ICallChannelCollection *pintf)
  {
    TAutoDriver<ICallChannelCollection>::Bind(pintf, false);
    return *this;
  }

  ICallChannelCollectionDispT& operator=(ICallChannelCollectionPtr pintf)
  {
    TAutoDriver<ICallChannelCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CallChannelCollection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CallChannelCollection);
  }

  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/);
  HRESULT         __fastcall Remove(long Index/*[in]*/);
  HRESULT         __fastcall RemoveAll();
  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ICallChannel** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallChannel* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ICallChannelCollectionDispT<ICallChannelCollection> ICallChannelCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMICallChannelMessage
// Interface: ICallChannelMessage
// *********************************************************************//
template <class T /* ICallChannelMessage */ >
class TCOMICallChannelMessageT : public TComInterface<ICallChannelMessage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICallChannelMessageT() {}
  TCOMICallChannelMessageT(ICallChannelMessage *intf, bool addRef = false) : TComInterface<ICallChannelMessage>(intf, addRef) {}
  TCOMICallChannelMessageT(const TCOMICallChannelMessageT& src) : TComInterface<ICallChannelMessage>(src) {}
  TCOMICallChannelMessageT& operator=(const TCOMICallChannelMessageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);

  __property   BSTR            Text = {read = get_Text};
};
typedef TCOMICallChannelMessageT<ICallChannelMessage> TCOMICallChannelMessage;

// *********************************************************************//
// DispIntf:  ICallChannelMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0EF6FD5D-607D-4EA3-9C90-683D73449E9D}
// *********************************************************************//
template<class T>
class ICallChannelMessageDispT : public TAutoDriver<ICallChannelMessage>
{
public:
  ICallChannelMessageDispT(){}

  ICallChannelMessageDispT(ICallChannelMessage *pintf)
  {
    TAutoDriver<ICallChannelMessage>::Bind(pintf, false);
  }

  ICallChannelMessageDispT(ICallChannelMessagePtr pintf)
  {
    TAutoDriver<ICallChannelMessage>::Bind(pintf, true);
  }

  ICallChannelMessageDispT& operator=(ICallChannelMessage *pintf)
  {
    TAutoDriver<ICallChannelMessage>::Bind(pintf, false);
    return *this;
  }

  ICallChannelMessageDispT& operator=(ICallChannelMessagePtr pintf)
  {
    TAutoDriver<ICallChannelMessage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CallChannelMessage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CallChannelMessage);
  }

  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);

  __property   BSTR            Text = {read = get_Text};
};
typedef ICallChannelMessageDispT<ICallChannelMessage> ICallChannelMessageDisp;

typedef TComInterface<ISkypeApplication>  TCOMISkypeApplication;

// *********************************************************************//
// DispIntf:  ISkypeApplication
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55A5200C-B2E8-4795-A6FA-858CA3FE2F26}
// *********************************************************************//
template<class T>
class ISkypeApplicationDispT : public TAutoDriver<ISkypeApplication>
{
public:
  ISkypeApplicationDispT(){}

  ISkypeApplicationDispT(ISkypeApplication *pintf)
  {
    TAutoDriver<ISkypeApplication>::Bind(pintf, false);
  }

  ISkypeApplicationDispT(ISkypeApplicationPtr pintf)
  {
    TAutoDriver<ISkypeApplication>::Bind(pintf, true);
  }

  ISkypeApplicationDispT& operator=(ISkypeApplication *pintf)
  {
    TAutoDriver<ISkypeApplication>::Bind(pintf, false);
    return *this;
  }

  ISkypeApplicationDispT& operator=(ISkypeApplicationPtr pintf)
  {
    TAutoDriver<ISkypeApplication>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall CreateApplication(BSTR Name/*[in]*/);
  HRESULT         __fastcall DeleteApplication(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_ApplicationStreams(BSTR AppName/*[in]*/, 
                                                    Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationStreams(BSTR AppName/*[in]*/);
  HRESULT         __fastcall ConnectApplicationUser(BSTR AppName/*[in]*/, BSTR Username/*[in]*/, 
                                                    VARIANT_BOOL WaitConnected/*[in,def,opt]*/);
  HRESULT         __fastcall ReadApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ReadApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/);
  HRESULT         __fastcall WriteApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/
                                                    , BSTR Text/*[in]*/);
  HRESULT         __fastcall get_ApplicationConnectableUsers(BSTR AppName/*[in]*/, 
                                                             Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ApplicationConnectableUsers(BSTR AppName/*[in]*/);
  HRESULT         __fastcall get_ApplicationConnectingUsers(BSTR AppName/*[in]*/, 
                                                            Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ApplicationConnectingUsers(BSTR AppName/*[in]*/);
  HRESULT         __fastcall DisconnectApplicationUser(BSTR AppName/*[in]*/, BSTR Username/*[in]*/);
  HRESULT         __fastcall SendApplicationDatagram(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/
                                                     , BSTR Text/*[in]*/);
  HRESULT         __fastcall get_ApplicationSendingStreams(BSTR AppName/*[in]*/, 
                                                           Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationSendingStreams(BSTR AppName/*[in]*/);
  HRESULT         __fastcall get_ApplicationReceivedStreams(BSTR AppName/*[in]*/, 
                                                            Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IApplicationStreamCollection* __fastcall get_ApplicationReceivedStreams(BSTR AppName/*[in]*/);

};
typedef ISkypeApplicationDispT<ISkypeApplication> ISkypeApplicationDisp;

typedef TComInterface<ISkypeCall>  TCOMISkypeCall;

// *********************************************************************//
// DispIntf:  ISkypeCall
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54590FC3-0405-4A2D-B4A5-BEAC026577F2}
// *********************************************************************//
template<class T>
class ISkypeCallDispT : public TAutoDriver<ISkypeCall>
{
public:
  ISkypeCallDispT(){}

  ISkypeCallDispT(ISkypeCall *pintf)
  {
    TAutoDriver<ISkypeCall>::Bind(pintf, false);
  }

  ISkypeCallDispT(ISkypeCallPtr pintf)
  {
    TAutoDriver<ISkypeCall>::Bind(pintf, true);
  }

  ISkypeCallDispT& operator=(ISkypeCall *pintf)
  {
    TAutoDriver<ISkypeCall>::Bind(pintf, false);
    return *this;
  }

  ISkypeCallDispT& operator=(ISkypeCallPtr pintf)
  {
    TAutoDriver<ISkypeCall>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_CallTimestamp(BSTR CallId/*[in]*/, DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_CallTimestamp(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallPartnerHandle(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallPartnerHandle(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallPartnerDisplayName(BSTR CallId/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallPartnerDisplayName(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallConferenceId(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallConferenceId(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallType(BSTR CallId/*[in]*/, 
                                          Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallType __fastcall get_CallType(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallStatus(BSTR CallId/*[in]*/, 
                                            Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_CallStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall set_CallStatus(BSTR CallId/*[in]*/, 
                                            Skype4comlib_tlb::TCallStatus pVal/*[in]*/);
  HRESULT         __fastcall get_CallFailureReason(BSTR CallId/*[in]*/, 
                                                   Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallFailureReason __fastcall get_CallFailureReason(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallSubject(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallSubject(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallPstnNumber(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallPstnNumber(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CallDuration(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallPstnStatus(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallPstnStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall set_CallSeenStatus(BSTR CallId/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall CallHold(BSTR CallId/*[in]*/);
  HRESULT         __fastcall CallResume(BSTR CallId/*[in]*/);
  HRESULT         __fastcall CallFinish(BSTR CallId/*[in]*/);
  HRESULT         __fastcall CallAnswer(BSTR CallId/*[in]*/);
  HRESULT         __fastcall set_CallDTMF(BSTR CallId/*[in]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_CallParticipants(BSTR CallId/*[in]*/, 
                                                  Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IParticipantCollection* __fastcall get_CallParticipants(BSTR CallId/*[in]*/);
  HRESULT         __fastcall CallJoin(BSTR CallId1/*[in]*/, BSTR CallId2/*[in]*/);
  HRESULT         __fastcall get_CallVmDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CallVmDuration(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallVmAllowedDuration(BSTR CallId/*[in]*/, 
                                                       long* pVal/*[out,retval]*/);
  long            __fastcall get_CallVmAllowedDuration(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallVideoStatus(BSTR CallId/*[in]*/, 
                                                 Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoStatus __fastcall get_CallVideoStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallVideoSendStatus(BSTR CallId/*[in]*/, 
                                                     Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_CallVideoSendStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallVideoReceiveStatus(BSTR CallId/*[in]*/, 
                                                        Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallVideoSendStatus __fastcall get_CallVideoReceiveStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall StartCallVideoSend(BSTR CallId/*[in]*/);
  HRESULT         __fastcall StopCallVideoSend(BSTR CallId/*[in]*/);
  HRESULT         __fastcall StartCallVideoReceive(BSTR CallId/*[in]*/);
  HRESULT         __fastcall StopCallVideoReceive(BSTR CallId/*[in]*/);
  HRESULT         __fastcall RedirectCallToVoicemail(BSTR CallId/*[in]*/);
  HRESULT         __fastcall ForwardCall(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallRate(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CallRate(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallRateCurrency(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallRateCurrency(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallRatePrecision(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CallRatePrecision(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallInputDevice(BSTR CallId/*[in]*/, 
                                                 Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                 , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallInputDevice(BSTR CallId/*[in]*/, 
                                                 Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_CallInputDevice(BSTR CallId/*[in]*/, 
                                                 Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                 , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                                  Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                  , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                                  Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_CallOutputDevice(BSTR CallId/*[in]*/, 
                                                  Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                  , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                                      Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                      , BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                                      Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/);
  HRESULT         __fastcall set_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                                      Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                                      , BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CallInputStatus(BSTR CallId/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallInputStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallForwardedBy(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallForwardedBy(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallSeenStatus(BSTR CallId/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallSeenStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/);
  HRESULT         __fastcall get_CallTransferStatus(BSTR CallId/*[in]*/, 
                                                    Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TCallStatus __fastcall get_CallTransferStatus(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallTransferActive(BSTR CallId/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallTransferActive(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallTransferredBy(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallTransferredBy(BSTR CallId/*[in]*/);
  HRESULT         __fastcall get_CallTransferredTo(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallTransferredTo(BSTR CallId/*[in]*/);
  HRESULT         __fastcall TransferCall(BSTR CallId/*[in]*/, BSTR Target/*[in]*/);
  HRESULT         __fastcall get_CallTargetIdentity(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CallTargetIdentity(BSTR CallId/*[in]*/);

};
typedef ISkypeCallDispT<ISkypeCall> ISkypeCallDisp;

typedef TComInterface<ISkypeChat>  TCOMISkypeChat;

// *********************************************************************//
// DispIntf:  ISkypeChat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F6758D2-1D3C-4A8F-BD99-6FC6B0E2DC8F}
// *********************************************************************//
template<class T>
class ISkypeChatDispT : public TAutoDriver<ISkypeChat>
{
public:
  ISkypeChatDispT(){}

  ISkypeChatDispT(ISkypeChat *pintf)
  {
    TAutoDriver<ISkypeChat>::Bind(pintf, false);
  }

  ISkypeChatDispT(ISkypeChatPtr pintf)
  {
    TAutoDriver<ISkypeChat>::Bind(pintf, true);
  }

  ISkypeChatDispT& operator=(ISkypeChat *pintf)
  {
    TAutoDriver<ISkypeChat>::Bind(pintf, false);
    return *this;
  }

  ISkypeChatDispT& operator=(ISkypeChatPtr pintf)
  {
    TAutoDriver<ISkypeChat>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ChatTimestamp(BSTR ChatName/*[in]*/, DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ChatTimestamp(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatAdder(BSTR ChatName/*[in]*/, 
                                           Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_ChatAdder(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatStatus(BSTR ChatName/*[in]*/, 
                                            Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatStatus __fastcall get_ChatStatus(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatPosters(BSTR ChatName/*[in]*/, 
                                             Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatPosters(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatMembers(BSTR ChatName/*[in]*/, 
                                             Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatMembers(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatTopic(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatTopic(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatTopic(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChatActiveMembers(BSTR ChatName/*[in]*/, 
                                                   Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatActiveMembers(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatFriendlyName(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatFriendlyName(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatMessages(BSTR ChatName/*[in]*/, 
                                              Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_ChatMessages(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall OpenChatWindow(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall SendChatMessage(BSTR ChatName/*[in]*/, BSTR MessageText/*[in]*/, 
                                             Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessage* __fastcall SendChatMessage(BSTR ChatName/*[in]*/, 
                                                             BSTR MessageText/*[in]*/);
  HRESULT         __fastcall LeaveChat(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall AddChatMembers(BSTR ChatName/*[in]*/, 
                                            Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall get_ChatRecentMessages(BSTR ChatName/*[in]*/, 
                                                    Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMessageCollection* __fastcall get_ChatRecentMessages(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatBookmarked(BSTR ChatName/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ChatBookmarked(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall BookmarkChat(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall UnbookmarkChat(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatTopicXML(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatTopicXML(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatTopicXML(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChatMemberObjects(BSTR ChatName/*[in]*/, 
                                                   Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChatMemberCollection* __fastcall get_ChatMemberObjects(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatBlob(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatBlob(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatOptions(BSTR ChatName/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_ChatOptions(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatOptions(BSTR ChatName/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_ChatPasswordHint(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatPasswordHint(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall SetChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/, 
                                             BSTR Hint/*[in,def,opt]*/);
  HRESULT         __fastcall get_ChatGuideLines(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatGuideLines(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatGuideLines(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChatDescription(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatDescription(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatDescription(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChatDialogPartner(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatDialogPartner(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatActivityTimestamp(BSTR ChatName/*[in]*/, 
                                                       DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ChatActivityTimestamp(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatMyRole(BSTR ChatName/*[in]*/, 
                                            Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMyRole(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatApplicants(BSTR ChatName/*[in]*/, 
                                                Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatApplicants(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall JoinChat(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall KickChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/);
  HRESULT         __fastcall KickBanChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/);
  HRESULT         __fastcall DisbandChat(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall EnterChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/);
  HRESULT         __fastcall ClearChatRecentMessages(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall AcceptSharedGroupAdd(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall set_ChatAlertString(BSTR ChatName/*[in]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall get_ChatType(BSTR ChatName/*[in]*/, 
                                          Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatType __fastcall get_ChatType(BSTR ChatName/*[in]*/);
  HRESULT         __fastcall get_ChatMyStatus(BSTR ChatName/*[in]*/, 
                                              Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMyStatus __fastcall get_ChatMyStatus(BSTR ChatName/*[in]*/);

};
typedef ISkypeChatDispT<ISkypeChat> ISkypeChatDisp;

typedef TComInterface<ISkypeChatMessage>  TCOMISkypeChatMessage;

// *********************************************************************//
// DispIntf:  ISkypeChatMessage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A569B841-CC8A-4C12-B937-CBC17D9E64F0}
// *********************************************************************//
template<class T>
class ISkypeChatMessageDispT : public TAutoDriver<ISkypeChatMessage>
{
public:
  ISkypeChatMessageDispT(){}

  ISkypeChatMessageDispT(ISkypeChatMessage *pintf)
  {
    TAutoDriver<ISkypeChatMessage>::Bind(pintf, false);
  }

  ISkypeChatMessageDispT(ISkypeChatMessagePtr pintf)
  {
    TAutoDriver<ISkypeChatMessage>::Bind(pintf, true);
  }

  ISkypeChatMessageDispT& operator=(ISkypeChatMessage *pintf)
  {
    TAutoDriver<ISkypeChatMessage>::Bind(pintf, false);
    return *this;
  }

  ISkypeChatMessageDispT& operator=(ISkypeChatMessagePtr pintf)
  {
    TAutoDriver<ISkypeChatMessage>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ChatMessageTimestamp(BSTR MessageId/*[in]*/, 
                                                      DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ChatMessageTimestamp(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageFromHandle(BSTR MessageId/*[in]*/, 
                                                       BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageFromHandle(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageType(BSTR MessageId/*[in]*/, 
                                                 Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageType __fastcall get_ChatMessageType(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageStatus(BSTR MessageId/*[in]*/, 
                                                   Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMessageStatus __fastcall get_ChatMessageStatus(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/, 
                                                        Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatLeaveReason __fastcall get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageBody(BSTR MessageId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageBody(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageChatname(BSTR MessageId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageChatname(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageUsers(BSTR MessageId/*[in]*/, 
                                                  Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUserCollection* __fastcall get_ChatMessageUsers(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall set_ChatMessageSeen(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_ChatMessageSender(BSTR MessageId/*[in]*/, 
                                                   Skype4comlib_tlb::IUser** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IUser* __fastcall get_ChatMessageSender(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageIsEditable(BSTR MessageId/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ChatMessageIsEditable(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageEditedBy(BSTR MessageId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageEditedBy(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageEditedTimestamp(BSTR MessageId, 
                                                            DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_ChatMessageEditedTimestamp(BSTR MessageId);
  HRESULT         __fastcall set_ChatMessageBody(BSTR MessageId/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChatMessageRole(BSTR MessageId/*[in]*/, 
                                                 Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMessageRole(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageOptons(BSTR MessageId/*[in]*/, 
                                                   long* pVal/*[out,retval]*/);
  long            __fastcall get_ChatMessageOptons(BSTR MessageId/*[in]*/);
  HRESULT         __fastcall get_ChatMessageGuid(BSTR MessageId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMessageGuid(BSTR MessageId/*[in]*/);

  __property   BSTR            ChatMessageSeen = {write = set_ChatMessageSeen};
};
typedef ISkypeChatMessageDispT<ISkypeChatMessage> ISkypeChatMessageDisp;

typedef TComInterface<ISkypeChatMember>  TCOMISkypeChatMember;

// *********************************************************************//
// DispIntf:  ISkypeChatMember
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6CF6DBDE-AB7C-4635-96ED-2FF525AB4457}
// *********************************************************************//
template<class T>
class ISkypeChatMemberDispT : public TAutoDriver<ISkypeChatMember>
{
public:
  ISkypeChatMemberDispT(){}

  ISkypeChatMemberDispT(ISkypeChatMember *pintf)
  {
    TAutoDriver<ISkypeChatMember>::Bind(pintf, false);
  }

  ISkypeChatMemberDispT(ISkypeChatMemberPtr pintf)
  {
    TAutoDriver<ISkypeChatMember>::Bind(pintf, true);
  }

  ISkypeChatMemberDispT& operator=(ISkypeChatMember *pintf)
  {
    TAutoDriver<ISkypeChatMember>::Bind(pintf, false);
    return *this;
  }

  ISkypeChatMemberDispT& operator=(ISkypeChatMemberPtr pintf)
  {
    TAutoDriver<ISkypeChatMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ChatMemberHandle(BSTR MemberId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChatMemberHandle(BSTR MemberId/*[in]*/);
  HRESULT         __fastcall get_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                                Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TChatMemberRole __fastcall get_ChatMemberRole(BSTR MemberId/*[in]*/);
  HRESULT         __fastcall set_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                                Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/);
  HRESULT         __fastcall get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                        Skype4comlib_tlb::TChatMemberRole Role/*[in]*/
                                                        , VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                        Skype4comlib_tlb::TChatMemberRole Role/*[in]*/);
  HRESULT         __fastcall get_IsChatMemberActive(BSTR MemberId/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsChatMemberActive(BSTR MemberId/*[in]*/);
  HRESULT         __fastcall get_ChatMemberChat(BSTR MemberId/*[in]*/, 
                                                Skype4comlib_tlb::IChat** pVal/*[out,retval]*/);
  Skype4comlib_tlb::IChat* __fastcall get_ChatMemberChat(BSTR MemberId/*[in]*/);

};
typedef ISkypeChatMemberDispT<ISkypeChatMember> ISkypeChatMemberDisp;

typedef TComInterface<ISkypeConference>  TCOMISkypeConference;

// *********************************************************************//
// DispIntf:  ISkypeConference
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30678F8A-C104-40C0-A6AE-7C150E83300E}
// *********************************************************************//
template<class T>
class ISkypeConferenceDispT : public TAutoDriver<ISkypeConference>
{
public:
  ISkypeConferenceDispT(){}

  ISkypeConferenceDispT(ISkypeConference *pintf)
  {
    TAutoDriver<ISkypeConference>::Bind(pintf, false);
  }

  ISkypeConferenceDispT(ISkypeConferencePtr pintf)
  {
    TAutoDriver<ISkypeConference>::Bind(pintf, true);
  }

  ISkypeConferenceDispT& operator=(ISkypeConference *pintf)
  {
    TAutoDriver<ISkypeConference>::Bind(pintf, false);
    return *this;
  }

  ISkypeConferenceDispT& operator=(ISkypeConferencePtr pintf)
  {
    TAutoDriver<ISkypeConference>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ConferenceCalls(BSTR ConfId/*[in]*/, 
                                                 Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_ConferenceCalls(BSTR ConfId/*[in]*/);
  HRESULT         __fastcall get_ConferenceActiveCalls(BSTR ConfId/*[in]*/, 
                                                       Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ICallCollection* __fastcall get_ConferenceActiveCalls(BSTR ConfId/*[in]*/);

};
typedef ISkypeConferenceDispT<ISkypeConference> ISkypeConferenceDisp;

typedef TComInterface<ISkypeFileTransfer>  TCOMISkypeFileTransfer;

// *********************************************************************//
// DispIntf:  ISkypeFileTransfer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B929860-6AF4-40DF-9D77-308CA7C23E66}
// *********************************************************************//
template<class T>
class ISkypeFileTransferDispT : public TAutoDriver<ISkypeFileTransfer>
{
public:
  ISkypeFileTransferDispT(){}

  ISkypeFileTransferDispT(ISkypeFileTransfer *pintf)
  {
    TAutoDriver<ISkypeFileTransfer>::Bind(pintf, false);
  }

  ISkypeFileTransferDispT(ISkypeFileTransferPtr pintf)
  {
    TAutoDriver<ISkypeFileTransfer>::Bind(pintf, true);
  }

  ISkypeFileTransferDispT& operator=(ISkypeFileTransfer *pintf)
  {
    TAutoDriver<ISkypeFileTransfer>::Bind(pintf, false);
    return *this;
  }

  ISkypeFileTransferDispT& operator=(ISkypeFileTransferPtr pintf)
  {
    TAutoDriver<ISkypeFileTransfer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_FileTransferType(BSTR TransferId/*[in]*/, 
                                                  Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferType __fastcall get_FileTransferType(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferStatus(BSTR TransferId/*[in]*/, 
                                                    Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferStatus __fastcall get_FileTransferStatus(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferFailureReason(BSTR TransferId/*[in]*/, 
                                                           Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TFileTransferFailureReason __fastcall get_FileTransferFailureReason(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/, 
                                                                BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferStartTime(BSTR TransferId/*[in]*/, 
                                                       DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_FileTransferStartTime(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferFinishTime(BSTR TransferId/*[in]*/, 
                                                        DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_FileTransferFinishTime(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferFilePath(BSTR TransferId/*[in]*/, 
                                                      BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferFilePath(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferFileName(BSTR TransferId/*[in]*/, 
                                                      BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferFileName(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/, 
                                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/);
  HRESULT         __fastcall get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/, 
                                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/);

};
typedef ISkypeFileTransferDispT<ISkypeFileTransfer> ISkypeFileTransferDisp;

typedef TComInterface<ISkypeSms>  TCOMISkypeSms;

// *********************************************************************//
// DispIntf:  ISkypeSms
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D0B4547-771D-4C4F-B3E8-98A33FD24D2B}
// *********************************************************************//
template<class T>
class ISkypeSmsDispT : public TAutoDriver<ISkypeSms>
{
public:
  ISkypeSmsDispT(){}

  ISkypeSmsDispT(ISkypeSms *pintf)
  {
    TAutoDriver<ISkypeSms>::Bind(pintf, false);
  }

  ISkypeSmsDispT(ISkypeSmsPtr pintf)
  {
    TAutoDriver<ISkypeSms>::Bind(pintf, true);
  }

  ISkypeSmsDispT& operator=(ISkypeSms *pintf)
  {
    TAutoDriver<ISkypeSms>::Bind(pintf, false);
    return *this;
  }

  ISkypeSmsDispT& operator=(ISkypeSmsPtr pintf)
  {
    TAutoDriver<ISkypeSms>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SmsMessageType(BSTR SmsId/*[in]*/, 
                                                Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageType __fastcall get_SmsMessageType(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsMessageStatus(BSTR SmsId/*[in]*/, 
                                                  Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsMessageStatus __fastcall get_SmsMessageStatus(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsFailureReason(BSTR SmsId/*[in]*/, 
                                                  Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsFailureReason __fastcall get_SmsFailureReason(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall set_SmsSeen(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_SmsPrice(BSTR SmsId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SmsPrice(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsPriceCurrency(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SmsPriceCurrency(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsPricePrecision(BSTR SmsId/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SmsPricePrecision(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsReplyToNumber(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SmsReplyToNumber(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall set_SmsReplyToNumber(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SmsTargets(BSTR SmsId/*[in]*/, 
                                            Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsTargetCollection* __fastcall get_SmsTargets(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsBody(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SmsBody(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall set_SmsBody(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SmsChunks(BSTR SmsId/*[in]*/, 
                                           Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/);
  Skype4comlib_tlb::ISmsChunkCollection* __fastcall get_SmsChunks(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall SendSmsMessage(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall DeleteSmsMessage(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsTargetStatus(BSTR SmsId/*[in]*/, BSTR Number/*[in]*/, 
                                                 Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TSmsTargetStatus __fastcall get_SmsTargetStatus(BSTR SmsId/*[in]*/, 
                                                                    BSTR Number/*[in]*/);
  HRESULT         __fastcall get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/, 
                                              BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/);
  HRESULT         __fastcall get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/, 
                                                        long* pVal/*[out,retval]*/);
  long            __fastcall get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/);
  HRESULT         __fastcall get_SmsTimestamp(BSTR SmsId/*[in]*/, DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_SmsTimestamp(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall get_SmsTargetNumbers(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SmsTargetNumbers(BSTR SmsId/*[in]*/);
  HRESULT         __fastcall set_SmsTargetNumbers(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/);

  __property   BSTR            SmsSeen = {write = set_SmsSeen};
};
typedef ISkypeSmsDispT<ISkypeSms> ISkypeSmsDisp;

typedef TComInterface<ISkypeUser>  TCOMISkypeUser;

// *********************************************************************//
// DispIntf:  ISkypeUser
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C219279C-F557-4BAD-B3BE-750E91CA9944}
// *********************************************************************//
template<class T>
class ISkypeUserDispT : public TAutoDriver<ISkypeUser>
{
public:
  ISkypeUserDispT(){}

  ISkypeUserDispT(ISkypeUser *pintf)
  {
    TAutoDriver<ISkypeUser>::Bind(pintf, false);
  }

  ISkypeUserDispT(ISkypeUserPtr pintf)
  {
    TAutoDriver<ISkypeUser>::Bind(pintf, true);
  }

  ISkypeUserDispT& operator=(ISkypeUser *pintf)
  {
    TAutoDriver<ISkypeUser>::Bind(pintf, false);
    return *this;
  }

  ISkypeUserDispT& operator=(ISkypeUserPtr pintf)
  {
    TAutoDriver<ISkypeUser>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_UserFullName(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserFullName(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserBirthday(BSTR Username/*[in]*/, DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_UserBirthday(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserSex(BSTR Username/*[in]*/, 
                                         Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TUserSex __fastcall get_UserSex(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserCountry(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserCountry(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserProvince(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserProvince(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserCity(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserCity(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserPhoneHome(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserPhoneHome(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserPhoneOffice(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserPhoneOffice(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserPhoneMobile(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserPhoneMobile(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserHomepage(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserHomepage(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserAbout(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserAbout(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserHasCallEquipment(BSTR Username/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserHasCallEquipment(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserBuddyStatus(BSTR Username/*[in]*/, 
                                                 Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TBuddyStatus __fastcall get_UserBuddyStatus(BSTR Username/*[in]*/);
  HRESULT         __fastcall set_UserBuddyStatus(BSTR Username/*[in]*/, 
                                                 Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/);
  HRESULT         __fastcall get_UserIsAuthorized(BSTR Username/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserIsAuthorized(BSTR Username/*[in]*/);
  HRESULT         __fastcall set_UserIsAuthorized(BSTR Username/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_UserIsBlocked(BSTR Username/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserIsBlocked(BSTR Username/*[in]*/);
  HRESULT         __fastcall set_UserIsBlocked(BSTR Username/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_UserDisplayName(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserDisplayName(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserOnlineStatus(BSTR Username/*[in]*/, 
                                                  Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TOnlineStatus __fastcall get_UserOnlineStatus(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserLastOnline(BSTR Username/*[in]*/, DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_UserLastOnline(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserCountryCode(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserCountryCode(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserReceivedAuthRequest(BSTR Username/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserReceivedAuthRequest(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserSpeedDial(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserSpeedDial(BSTR Username/*[in]*/);
  HRESULT         __fastcall set_UserSpeedDial(BSTR Username/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UserCanLeaveVoicemail(BSTR Username/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserCanLeaveVoicemail(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserMoodText(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserMoodText(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserAliases(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserAliases(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserTimezone(BSTR Username/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_UserTimezone(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_IsCallForwardActive(BSTR Username/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsCallForwardActive(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserLanguage(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserLanguage(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserLanguageCode(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserLanguageCode(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserIsVideoCapable(BSTR Username/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserIsVideoCapable(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/, 
                                                         long* pVal/*[out,retval]*/);
  long            __fastcall get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/);
  HRESULT         __fastcall set_UserDisplayName(BSTR Username/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UserRichMoodText(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserRichMoodText(BSTR Username/*[in]*/);
  HRESULT         __fastcall get_UserIsVoicemailCapable(BSTR Username/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserIsVoicemailCapable(BSTR Username/*[in]*/);

};
typedef ISkypeUserDispT<ISkypeUser> ISkypeUserDisp;

typedef TComInterface<ISkypeVoicemail>  TCOMISkypeVoicemail;

// *********************************************************************//
// DispIntf:  ISkypeVoicemail
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D33E14E-9921-4860-92F4-5DC1586F403C}
// *********************************************************************//
template<class T>
class ISkypeVoicemailDispT : public TAutoDriver<ISkypeVoicemail>
{
public:
  ISkypeVoicemailDispT(){}

  ISkypeVoicemailDispT(ISkypeVoicemail *pintf)
  {
    TAutoDriver<ISkypeVoicemail>::Bind(pintf, false);
  }

  ISkypeVoicemailDispT(ISkypeVoicemailPtr pintf)
  {
    TAutoDriver<ISkypeVoicemail>::Bind(pintf, true);
  }

  ISkypeVoicemailDispT& operator=(ISkypeVoicemail *pintf)
  {
    TAutoDriver<ISkypeVoicemail>::Bind(pintf, false);
    return *this;
  }

  ISkypeVoicemailDispT& operator=(ISkypeVoicemailPtr pintf)
  {
    TAutoDriver<ISkypeVoicemail>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_VoicemailType(BSTR VoicemailId/*[in]*/, 
                                               Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailType __fastcall get_VoicemailType(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/, 
                                                        BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailStatus(BSTR VoicemailId/*[in]*/, 
                                                 Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailStatus __fastcall get_VoicemailStatus(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/, 
                                                        Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/);
  Skype4comlib_tlb::TVoicemailFailureReason __fastcall get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/, 
                                                    DATE* pVal/*[out,retval]*/);
  DATE            __fastcall get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailDuration(BSTR VoicemailId/*[in]*/, 
                                                   long* pVal/*[out,retval]*/);
  long            __fastcall get_VoicemailDuration(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/, 
                                                          long* pVal/*[out,retval]*/);
  long            __fastcall get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall OpenVoicemail(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall StartVoicemailPlayback(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall StopVoicemailPlayback(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall UploadVoicemail(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall DownloadVoicemail(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall StartVoicemailRecording(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall StopVoicemailRecording(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall DeleteVoicemail(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall StartVoicemailPlaybackInCall(BSTR VoicemailId/*[in]*/);
  HRESULT         __fastcall SetVoicemailUnplayed(BSTR VoicemailId/*[in]*/);

};
typedef ISkypeVoicemailDispT<ISkypeVoicemail> ISkypeVoicemailDisp;

// *********************************************************************//
// DispIntf:  _ISkypeEvents
// Flags:     (4096) Dispatchable
// GUID:      {F4F90CDD-C620-4118-945E-CAA1BBEBA435}
// *********************************************************************//
template <class T>
class _ISkypeEventsDispT : public TAutoDriver<_ISkypeEvents>
{
public:
  _ISkypeEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall Command(Skype4comlib_tlb::ICommand* pCommand/*[in]*/);
  HRESULT         __fastcall Reply(Skype4comlib_tlb::ICommand* pCommand/*[in]*/);
  HRESULT         __fastcall Error(Skype4comlib_tlb::ICommand* pCommand/*[in]*/, long Number/*[in]*/
                                   , BSTR Description/*[in]*/);
  HRESULT         __fastcall AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/);
  HRESULT         __fastcall ConnectionStatus(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/);
  HRESULT         __fastcall UserStatus(Skype4comlib_tlb::TUserStatus Status/*[in]*/);
  HRESULT         __fastcall OnlineStatus(Skype4comlib_tlb::IUser* pUser/*[in]*/, 
                                          Skype4comlib_tlb::TOnlineStatus Status/*[in]*/);
  HRESULT         __fastcall CallStatus(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                        Skype4comlib_tlb::TCallStatus Status/*[in]*/);
  HRESULT         __fastcall CallHistory();
  HRESULT         __fastcall Mute(VARIANT_BOOL Mute/*[in]*/);
  HRESULT         __fastcall MessageStatus(Skype4comlib_tlb::IChatMessage* pMessage/*[in]*/, 
                                           Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/);
  HRESULT         __fastcall MessageHistory(BSTR Username/*[in]*/);
  HRESULT         __fastcall AutoAway(VARIANT_BOOL Automatic/*[in]*/);
  HRESULT         __fastcall CallDtmfReceived(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                              BSTR code/*[in]*/);
  HRESULT         __fastcall VoicemailStatus(Skype4comlib_tlb::IVoicemail* pMail/*[in]*/, 
                                             Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/);
  HRESULT         __fastcall ApplicationConnecting(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                                   Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/);
  HRESULT         __fastcall ApplicationStreams(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                                Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/);
  HRESULT         __fastcall ApplicationDatagram(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                                 Skype4comlib_tlb::IApplicationStream* pStream/*[in]*/
                                                 , BSTR Text/*[in]*/);
  HRESULT         __fastcall ApplicationSending(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                                Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/);
  HRESULT         __fastcall ApplicationReceiving(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                                  Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/);
  HRESULT         __fastcall ContactsFocused(BSTR Username/*[in]*/);
  HRESULT         __fastcall GroupVisible(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                          VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall GroupExpanded(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                           VARIANT_BOOL Expanded/*[in]*/);
  HRESULT         __fastcall GroupUsers(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                        Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/);
  HRESULT         __fastcall GroupDeleted(long GroupId/*[in]*/);
  HRESULT         __fastcall UserMood(Skype4comlib_tlb::IUser* pUser/*[in]*/, BSTR MoodText/*[in]*/);
  HRESULT         __fastcall SmsMessageStatusChanged(Skype4comlib_tlb::ISmsMessage* pMessage/*[in]*/
                                                     , 
                                                     Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/);
  HRESULT         __fastcall SmsTargetStatusChanged(Skype4comlib_tlb::ISmsTarget* pTarget/*[in]*/, 
                                                    Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/);
  HRESULT         __fastcall CallInputStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                    VARIANT_BOOL Status/*[in]*/);
  HRESULT         __fastcall AsyncSearchUsersFinished(long Cookie/*[in]*/, 
                                                      Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/);
  HRESULT         __fastcall CallSeenStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                   VARIANT_BOOL Status);
  HRESULT         __fastcall PluginEventClicked(Skype4comlib_tlb::IPluginEvent* pEvent/*[in]*/);
  HRESULT         __fastcall PluginMenuItemClicked(Skype4comlib_tlb::IPluginMenuItem* pMenuItem/*[in]*/
                                                   , 
                                                   Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/
                                                   , 
                                                   Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/
                                                   , BSTR ContextId/*[in]*/);
  HRESULT         __fastcall WallpaperChanged(BSTR Path/*[in]*/);
  HRESULT         __fastcall FileTransferStatusChanged(Skype4comlib_tlb::IFileTransfer* pTransfer/*[in]*/
                                                       , 
                                                       Skype4comlib_tlb::TFileTransferStatus Status/*[in]*/);
  HRESULT         __fastcall CallTransferStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                       Skype4comlib_tlb::TCallStatus Status/*[in]*/);
  HRESULT         __fastcall ChatMembersChanged(Skype4comlib_tlb::IChat* pChat/*[in]*/, 
                                                Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/);
  HRESULT         __fastcall ChatMemberRoleChanged(Skype4comlib_tlb::IChatMember* pMember/*[in]*/, 
                                                   Skype4comlib_tlb::TChatMemberRole Role/*[in]*/);
  HRESULT         __fastcall CallVideoStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                    Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/);
  HRESULT         __fastcall CallVideoSendStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                        Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/);
  HRESULT         __fastcall CallVideoReceiveStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                           Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/);
  HRESULT         __fastcall SilentModeStatusChanged(VARIANT_BOOL Silent/*[in]*/);
  HRESULT         __fastcall UILanguageChanged(BSTR code/*[in]*/);
  HRESULT         __fastcall UserAuthorizationRequestReceived(Skype4comlib_tlb::IUser* pUser/*[in]*/);

};
typedef _ISkypeEventsDispT<_ISkypeEvents> _ISkypeEventsDisp;

// *********************************************************************//
// DispIntf:  _ICallChannelManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {497ABB45-20AE-49D1-A39D-CBE84A31B20C}
// *********************************************************************//
template <class T>
class _ICallChannelManagerEventsDispT : public TAutoDriver<_ICallChannelManagerEvents>
{
public:
  _ICallChannelManagerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall Channels(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/, 
                                      Skype4comlib_tlb::ICallChannelCollection* pChannels/*[in]*/);
  HRESULT         __fastcall Message(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/, 
                                     Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/, 
                                     Skype4comlib_tlb::ICallChannelMessage* pMessage/*[in]*/);
  HRESULT         __fastcall Created();

};
typedef _ICallChannelManagerEventsDispT<_ICallChannelManagerEvents> _ICallChannelManagerEventsDisp;

typedef TComInterface<ISkypePlugin>  TCOMISkypePlugin;

// *********************************************************************//
// DispIntf:  ISkypePlugin
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B77A3D1F-6847-402F-BB82-A0564379088E}
// *********************************************************************//
template<class T>
class ISkypePluginDispT : public TAutoDriver<ISkypePlugin>
{
public:
  ISkypePluginDispT(){}

  ISkypePluginDispT(ISkypePlugin *pintf)
  {
    TAutoDriver<ISkypePlugin>::Bind(pintf, false);
  }

  ISkypePluginDispT(ISkypePluginPtr pintf)
  {
    TAutoDriver<ISkypePlugin>::Bind(pintf, true);
  }

  ISkypePluginDispT& operator=(ISkypePlugin *pintf)
  {
    TAutoDriver<ISkypePlugin>::Bind(pintf, false);
    return *this;
  }

  ISkypePluginDispT& operator=(ISkypePluginPtr pintf)
  {
    TAutoDriver<ISkypePlugin>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall CreatePluginEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                               BSTR Hint/*[in]*/, 
                                               Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/);
  Skype4comlib_tlb::IPluginEvent* __fastcall CreatePluginEvent(BSTR EventId/*[in]*/, 
                                                               BSTR Caption/*[in]*/, 
                                                               BSTR Hint/*[in]*/);
  HRESULT         __fastcall DeletePluginEvent(BSTR EventId/*[in]*/);
  HRESULT         __fastcall CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                  Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/
                                                  , BSTR CaptionText/*[in]*/, 
                                                  BSTR HintText/*[in,def,opt]*/, 
                                                  BSTR IconPath/*[in,def,opt]*/, 
                                                  VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                  Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/
                                                  , VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                                  Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/);
  Skype4comlib_tlb::IPluginMenuItem* __fastcall CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                                     Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                                                     BSTR CaptionText/*[in]*/, 
                                                                     BSTR HintText/*[in,def,opt]*/, 
                                                                     BSTR IconPath/*[in,def,opt]*/, 
                                                                     VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                                                     Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                                                     VARIANT_BOOL MultipleContacts/*[in,def,opt]*/);
  HRESULT         __fastcall DeletePluginMenuItem(BSTR MenuItemId/*[in]*/);
  HRESULT         __fastcall set_PluginMenuItemCaption(BSTR MenuItemId/*[in]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall set_PluginMenuItemHint(BSTR MenuItemId/*[in]*/, BSTR Param2/*[in]*/);
  HRESULT         __fastcall EnablePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                                  VARIANT_BOOL Enabled/*[in]*/);

};
typedef ISkypePluginDispT<ISkypePlugin> ISkypePluginDisp;

// *********************************************************************//
// SmartIntf: TCOMIApplication
// Interface: IApplication
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMIApplicationT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::Create(void)
{
  return (*this)->Create();
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_Streams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Streams(pVal);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_Streams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Streams(IApplicationStreamCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall
TCOMIApplicationT<T>::get_Streams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  OLECHECK(this->get_Streams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
  return (Skype4comlib_tlb::IApplicationStreamCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ConnectableUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ConnectableUsers(pVal);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ConnectableUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ConnectableUsers(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIApplicationT<T>::get_ConnectableUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_ConnectableUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ConnectingUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ConnectingUsers(pVal);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ConnectingUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ConnectingUsers(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIApplicationT<T>::get_ConnectingUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_ConnectingUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::Connect(BSTR Username/*[in]*/, VARIANT_BOOL WaitConnected/*[in,def,opt]*/)
{
  return (*this)->Connect(Username, WaitConnected);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_SendingStreams(pVal);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_SendingStreams(IApplicationStreamCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall
TCOMIApplicationT<T>::get_SendingStreams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  OLECHECK(this->get_SendingStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
  return (Skype4comlib_tlb::IApplicationStreamCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ReceivedStreams(pVal);
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ReceivedStreams(IApplicationStreamCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollectionPtr __fastcall
TCOMIApplicationT<T>::get_ReceivedStreams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  OLECHECK(this->get_ReceivedStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal));
  return (Skype4comlib_tlb::IApplicationStreamCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationT<T>::SendDatagram(BSTR Text/*[in]*/, 
                                   Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in,def,opt]*/)
{
  return (*this)->SendDatagram(Text, pStreams);
}

// *********************************************************************//
// DispIntf:  IApplication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9ADA565-2FAD-424D-878C-7AD12DF9E617}
// *********************************************************************//
template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IApplicationDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::Create()
{
  _TDispID _dispid(*this, OLETEXT("Create"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_Streams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Streams"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
IApplicationDispT<T>::get_Streams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_Streams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_ConnectableUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectableUsers"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IApplicationDispT<T>::get_ConnectableUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ConnectableUsers((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_ConnectingUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingUsers"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IApplicationDispT<T>::get_ConnectingUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ConnectingUsers((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::Connect(BSTR Username/*[in]*/, VARIANT_BOOL WaitConnected/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = WaitConnected /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_SendingStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendingStreams"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
IApplicationDispT<T>::get_SendingStreams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_SendingStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::get_ReceivedStreams(Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceivedStreams"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
IApplicationDispT<T>::get_ReceivedStreams(void)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_ReceivedStreams((Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationDispT<T>::SendDatagram(BSTR Text/*[in]*/, 
                                   Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendDatagram"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIApplicationStreamCollection
// Interface: IApplicationStreamCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIApplicationStreamCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::Add(Skype4comlib_tlb::IApplicationStream* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::get_Item(long Index/*[in]*/, 
                                               Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IApplicationStream* __fastcall
TCOMIApplicationStreamCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IApplicationStream* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IApplicationStream**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIApplicationStreamCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IApplicationStreamCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D8F1BCC4-2A73-47B9-83B3-D4D299CA5BC6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IApplicationStreamCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::Add(Skype4comlib_tlb::IApplicationStream* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStream*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                               Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStream**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStream* __fastcall
IApplicationStreamCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IApplicationStream* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IApplicationStream**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationStreamCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IApplicationStreamCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIApplicationStream
// Interface: IApplicationStream
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::get_ApplicationName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ApplicationName(pVal);
}

template <class T> BSTR __fastcall
TCOMIApplicationStreamT<T>::get_ApplicationName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ApplicationName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Handle(pVal);
}

template <class T> BSTR __fastcall
TCOMIApplicationStreamT<T>::get_Handle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Handle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::Read(BSTR* pText/*[out,retval]*/)
{
  return (*this)->Read(pText);
}

template <class T> BSTR __fastcall
TCOMIApplicationStreamT<T>::Read(void)
{
  BSTR pText = 0;
  OLECHECK(this->Read((BSTR*)&pText));
  return pText;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::Write(BSTR Text/*[in]*/)
{
  return (*this)->Write(Text);
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::SendDatagram(BSTR Text/*[in]*/)
{
  return (*this)->SendDatagram(Text);
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::get_DataLength(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DataLength(pVal);
}

template <class T> long __fastcall
TCOMIApplicationStreamT<T>::get_DataLength(void)
{
  long pVal;
  OLECHECK(this->get_DataLength((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMIApplicationStreamT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PartnerHandle(pVal);
}

template <class T> BSTR __fastcall
TCOMIApplicationStreamT<T>::get_PartnerHandle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IApplicationStream
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E072F615-F833-4BCA-B473-CEE44D302030}
// *********************************************************************//
template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::get_ApplicationName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IApplicationStreamDispT<T>::get_ApplicationName(void)
{
  BSTR pVal;
  this->get_ApplicationName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Handle"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IApplicationStreamDispT<T>::get_Handle(void)
{
  BSTR pVal;
  this->get_Handle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::Read(BSTR* pText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Read"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pText /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IApplicationStreamDispT<T>::Read(void)
{
  BSTR pText;
  this->Read((BSTR*)&pText);
  return pText;
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::Write(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Write"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::SendDatagram(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendDatagram"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::get_DataLength(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataLength"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IApplicationStreamDispT<T>::get_DataLength(void)
{
  long pVal;
  this->get_DataLength((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IApplicationStreamDispT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerHandle"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IApplicationStreamDispT<T>::get_PartnerHandle(void)
{
  BSTR pVal;
  this->get_PartnerHandle((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIUserCollection
// Interface: IUserCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIUserCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::Add(Skype4comlib_tlb::IUser* pUser/*[in]*/)
{
  return (*this)->Add(pUser);
}

template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
TCOMIUserCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IUser**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIUserCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IUserCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC163200-44EB-483B-907F-A8C1CF56B8EE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUserCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::Add(Skype4comlib_tlb::IUser* pUser/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
IUserCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IUserCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIUser
// Interface: IUser
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Handle(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Handle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Handle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_Handle(BSTR pVal/*[in]*/)
{
  return (*this)->set_Handle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FullName(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_FullName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FullName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Birthday(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Birthday(pVal);
}

template <class T> DATE __fastcall
TCOMIUserT<T>::get_Birthday(void)
{
  DATE pVal;
  OLECHECK(this->get_Birthday((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  return (*this)->get_Sex(pVal);
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
TCOMIUserT<T>::get_Sex(void)
{
  Skype4comlib_tlb::TUserSex pVal;
  OLECHECK(this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Country(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Country(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Country((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Province(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Province(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Province((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_City(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_City(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_City((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_PhoneHome(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneHome(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_PhoneHome(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneHome((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_PhoneOffice(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneOffice(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_PhoneOffice(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneOffice((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_PhoneMobile(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneMobile(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_PhoneMobile(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneMobile((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Homepage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Homepage(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Homepage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Homepage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_About(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_About(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_About(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_About((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_HasCallEquipment(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_HasCallEquipment(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_HasCallEquipment(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_HasCallEquipment(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_HasCallEquipment(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_HasCallEquipment((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_BuddyStatus(Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_BuddyStatus(pVal);
}

template <class T> Skype4comlib_tlb::TBuddyStatus __fastcall
TCOMIUserT<T>::get_BuddyStatus(void)
{
  Skype4comlib_tlb::TBuddyStatus pVal;
  OLECHECK(this->get_BuddyStatus((Skype4comlib_tlb::TBuddyStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_BuddyStatus(Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/)
{
  return (*this)->set_BuddyStatus(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsAuthorized(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsAuthorized(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsAuthorized(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsAuthorized(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsAuthorized(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsAuthorized((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_IsAuthorized(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsAuthorized(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_IsAuthorized(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_IsAuthorized(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsBlocked(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsBlocked(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsBlocked(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsBlocked(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsBlocked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsBlocked((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_IsBlocked(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsBlocked(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_IsBlocked(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_IsBlocked(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_DisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_OnlineStatus(Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_OnlineStatus(pVal);
}

template <class T> Skype4comlib_tlb::TOnlineStatus __fastcall
TCOMIUserT<T>::get_OnlineStatus(void)
{
  Skype4comlib_tlb::TOnlineStatus pVal;
  OLECHECK(this->get_OnlineStatus((Skype4comlib_tlb::TOnlineStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_LastOnline(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_LastOnline(pVal);
}

template <class T> DATE __fastcall
TCOMIUserT<T>::get_LastOnline(void)
{
  DATE pVal;
  OLECHECK(this->get_LastOnline((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_CountryCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CountryCode(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_CountryCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CountryCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_ReceivedAuthRequest(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ReceivedAuthRequest(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_ReceivedAuthRequest(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ReceivedAuthRequest((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_SpeedDial(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SpeedDial(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_SpeedDial(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SpeedDial((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_SpeedDial(BSTR pVal/*[in]*/)
{
  return (*this)->set_SpeedDial(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_CanLeaveVoicemail(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CanLeaveVoicemail(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_CanLeaveVoicemail(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CanLeaveVoicemail(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_CanLeaveVoicemail(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_CanLeaveVoicemail((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_MoodText(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_MoodText(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_MoodText(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_MoodText((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Aliases(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Aliases(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Aliases(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Aliases((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Timezone(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Timezone(pVal);
}

template <class T> long __fastcall
TCOMIUserT<T>::get_Timezone(void)
{
  long pVal;
  OLECHECK(this->get_Timezone((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsCallForwardActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsCallForwardActive(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsCallForwardActive(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsCallForwardActive(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsCallForwardActive(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsCallForwardActive((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Language(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Language(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Language((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_LanguageCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LanguageCode(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_LanguageCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LanguageCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsVideoCapable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVideoCapable(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsVideoCapable(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVideoCapable(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsVideoCapable(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsVideoCapable((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsSkypeOutContact(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsSkypeOutContact(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsSkypeOutContact(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsSkypeOutContact(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsSkypeOutContact(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsSkypeOutContact((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_NumberOfAuthBuddies(long* pVal/*[out,retval]*/)
{
  return (*this)->get_NumberOfAuthBuddies(pVal);
}

template <class T> long __fastcall
TCOMIUserT<T>::get_NumberOfAuthBuddies(void)
{
  long pVal;
  OLECHECK(this->get_NumberOfAuthBuddies((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_DisplayName(BSTR pVal/*[in]*/)
{
  return (*this)->set_DisplayName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_RichMoodText(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RichMoodText(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_RichMoodText(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RichMoodText((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsVoicemailCapable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVoicemailCapable(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsVoicemailCapable(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVoicemailCapable(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIUserT<T>::get_IsVoicemailCapable(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsVoicemailCapable((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

// *********************************************************************//
// DispIntf:  IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0BC5168-A518-4192-9D20-0B907B23C4D1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUserDispT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Handle"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Handle(void)
{
  BSTR pVal;
  this->get_Handle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_Handle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Handle"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_FullName(void)
{
  BSTR pVal;
  this->get_FullName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Birthday(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Birthday"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IUserDispT<T>::get_Birthday(void)
{
  DATE pVal;
  this->get_Birthday((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sex"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
IUserDispT<T>::get_Sex(void)
{
  Skype4comlib_tlb::TUserSex pVal;
  this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Country"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Country(void)
{
  BSTR pVal;
  this->get_Country((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Province"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Province(void)
{
  BSTR pVal;
  this->get_Province((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("City"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_City(void)
{
  BSTR pVal;
  this->get_City((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_PhoneHome(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneHome"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_PhoneHome(void)
{
  BSTR pVal;
  this->get_PhoneHome((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_PhoneOffice(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneOffice"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_PhoneOffice(void)
{
  BSTR pVal;
  this->get_PhoneOffice((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_PhoneMobile(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneMobile"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_PhoneMobile(void)
{
  BSTR pVal;
  this->get_PhoneMobile((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Homepage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Homepage"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Homepage(void)
{
  BSTR pVal;
  this->get_Homepage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_About(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("About"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_About(void)
{
  BSTR pVal;
  this->get_About((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_HasCallEquipment(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasCallEquipment"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_HasCallEquipment(void)
{
  VARIANT_BOOL pVal;
  this->get_HasCallEquipment((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_BuddyStatus(Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuddyStatus"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TBuddyStatus __fastcall
IUserDispT<T>::get_BuddyStatus(void)
{
  Skype4comlib_tlb::TBuddyStatus pVal;
  this->get_BuddyStatus((Skype4comlib_tlb::TBuddyStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_BuddyStatus(Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuddyStatus"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsAuthorized(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAuthorized"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsAuthorized(void)
{
  VARIANT_BOOL pVal;
  this->get_IsAuthorized((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_IsAuthorized(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAuthorized"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsBlocked(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBlocked"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsBlocked(void)
{
  VARIANT_BOOL pVal;
  this->get_IsBlocked((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_IsBlocked(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBlocked"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_DisplayName(void)
{
  BSTR pVal;
  this->get_DisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_OnlineStatus(Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnlineStatus"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TOnlineStatus __fastcall
IUserDispT<T>::get_OnlineStatus(void)
{
  Skype4comlib_tlb::TOnlineStatus pVal;
  this->get_OnlineStatus((Skype4comlib_tlb::TOnlineStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_LastOnline(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastOnline"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IUserDispT<T>::get_LastOnline(void)
{
  DATE pVal;
  this->get_LastOnline((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_CountryCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountryCode"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_CountryCode(void)
{
  BSTR pVal;
  this->get_CountryCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_ReceivedAuthRequest(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceivedAuthRequest"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_ReceivedAuthRequest(void)
{
  BSTR pVal;
  this->get_ReceivedAuthRequest((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_SpeedDial(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeedDial"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_SpeedDial(void)
{
  BSTR pVal;
  this->get_SpeedDial((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_SpeedDial(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeedDial"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_CanLeaveVoicemail(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanLeaveVoicemail"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_CanLeaveVoicemail(void)
{
  VARIANT_BOOL pVal;
  this->get_CanLeaveVoicemail((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_MoodText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoodText"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_MoodText(void)
{
  BSTR pVal;
  this->get_MoodText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Aliases(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Aliases"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Aliases(void)
{
  BSTR pVal;
  this->get_Aliases((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Timezone(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timezone"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUserDispT<T>::get_Timezone(void)
{
  long pVal;
  this->get_Timezone((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsCallForwardActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsCallForwardActive"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsCallForwardActive(void)
{
  VARIANT_BOOL pVal;
  this->get_IsCallForwardActive((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Language(void)
{
  BSTR pVal;
  this->get_Language((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_LanguageCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageCode"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_LanguageCode(void)
{
  BSTR pVal;
  this->get_LanguageCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsVideoCapable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVideoCapable"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsVideoCapable(void)
{
  VARIANT_BOOL pVal;
  this->get_IsVideoCapable((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsSkypeOutContact(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSkypeOutContact"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsSkypeOutContact(void)
{
  VARIANT_BOOL pVal;
  this->get_IsSkypeOutContact((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_NumberOfAuthBuddies(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfAuthBuddies"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUserDispT<T>::get_NumberOfAuthBuddies(void)
{
  long pVal;
  this->get_NumberOfAuthBuddies((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_DisplayName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_RichMoodText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RichMoodText"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_RichMoodText(void)
{
  BSTR pVal;
  this->get_RichMoodText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsVoicemailCapable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVoicemailCapable"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsVoicemailCapable(void)
{
  VARIANT_BOOL pVal;
  this->get_IsVoicemailCapable((VARIANT_BOOL*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICall
// Interface: ICall
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Timestamp(pVal);
}

template <class T> DATE __fastcall
TCOMICallT<T>::get_Timestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_Timestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PartnerHandle(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_PartnerHandle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PartnerDisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_PartnerDisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PartnerDisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_ConferenceId(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ConferenceId(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_ConferenceId(void)
{
  long pVal;
  OLECHECK(this->get_ConferenceId((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Type(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
TCOMICallT<T>::get_Type(void)
{
  Skype4comlib_tlb::TCallType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TCallType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Status(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
TCOMICallT<T>::get_Status(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TCallStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_Status(Skype4comlib_tlb::TCallStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_FailureReason(Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/)
{
  return (*this)->get_FailureReason(pVal);
}

template <class T> Skype4comlib_tlb::TCallFailureReason __fastcall
TCOMICallT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TCallFailureReason pVal;
  OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TCallFailureReason*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Subject(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Subject(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_Subject(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Subject((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_PstnNumber(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PstnNumber(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_PstnNumber(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PstnNumber((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Duration(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_Duration(void)
{
  long pVal;
  OLECHECK(this->get_Duration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_PstnStatus(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PstnStatus(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_PstnStatus(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PstnStatus((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_Seen(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Seen(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_Seen(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_Seen(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Hold(void)
{
  return (*this)->Hold();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Resume(void)
{
  return (*this)->Resume();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Finish(void)
{
  return (*this)->Finish();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Answer(void)
{
  return (*this)->Answer();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_DTMF(BSTR Param1/*[in]*/)
{
  return (*this)->set_DTMF(Param1);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Participants(Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Participants(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Participants(Skype4comlib_tlb::IParticipantCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Participants(IParticipantCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IParticipantCollectionPtr __fastcall
TCOMICallT<T>::get_Participants(void)
{
  Skype4comlib_tlb::IParticipantCollection* pVal;
  OLECHECK(this->get_Participants((Skype4comlib_tlb::IParticipantCollection**)&pVal));
  return (Skype4comlib_tlb::IParticipantCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Join(long Id/*[in]*/)
{
  return (*this)->Join(Id);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_VmDuration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VmDuration(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_VmDuration(void)
{
  long pVal;
  OLECHECK(this->get_VmDuration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_VmAllowedDuration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VmAllowedDuration(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_VmAllowedDuration(void)
{
  long pVal;
  OLECHECK(this->get_VmAllowedDuration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_VideoStatus(Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_VideoStatus(pVal);
}

template <class T> Skype4comlib_tlb::TCallVideoStatus __fastcall
TCOMICallT<T>::get_VideoStatus(void)
{
  Skype4comlib_tlb::TCallVideoStatus pVal;
  OLECHECK(this->get_VideoStatus((Skype4comlib_tlb::TCallVideoStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_VideoSendStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_VideoSendStatus(pVal);
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
TCOMICallT<T>::get_VideoSendStatus(void)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  OLECHECK(this->get_VideoSendStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_VideoReceiveStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_VideoReceiveStatus(pVal);
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
TCOMICallT<T>::get_VideoReceiveStatus(void)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  OLECHECK(this->get_VideoReceiveStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::StartVideoSend(void)
{
  return (*this)->StartVideoSend();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::StopVideoSend(void)
{
  return (*this)->StopVideoSend();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::StartVideoReceive(void)
{
  return (*this)->StartVideoReceive();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::StopVideoReceive(void)
{
  return (*this)->StopVideoReceive();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::RedirectToVoicemail(void)
{
  return (*this)->RedirectToVoicemail();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Forward(void)
{
  return (*this)->Forward();
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Rate(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Rate(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_Rate(void)
{
  long pVal;
  OLECHECK(this->get_Rate((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_RateCurrency(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RateCurrency(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_RateCurrency(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RateCurrency((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_RatePrecision(long* pVal/*[out,retval]*/)
{
  return (*this)->get_RatePrecision(pVal);
}

template <class T> long __fastcall
TCOMICallT<T>::get_RatePrecision(void)
{
  long pVal;
  OLECHECK(this->get_RatePrecision((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                               BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InputDevice(DeviceType, pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InputDevice(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                               BSTR pVal/*[in]*/)
{
  return (*this)->set_InputDevice(DeviceType, pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OutputDevice(DeviceType, pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OutputDevice(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                BSTR pVal/*[in]*/)
{
  return (*this)->set_OutputDevice(DeviceType, pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                    BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CaptureMicDevice(DeviceType, pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CaptureMicDevice(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::set_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                    BSTR pVal/*[in]*/)
{
  return (*this)->set_CaptureMicDevice(DeviceType, pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_InputStatus(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_InputStatus(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_InputStatus(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_InputStatus(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMICallT<T>::get_InputStatus(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_InputStatus((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_ForwardedBy(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ForwardedBy(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_ForwardedBy(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ForwardedBy((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Seen(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Seen(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_Seen(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Seen(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMICallT<T>::get_Seen(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Seen((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_CanTransfer(BSTR Target/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CanTransfer(Target, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICallT<T>::get_CanTransfer(BSTR Target/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_CanTransfer(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TransferStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_TransferStatus(pVal);
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
TCOMICallT<T>::get_TransferStatus(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  OLECHECK(this->get_TransferStatus((Skype4comlib_tlb::TCallStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TransferActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_TransferActive(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TransferActive(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_TransferActive(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMICallT<T>::get_TransferActive(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_TransferActive((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TransferredBy(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TransferredBy(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_TransferredBy(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TransferredBy((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TransferredTo(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TransferredTo(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_TransferredTo(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TransferredTo((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::Transfer(BSTR Target/*[in]*/)
{
  return (*this)->Transfer(Target);
}

template <class T> HRESULT __fastcall
TCOMICallT<T>::get_TargetIdentity(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TargetIdentity(pVal);
}

template <class T> BSTR __fastcall
TCOMICallT<T>::get_TargetIdentity(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TargetIdentity((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ICall
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76036886-436C-405F-A96E-7835CCFB82F3}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timestamp"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ICallDispT<T>::get_Timestamp(void)
{
  DATE pVal;
  this->get_Timestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerHandle"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_PartnerHandle(void)
{
  BSTR pVal;
  this->get_PartnerHandle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerDisplayName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_PartnerDisplayName(void)
{
  BSTR pVal;
  this->get_PartnerDisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_ConferenceId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConferenceId"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_ConferenceId(void)
{
  long pVal;
  this->get_ConferenceId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Type(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
ICallDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TCallType pVal;
  this->get_Type((Skype4comlib_tlb::TCallType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Status(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
ICallDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->get_Status((Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_Status(Skype4comlib_tlb::TCallStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_FailureReason(Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FailureReason"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallFailureReason __fastcall
ICallDispT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TCallFailureReason pVal;
  this->get_FailureReason((Skype4comlib_tlb::TCallFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Subject(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subject"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_Subject(void)
{
  BSTR pVal;
  this->get_Subject((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_PstnNumber(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PstnNumber"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_PstnNumber(void)
{
  BSTR pVal;
  this->get_PstnNumber((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_Duration(void)
{
  long pVal;
  this->get_Duration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_PstnStatus(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PstnStatus"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_PstnStatus(void)
{
  BSTR pVal;
  this->get_PstnStatus((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_Seen(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seen"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Hold()
{
  _TDispID _dispid(*this, OLETEXT("Hold"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Resume()
{
  _TDispID _dispid(*this, OLETEXT("Resume"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Finish()
{
  _TDispID _dispid(*this, OLETEXT("Finish"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Answer()
{
  _TDispID _dispid(*this, OLETEXT("Answer"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_DTMF(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DTMF"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Participants(Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Participants"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IParticipantCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IParticipantCollection* __fastcall
ICallDispT<T>::get_Participants(void)
{
  Skype4comlib_tlb::IParticipantCollection* pVal;
  this->get_Participants((Skype4comlib_tlb::IParticipantCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Join(long Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Join"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_VmDuration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VmDuration"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_VmDuration(void)
{
  long pVal;
  this->get_VmDuration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_VmAllowedDuration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VmAllowedDuration"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_VmAllowedDuration(void)
{
  long pVal;
  this->get_VmAllowedDuration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_VideoStatus(Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoStatus"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoStatus __fastcall
ICallDispT<T>::get_VideoStatus(void)
{
  Skype4comlib_tlb::TCallVideoStatus pVal;
  this->get_VideoStatus((Skype4comlib_tlb::TCallVideoStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_VideoSendStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoSendStatus"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
ICallDispT<T>::get_VideoSendStatus(void)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  this->get_VideoSendStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_VideoReceiveStatus(Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoReceiveStatus"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
ICallDispT<T>::get_VideoReceiveStatus(void)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  this->get_VideoReceiveStatus((Skype4comlib_tlb::TCallVideoSendStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::StartVideoSend()
{
  _TDispID _dispid(*this, OLETEXT("StartVideoSend"), DISPID(26));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::StopVideoSend()
{
  _TDispID _dispid(*this, OLETEXT("StopVideoSend"), DISPID(27));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::StartVideoReceive()
{
  _TDispID _dispid(*this, OLETEXT("StartVideoReceive"), DISPID(28));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::StopVideoReceive()
{
  _TDispID _dispid(*this, OLETEXT("StopVideoReceive"), DISPID(29));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::RedirectToVoicemail()
{
  _TDispID _dispid(*this, OLETEXT("RedirectToVoicemail"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Forward()
{
  _TDispID _dispid(*this, OLETEXT("Forward"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Rate(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_Rate(void)
{
  long pVal;
  this->get_Rate((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_RateCurrency(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RateCurrency"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_RateCurrency(void)
{
  BSTR pVal;
  this->get_RateCurrency((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_RatePrecision(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RatePrecision"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallDispT<T>::get_RatePrecision(void)
{
  long pVal;
  this->get_RatePrecision((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                               BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputDevice"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_InputDevice(DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_InputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                               BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputDevice"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputDevice"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_OutputDevice(DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_OutputDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputDevice"), DISPID(36));
  TAutoArgs<2> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                    BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptureMicDevice"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_CaptureMicDevice(DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::set_CaptureMicDevice(Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                    BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptureMicDevice"), DISPID(37));
  TAutoArgs<2> _args;
  _args[1] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_InputStatus(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputStatus"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICallDispT<T>::get_InputStatus(void)
{
  VARIANT_BOOL pVal;
  this->get_InputStatus((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_ForwardedBy(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForwardedBy"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_ForwardedBy(void)
{
  BSTR pVal;
  this->get_ForwardedBy((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_Seen(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seen"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICallDispT<T>::get_Seen(void)
{
  VARIANT_BOOL pVal;
  this->get_Seen((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_CanTransfer(BSTR Target/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanTransfer"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICallDispT<T>::get_CanTransfer(BSTR Target/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CanTransfer(Target, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_TransferStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferStatus"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
ICallDispT<T>::get_TransferStatus(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->get_TransferStatus((Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_TransferActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferActive"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICallDispT<T>::get_TransferActive(void)
{
  VARIANT_BOOL pVal;
  this->get_TransferActive((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_TransferredBy(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferredBy"), DISPID(43));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_TransferredBy(void)
{
  BSTR pVal;
  this->get_TransferredBy((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_TransferredTo(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferredTo"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_TransferredTo(void)
{
  BSTR pVal;
  this->get_TransferredTo((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallDispT<T>::Transfer(BSTR Target/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transfer"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallDispT<T>::get_TargetIdentity(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetIdentity"), DISPID(46));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallDispT<T>::get_TargetIdentity(void)
{
  BSTR pVal;
  this->get_TargetIdentity((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIParticipantCollection
// Interface: IParticipantCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIParticipantCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::Add(Skype4comlib_tlb::IParticipant* pParticipant/*[in]*/)
{
  return (*this)->Add(pParticipant);
}

template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::IParticipant** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IParticipant* __fastcall
TCOMIParticipantCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IParticipant* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IParticipant**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIParticipantCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIParticipantCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IParticipantCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F825FE12-9826-4BD2-BF7E-1ED95B8480FE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IParticipantCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::Add(Skype4comlib_tlb::IParticipant* pParticipant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IParticipant*)pParticipant /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::IParticipant** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IParticipant**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IParticipant* __fastcall
IParticipantCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IParticipant* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IParticipant**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IParticipantCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IParticipantCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIParticipant
// Interface: IParticipant
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIParticipantT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Handle(pVal);
}

template <class T> BSTR __fastcall
TCOMIParticipantT<T>::get_Handle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Handle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIParticipantT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMIParticipantT<T>::get_DisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIParticipantT<T>::get_CallType(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  return (*this)->get_CallType(pVal);
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
TCOMIParticipantT<T>::get_CallType(void)
{
  Skype4comlib_tlb::TCallType pVal;
  OLECHECK(this->get_CallType((Skype4comlib_tlb::TCallType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIParticipantT<T>::get_CallStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_CallStatus(pVal);
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
TCOMIParticipantT<T>::get_CallStatus(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  OLECHECK(this->get_CallStatus((Skype4comlib_tlb::TCallStatus*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IParticipant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1B2AD09-1961-4336-A6BF-93010B73DE72}
// *********************************************************************//
template <class T> HRESULT __fastcall
IParticipantDispT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Handle"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IParticipantDispT<T>::get_Handle(void)
{
  BSTR pVal;
  this->get_Handle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IParticipantDispT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IParticipantDispT<T>::get_DisplayName(void)
{
  BSTR pVal;
  this->get_DisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IParticipantDispT<T>::get_CallType(Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallType"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
IParticipantDispT<T>::get_CallType(void)
{
  Skype4comlib_tlb::TCallType pVal;
  this->get_CallType((Skype4comlib_tlb::TCallType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IParticipantDispT<T>::get_CallStatus(Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallStatus"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
IParticipantDispT<T>::get_CallStatus(void)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->get_CallStatus((Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICallChannel
// Interface: ICallChannel
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Type(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TCallChannelType __fastcall
TCOMICallChannelT<T>::get_Type(void)
{
  Skype4comlib_tlb::TCallChannelType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TCallChannelType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::set_Type(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::SendTextMessage(BSTR Text)
{
  return (*this)->SendTextMessage(Text);
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Stream(Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/)
{
  return (*this)->get_Stream(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Stream(Skype4comlib_tlb::IApplicationStreamPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Stream(IApplicationStream**)pVal);
}

template <class T> Skype4comlib_tlb::IApplicationStreamPtr __fastcall
TCOMICallChannelT<T>::get_Stream(void)
{
  Skype4comlib_tlb::IApplicationStream* pVal;
  OLECHECK(this->get_Stream((Skype4comlib_tlb::IApplicationStream**)&pVal));
  return (Skype4comlib_tlb::IApplicationStreamPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Manager(Skype4comlib_tlb::ICallChannelManager** pVal/*[out,retval]*/)
{
  return (*this)->get_Manager(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Manager(Skype4comlib_tlb::ICallChannelManagerPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Manager(ICallChannelManager**)pVal);
}

template <class T> Skype4comlib_tlb::ICallChannelManagerPtr __fastcall
TCOMICallChannelT<T>::get_Manager(void)
{
  Skype4comlib_tlb::ICallChannelManager* pVal;
  OLECHECK(this->get_Manager((Skype4comlib_tlb::ICallChannelManager**)&pVal));
  return (Skype4comlib_tlb::ICallChannelManagerPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Call(Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  return (*this)->get_Call(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelT<T>::get_Call(Skype4comlib_tlb::ICallPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Call(ICall**)pVal);
}

template <class T> Skype4comlib_tlb::ICallPtr __fastcall
TCOMICallChannelT<T>::get_Call(void)
{
  Skype4comlib_tlb::ICall* pVal;
  OLECHECK(this->get_Call((Skype4comlib_tlb::ICall**)&pVal));
  return (Skype4comlib_tlb::ICallPtr)pVal;
}

// *********************************************************************//
// DispIntf:  ICallChannel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B76C04C9-0EB1-4748-B0C0-D01DEB595906}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallChannelDispT<T>::get_Type(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallChannelType __fastcall
ICallChannelDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TCallChannelType pVal;
  this->get_Type((Skype4comlib_tlb::TCallChannelType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelDispT<T>::set_Type(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelDispT<T>::SendTextMessage(BSTR Text)
{
  _TDispID _dispid(*this, OLETEXT("SendTextMessage"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelDispT<T>::get_Stream(Skype4comlib_tlb::IApplicationStream** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Stream"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStream**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStream* __fastcall
ICallChannelDispT<T>::get_Stream(void)
{
  Skype4comlib_tlb::IApplicationStream* pVal;
  this->get_Stream((Skype4comlib_tlb::IApplicationStream**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelDispT<T>::get_Manager(Skype4comlib_tlb::ICallChannelManager** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Manager"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallChannelManager**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallChannelManager* __fastcall
ICallChannelDispT<T>::get_Manager(void)
{
  Skype4comlib_tlb::ICallChannelManager* pVal;
  this->get_Manager((Skype4comlib_tlb::ICallChannelManager**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelDispT<T>::get_Call(Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Call"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICall**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
ICallChannelDispT<T>::get_Call(void)
{
  Skype4comlib_tlb::ICall* pVal;
  this->get_Call((Skype4comlib_tlb::ICall**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICallChannelManager
// Interface: ICallChannelManager
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::Connect(Skype4comlib_tlb::ISkype* pSkype/*[in]*/)
{
  return (*this)->Connect(pSkype);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_Channels(Skype4comlib_tlb::ICallChannelCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Channels(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_Channels(Skype4comlib_tlb::ICallChannelCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Channels(ICallChannelCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ICallChannelCollectionPtr __fastcall
TCOMICallChannelManagerT<T>::get_Channels(void)
{
  Skype4comlib_tlb::ICallChannelCollection* pVal;
  OLECHECK(this->get_Channels((Skype4comlib_tlb::ICallChannelCollection**)&pVal));
  return (Skype4comlib_tlb::ICallChannelCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_ChannelType(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/)
{
  return (*this)->get_ChannelType(pVal);
}

template <class T> Skype4comlib_tlb::TCallChannelType __fastcall
TCOMICallChannelManagerT<T>::get_ChannelType(void)
{
  Skype4comlib_tlb::TCallChannelType pVal;
  OLECHECK(this->get_ChannelType((Skype4comlib_tlb::TCallChannelType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::set_ChannelType(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/)
{
  return (*this)->set_ChannelType(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMICallChannelManagerT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::set_Name(BSTR pVal/*[in]*/)
{
  return (*this)->set_Name(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::CreateApplication(BSTR ApplicationName/*[in,def,opt]*/)
{
  return (*this)->CreateApplication(ApplicationName);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_Created(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Created(pVal);
}

template <class T> HRESULT __fastcall
TCOMICallChannelManagerT<T>::get_Created(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Created(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMICallChannelManagerT<T>::get_Created(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Created((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

// *********************************************************************//
// DispIntf:  ICallChannelManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C27C77-525F-4A3F-B9DD-C5A77C67250D}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::Connect(Skype4comlib_tlb::ISkype* pSkype/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISkype*)pSkype /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::get_Channels(Skype4comlib_tlb::ICallChannelCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Channels"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallChannelCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallChannelCollection* __fastcall
ICallChannelManagerDispT<T>::get_Channels(void)
{
  Skype4comlib_tlb::ICallChannelCollection* pVal;
  this->get_Channels((Skype4comlib_tlb::ICallChannelCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::get_ChannelType(Skype4comlib_tlb::TCallChannelType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallChannelType __fastcall
ICallChannelManagerDispT<T>::get_ChannelType(void)
{
  Skype4comlib_tlb::TCallChannelType pVal;
  this->get_ChannelType((Skype4comlib_tlb::TCallChannelType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::set_ChannelType(Skype4comlib_tlb::TCallChannelType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelType"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallChannelManagerDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::set_Name(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::CreateApplication(BSTR ApplicationName/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateApplication"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = ApplicationName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelManagerDispT<T>::get_Created(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Created"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICallChannelManagerDispT<T>::get_Created(void)
{
  VARIANT_BOOL pVal;
  this->get_Created((VARIANT_BOOL*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMISkype
// Interface: ISkype
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Timeout(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Timeout(pVal);
}

template <class T> long __fastcall
TCOMISkypeT<T>::get_Timeout(void)
{
  long pVal;
  OLECHECK(this->get_Timeout((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Timeout(long pVal/*[in]*/)
{
  return (*this)->set_Timeout(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/, 
                             BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Property(ObjectType, ObjectId, PropName, pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Property(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/, 
                             BSTR pVal/*[in]*/)
{
  return (*this)->set_Property(ObjectType, ObjectId, PropName, pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Variable(BSTR Name/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Variable(Name, pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_Variable(BSTR Name/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Variable(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Variable(BSTR Name/*[in]*/, BSTR pVal/*[in]*/)
{
  return (*this)->set_Variable(Name, pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUserHandle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUserHandle(pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_CurrentUserHandle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CurrentUserHandle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUserStatus(Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUserStatus(pVal);
}

template <class T> Skype4comlib_tlb::TUserStatus __fastcall
TCOMISkypeT<T>::get_CurrentUserStatus(void)
{
  Skype4comlib_tlb::TUserStatus pVal;
  OLECHECK(this->get_CurrentUserStatus((Skype4comlib_tlb::TUserStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_CurrentUserStatus(Skype4comlib_tlb::TUserStatus pVal/*[in]*/)
{
  return (*this)->set_CurrentUserStatus(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_ConnectionStatus(pVal);
}

template <class T> Skype4comlib_tlb::TConnectionStatus __fastcall
TCOMISkypeT<T>::get_ConnectionStatus(void)
{
  Skype4comlib_tlb::TConnectionStatus pVal;
  OLECHECK(this->get_ConnectionStatus((Skype4comlib_tlb::TConnectionStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Mute(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Mute(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Mute(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Mute(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISkypeT<T>::get_Mute(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Mute((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Mute(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Mute(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Mute(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_Mute(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Version(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Version(pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_Version(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Version((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Privilege(BSTR Name/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Privilege(Name, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMISkypeT<T>::get_Privilege(BSTR Name/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Privilege(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUser(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUser(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUser(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUser(IUser**)pVal);
}

template <class T> Skype4comlib_tlb::IUserPtr __fastcall
TCOMISkypeT<T>::get_CurrentUser(void)
{
  Skype4comlib_tlb::IUser* pVal;
  OLECHECK(this->get_CurrentUser((Skype4comlib_tlb::IUser**)&pVal));
  return (Skype4comlib_tlb::IUserPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Convert(Skype4comlib_tlb::IConversion** pVal/*[out,retval]*/)
{
  return (*this)->get_Convert(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Convert(Skype4comlib_tlb::IConversionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Convert(IConversion**)pVal);
}

template <class T> Skype4comlib_tlb::IConversionPtr __fastcall
TCOMISkypeT<T>::get_Convert(void)
{
  Skype4comlib_tlb::IConversion* pVal;
  OLECHECK(this->get_Convert((Skype4comlib_tlb::IConversion**)&pVal));
  return (Skype4comlib_tlb::IConversionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Friends(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Friends(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Friends(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Friends(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMISkypeT<T>::get_Friends(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Friends((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::SearchForUsers(BSTR Target/*[in]*/, 
                               Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->SearchForUsers(Target, pVal);
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
TCOMISkypeT<T>::SearchForUsers(BSTR Target/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->SearchForUsers(, (Skype4comlib_tlb::IUserCollection**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Calls(BSTR Target/*[in,def,opt]*/, 
                          Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Calls(Target, pVal);
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
TCOMISkypeT<T>::get_Calls(BSTR Target/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  OLECHECK(this->get_Calls(, (Skype4comlib_tlb::ICallCollection**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveCalls(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveCalls(ICallCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ICallCollectionPtr __fastcall
TCOMISkypeT<T>::get_ActiveCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  OLECHECK(this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
  return (Skype4comlib_tlb::ICallCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MissedCalls(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MissedCalls(ICallCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ICallCollectionPtr __fastcall
TCOMISkypeT<T>::get_MissedCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  OLECHECK(this->get_MissedCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
  return (Skype4comlib_tlb::ICallCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Messages(BSTR Target/*[in,def,opt]*/, 
                             Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Messages(Target, pVal);
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
TCOMISkypeT<T>::get_Messages(BSTR Target/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  OLECHECK(this->get_Messages(, (Skype4comlib_tlb::IChatMessageCollection**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MissedMessages(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedMessages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MissedMessages(IChatMessageCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall
TCOMISkypeT<T>::get_MissedMessages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  OLECHECK(this->get_MissedMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
  return (Skype4comlib_tlb::IChatMessageCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_AttachmentStatus(pVal);
}

template <class T> Skype4comlib_tlb::TAttachmentStatus __fastcall
TCOMISkypeT<T>::get_AttachmentStatus(void)
{
  Skype4comlib_tlb::TAttachmentStatus pVal;
  OLECHECK(this->get_AttachmentStatus((Skype4comlib_tlb::TAttachmentStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Protocol(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Protocol(pVal);
}

template <class T> long __fastcall
TCOMISkypeT<T>::get_Protocol(void)
{
  long pVal;
  OLECHECK(this->get_Protocol((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Protocol(long pVal/*[in]*/)
{
  return (*this)->set_Protocol(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::Attach(long Protocol/*[in,def,opt]*/, VARIANT_BOOL Wait/*[in,def,opt]*/)
{
  return (*this)->Attach(Protocol, Wait);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                          BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/, 
                          Skype4comlib_tlb::ICall** pCall/*[out,retval]*/)
{
  return (*this)->PlaceCall(Target, Target2, Target3, Target4, pCall);
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
TCOMISkypeT<T>::PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                          BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICall* pCall;
  OLECHECK(this->PlaceCall(, (Skype4comlib_tlb::ICall**)&pCall));
  return pCall;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/, 
                            Skype4comlib_tlb::IChatMessage** pMessage/*[out,retval]*/)
{
  return (*this)->SendMessage(Username, Text, pMessage);
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
TCOMISkypeT<T>::SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pMessage;
  OLECHECK(this->SendMessage(, (Skype4comlib_tlb::IChatMessage**)&pMessage));
  return pMessage;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_User(BSTR Username/*[in,def,opt]*/, 
                         Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  return (*this)->get_User(Username, pVal);
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
TCOMISkypeT<T>::get_User(BSTR Username/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  OLECHECK(this->get_User(, (Skype4comlib_tlb::IUser**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Message(long Id/*[in,def,opt]*/, 
                            Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  return (*this)->get_Message(Id, pVal);
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
TCOMISkypeT<T>::get_Message(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  OLECHECK(this->get_Message(, (Skype4comlib_tlb::IChatMessage**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Call(long Id/*[in,def,opt]*/, Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  return (*this)->get_Call(Id, pVal);
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
TCOMISkypeT<T>::get_Call(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICall* pVal;
  OLECHECK(this->get_Call(, (Skype4comlib_tlb::ICall**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::SendCommand(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
{
  return (*this)->SendCommand(pCommand);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Chats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Chats(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Chats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Chats(IChatCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatCollectionPtr __fastcall
TCOMISkypeT<T>::get_Chats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  OLECHECK(this->get_Chats((Skype4comlib_tlb::IChatCollection**)&pVal));
  return (Skype4comlib_tlb::IChatCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Chat(BSTR Name/*[in,def,opt]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  return (*this)->get_Chat(Name, pVal);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMISkypeT<T>::get_Chat(BSTR Name/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  OLECHECK(this->get_Chat(, (Skype4comlib_tlb::IChat**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::ChangeUserStatus(Skype4comlib_tlb::TUserStatus newVal/*[in]*/)
{
  return (*this)->ChangeUserStatus(newVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Conference(long Id/*[in,def,opt]*/, 
                               Skype4comlib_tlb::IConference** pVal/*[out,retval]*/)
{
  return (*this)->get_Conference(Id, pVal);
}

template <class T> Skype4comlib_tlb::IConference* __fastcall
TCOMISkypeT<T>::get_Conference(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IConference* pVal;
  OLECHECK(this->get_Conference(, (Skype4comlib_tlb::IConference**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Conferences(Skype4comlib_tlb::IConferenceCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Conferences(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Conferences(Skype4comlib_tlb::IConferenceCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Conferences(IConferenceCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IConferenceCollectionPtr __fastcall
TCOMISkypeT<T>::get_Conferences(void)
{
  Skype4comlib_tlb::IConferenceCollection* pVal;
  OLECHECK(this->get_Conferences((Skype4comlib_tlb::IConferenceCollection**)&pVal));
  return (Skype4comlib_tlb::IConferenceCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Profile(BSTR Property/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Profile(Property, pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_Profile(BSTR Property/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Profile(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Profile(BSTR Property/*[in]*/, BSTR pVal/*[in]*/)
{
  return (*this)->set_Profile(Property, pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveChats(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveChats(IChatCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatCollectionPtr __fastcall
TCOMISkypeT<T>::get_ActiveChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  OLECHECK(this->get_ActiveChats((Skype4comlib_tlb::IChatCollection**)&pVal));
  return (Skype4comlib_tlb::IChatCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MissedChats(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MissedChats(IChatCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatCollectionPtr __fastcall
TCOMISkypeT<T>::get_MissedChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  OLECHECK(this->get_MissedChats((Skype4comlib_tlb::IChatCollection**)&pVal));
  return (Skype4comlib_tlb::IChatCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_RecentChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_RecentChats(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_RecentChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_RecentChats(IChatCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatCollectionPtr __fastcall
TCOMISkypeT<T>::get_RecentChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  OLECHECK(this->get_RecentChats((Skype4comlib_tlb::IChatCollection**)&pVal));
  return (Skype4comlib_tlb::IChatCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_BookmarkedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_BookmarkedChats(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_BookmarkedChats(Skype4comlib_tlb::IChatCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_BookmarkedChats(IChatCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatCollectionPtr __fastcall
TCOMISkypeT<T>::get_BookmarkedChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  OLECHECK(this->get_BookmarkedChats((Skype4comlib_tlb::IChatCollection**)&pVal));
  return (Skype4comlib_tlb::IChatCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::CreateChatWith(BSTR Username/*[in]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  return (*this)->CreateChatWith(Username, pVal);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMISkypeT<T>::CreateChatWith(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  OLECHECK(this->CreateChatWith(, (Skype4comlib_tlb::IChat**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/, 
                                   Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  return (*this)->CreateChatMultiple(pMembers, pChat);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMISkypeT<T>::CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  OLECHECK(this->CreateChatMultiple(, (Skype4comlib_tlb::IChat**)&pChat));
  return pChat;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Voicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Voicemails(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Voicemails(Skype4comlib_tlb::IVoicemailCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Voicemails(IVoicemailCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IVoicemailCollectionPtr __fastcall
TCOMISkypeT<T>::get_Voicemails(void)
{
  Skype4comlib_tlb::IVoicemailCollection* pVal;
  OLECHECK(this->get_Voicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal));
  return (Skype4comlib_tlb::IVoicemailCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::SendVoicemail(BSTR Username/*[in]*/, 
                              Skype4comlib_tlb::IVoicemail** pVoicemail/*[out,retval]*/)
{
  return (*this)->SendVoicemail(Username, pVoicemail);
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
TCOMISkypeT<T>::SendVoicemail(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVoicemail;
  OLECHECK(this->SendVoicemail(, (Skype4comlib_tlb::IVoicemail**)&pVoicemail));
  return pVoicemail;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_UsersWaitingAuthorization(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_UsersWaitingAuthorization(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMISkypeT<T>::get_UsersWaitingAuthorization(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_UsersWaitingAuthorization((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::ClearChatHistory(void)
{
  return (*this)->ClearChatHistory();
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::ClearVoicemailHistory(void)
{
  return (*this)->ClearVoicemailHistory();
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::ClearCallHistory(BSTR Username/*[in,def,opt]*/, 
                                 Skype4comlib_tlb::TCallHistory Type/*[in,def,opt]*/)
{
  return (*this)->ClearCallHistory(Username, Type);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CommandId(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CommandId(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CommandId(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CommandId(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISkypeT<T>::get_CommandId(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_CommandId((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_CommandId(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_CommandId(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_CommandId(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_CommandId(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Application(BSTR Name/*[in]*/, 
                                Skype4comlib_tlb::IApplication** pVal/*[out,retval]*/)
{
  return (*this)->get_Application(Name, pVal);
}

template <class T> Skype4comlib_tlb::IApplication* __fastcall
TCOMISkypeT<T>::get_Application(BSTR Name/*[in]*/)
{
  Skype4comlib_tlb::IApplication* pVal;
  OLECHECK(this->get_Application(, (Skype4comlib_tlb::IApplication**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Greeting(BSTR Username/*[in,def,opt]*/, 
                             Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  return (*this)->get_Greeting(Username, pVal);
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
TCOMISkypeT<T>::get_Greeting(BSTR Username/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  OLECHECK(this->get_Greeting(, (Skype4comlib_tlb::IVoicemail**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Cache(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Cache(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Cache(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Cache(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISkypeT<T>::get_Cache(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Cache((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Cache(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Cache(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_Cache(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_Cache(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::ResetCache(void)
{
  return (*this)->ResetCache();
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUserProfile(Skype4comlib_tlb::IProfile** pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUserProfile(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CurrentUserProfile(Skype4comlib_tlb::IProfilePtr* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentUserProfile(IProfile**)pVal);
}

template <class T> Skype4comlib_tlb::IProfilePtr __fastcall
TCOMISkypeT<T>::get_CurrentUserProfile(void)
{
  Skype4comlib_tlb::IProfile* pVal;
  OLECHECK(this->get_CurrentUserProfile((Skype4comlib_tlb::IProfile**)&pVal));
  return (Skype4comlib_tlb::IProfilePtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Groups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Groups(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Groups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Groups(IGroupCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IGroupCollectionPtr __fastcall
TCOMISkypeT<T>::get_Groups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  OLECHECK(this->get_Groups((Skype4comlib_tlb::IGroupCollection**)&pVal));
  return (Skype4comlib_tlb::IGroupCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CustomGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_CustomGroups(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_CustomGroups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomGroups(IGroupCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IGroupCollectionPtr __fastcall
TCOMISkypeT<T>::get_CustomGroups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  OLECHECK(this->get_CustomGroups((Skype4comlib_tlb::IGroupCollection**)&pVal));
  return (Skype4comlib_tlb::IGroupCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_HardwiredGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_HardwiredGroups(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_HardwiredGroups(Skype4comlib_tlb::IGroupCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_HardwiredGroups(IGroupCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IGroupCollectionPtr __fastcall
TCOMISkypeT<T>::get_HardwiredGroups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  OLECHECK(this->get_HardwiredGroups((Skype4comlib_tlb::IGroupCollection**)&pVal));
  return (Skype4comlib_tlb::IGroupCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::CreateGroup(BSTR GroupName/*[in]*/, 
                            Skype4comlib_tlb::IGroup** pGroup/*[out,retval]*/)
{
  return (*this)->CreateGroup(GroupName, pGroup);
}

template <class T> Skype4comlib_tlb::IGroup* __fastcall
TCOMISkypeT<T>::CreateGroup(BSTR GroupName/*[in]*/)
{
  Skype4comlib_tlb::IGroup* pGroup;
  OLECHECK(this->CreateGroup(, (Skype4comlib_tlb::IGroup**)&pGroup));
  return pGroup;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::DeleteGroup(long GroupId/*[in]*/)
{
  return (*this)->DeleteGroup(GroupId);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Settings(Skype4comlib_tlb::ISettings** pVal/*[out,retval]*/)
{
  return (*this)->get_Settings(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Settings(Skype4comlib_tlb::ISettingsPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Settings(ISettings**)pVal);
}

template <class T> Skype4comlib_tlb::ISettingsPtr __fastcall
TCOMISkypeT<T>::get_Settings(void)
{
  Skype4comlib_tlb::ISettings* pVal;
  OLECHECK(this->get_Settings((Skype4comlib_tlb::ISettings**)&pVal));
  return (Skype4comlib_tlb::ISettingsPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Client(Skype4comlib_tlb::IClient** pVal/*[out,retval]*/)
{
  return (*this)->get_Client(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Client(Skype4comlib_tlb::IClientPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Client(IClient**)pVal);
}

template <class T> Skype4comlib_tlb::IClientPtr __fastcall
TCOMISkypeT<T>::get_Client(void)
{
  Skype4comlib_tlb::IClient* pVal;
  OLECHECK(this->get_Client((Skype4comlib_tlb::IClient**)&pVal));
  return (Skype4comlib_tlb::IClientPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_FriendlyName(BSTR Param1/*[in]*/)
{
  return (*this)->set_FriendlyName(Param1);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, BSTR Reply/*[in,def,opt]*/, 
                            VARIANT_BOOL Block/*[in,def,opt]*/, long Timeout/*[in,def,opt]*/, 
                            Skype4comlib_tlb::ICommand** pVal/*[out,retval]*/)
{
  return (*this)->get_Command(Id, Command, Reply, Block, Timeout, pVal);
}

template <class T> Skype4comlib_tlb::ICommand* __fastcall
TCOMISkypeT<T>::get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, BSTR Reply/*[in,def,opt]*/, 
                            VARIANT_BOOL Block/*[in,def,opt]*/, long Timeout/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICommand* pVal;
  OLECHECK(this->get_Command(, (Skype4comlib_tlb::ICommand**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Voicemail(long Id/*[in]*/, Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  return (*this)->get_Voicemail(Id, pVal);
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
TCOMISkypeT<T>::get_Voicemail(long Id/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  OLECHECK(this->get_Voicemail(, (Skype4comlib_tlb::IVoicemail**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MissedVoicemails(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MissedVoicemails(IVoicemailCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IVoicemailCollectionPtr __fastcall
TCOMISkypeT<T>::get_MissedVoicemails(void)
{
  Skype4comlib_tlb::IVoicemailCollection* pVal;
  OLECHECK(this->get_MissedVoicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal));
  return (Skype4comlib_tlb::IVoicemailCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::EnableApiSecurityContext(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/)
{
  return (*this)->EnableApiSecurityContext(Context);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ApiSecurityContextEnabled(Context, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMISkypeT<T>::get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ApiSecurityContextEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                          BSTR TargetNumbers/*[in]*/, 
                          Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/)
{
  return (*this)->CreateSms(MessageType, TargetNumbers, pMessage);
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
TCOMISkypeT<T>::CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                          BSTR TargetNumbers/*[in]*/)
{
  Skype4comlib_tlb::ISmsMessage* pMessage;
  OLECHECK(this->CreateSms(, (Skype4comlib_tlb::ISmsMessage**)&pMessage));
  return pMessage;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Smss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Smss(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_Smss(Skype4comlib_tlb::ISmsMessageCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Smss(ISmsMessageCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsMessageCollectionPtr __fastcall
TCOMISkypeT<T>::get_Smss(void)
{
  Skype4comlib_tlb::ISmsMessageCollection* pVal;
  OLECHECK(this->get_Smss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal));
  return (Skype4comlib_tlb::ISmsMessageCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MissedSmss(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MissedSmss(ISmsMessageCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsMessageCollectionPtr __fastcall
TCOMISkypeT<T>::get_MissedSmss(void)
{
  Skype4comlib_tlb::ISmsMessageCollection* pVal;
  OLECHECK(this->get_MissedSmss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal));
  return (Skype4comlib_tlb::ISmsMessageCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                        BSTR ReplyToNumber/*[in,def,opt]*/, 
                        Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/)
{
  return (*this)->SendSms(TargetNumbers, MessageText, ReplyToNumber, pMessage);
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
TCOMISkypeT<T>::SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                        BSTR ReplyToNumber/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ISmsMessage* pMessage;
  OLECHECK(this->SendSms(, (Skype4comlib_tlb::ISmsMessage**)&pMessage));
  return pMessage;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::AsyncSearchUsers(BSTR Target/*[in]*/, long* pCookie/*[out,retval]*/)
{
  return (*this)->AsyncSearchUsers(Target, pCookie);
}

template <class T> long __fastcall
TCOMISkypeT<T>::AsyncSearchUsers(BSTR Target/*[in]*/)
{
  long pCookie;
  OLECHECK(this->AsyncSearchUsers(, (long*)&pCookie));
  return pCookie;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ApiWrapperVersion(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ApiWrapperVersion(pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_ApiWrapperVersion(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ApiWrapperVersion((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_SilentMode(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SilentMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_SilentMode(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SilentMode(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISkypeT<T>::get_SilentMode(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SilentMode((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_SilentMode(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SilentMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::set_SilentMode(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_SilentMode(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_FileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_FileTransfers(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_FileTransfers(Skype4comlib_tlb::IFileTransferCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_FileTransfers(IFileTransferCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IFileTransferCollectionPtr __fastcall
TCOMISkypeT<T>::get_FileTransfers(void)
{
  Skype4comlib_tlb::IFileTransferCollection* pVal;
  OLECHECK(this->get_FileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal));
  return (Skype4comlib_tlb::IFileTransferCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveFileTransfers(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveFileTransfers(IFileTransferCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IFileTransferCollectionPtr __fastcall
TCOMISkypeT<T>::get_ActiveFileTransfers(void)
{
  Skype4comlib_tlb::IFileTransferCollection* pVal;
  OLECHECK(this->get_ActiveFileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal));
  return (Skype4comlib_tlb::IFileTransferCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_FocusedContacts(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_FocusedContacts(pVal);
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_FocusedContacts(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_FocusedContacts(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMISkypeT<T>::get_FocusedContacts(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_FocusedContacts((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::FindChatUsingBlob(BSTR Blob/*[in]*/, Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  return (*this)->FindChatUsingBlob(Blob, pChat);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMISkypeT<T>::FindChatUsingBlob(BSTR Blob/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  OLECHECK(this->FindChatUsingBlob(, (Skype4comlib_tlb::IChat**)&pChat));
  return pChat;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::CreateChatUsingBlob(BSTR Blob/*[in]*/, 
                                    Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  return (*this)->CreateChatUsingBlob(Blob, pChat);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMISkypeT<T>::CreateChatUsingBlob(BSTR Blob/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  OLECHECK(this->CreateChatUsingBlob(, (Skype4comlib_tlb::IChat**)&pChat));
  return pChat;
}

template <class T> HRESULT __fastcall
TCOMISkypeT<T>::get_PredictiveDialerCountry(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PredictiveDialerCountry(pVal);
}

template <class T> BSTR __fastcall
TCOMISkypeT<T>::get_PredictiveDialerCountry(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PredictiveDialerCountry((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkype
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1878BFE-53D3-402E-8C86-190B19AF70D5}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Timeout(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeDispT<T>::get_Timeout(void)
{
  long pVal;
  this->get_Timeout((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Timeout(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/, 
                             BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = ObjectType /*[VT_BSTR:0]*/;
  _args[2] = ObjectId /*[VT_BSTR:0]*/;
  _args[3] = PropName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/)
{
  BSTR pVal;
  this->get_Property(ObjectType, ObjectId, PropName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Property(BSTR ObjectType/*[in]*/, BSTR ObjectId/*[in]*/, BSTR PropName/*[in]*/, 
                             BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2));
  TAutoArgs<4> _args;
  _args[1] = ObjectType /*[VT_BSTR:0]*/;
  _args[2] = ObjectId /*[VT_BSTR:0]*/;
  _args[3] = PropName /*[VT_BSTR:0]*/;
  _args[4] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Variable(BSTR Name/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Variable"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_Variable(BSTR Name/*[in]*/)
{
  BSTR pVal;
  this->get_Variable(Name, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Variable(BSTR Name/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Variable"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CurrentUserHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUserHandle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_CurrentUserHandle(void)
{
  BSTR pVal;
  this->get_CurrentUserHandle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CurrentUserStatus(Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUserStatus"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserStatus __fastcall
ISkypeDispT<T>::get_CurrentUserStatus(void)
{
  Skype4comlib_tlb::TUserStatus pVal;
  this->get_CurrentUserStatus((Skype4comlib_tlb::TUserStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_CurrentUserStatus(Skype4comlib_tlb::TUserStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUserStatus"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionStatus"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TConnectionStatus __fastcall
ISkypeDispT<T>::get_ConnectionStatus(void)
{
  Skype4comlib_tlb::TConnectionStatus pVal;
  this->get_ConnectionStatus((Skype4comlib_tlb::TConnectionStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Mute(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_Mute(void)
{
  VARIANT_BOOL pVal;
  this->get_Mute((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Mute(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Version(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_Version(void)
{
  BSTR pVal;
  this->get_Version((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Privilege(BSTR Name/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Privilege"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_Privilege(BSTR Name/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_Privilege(Name, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CurrentUser(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUser"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
ISkypeDispT<T>::get_CurrentUser(void)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_CurrentUser((Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Convert(Skype4comlib_tlb::IConversion** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Convert"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IConversion**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IConversion* __fastcall
ISkypeDispT<T>::get_Convert(void)
{
  Skype4comlib_tlb::IConversion* pVal;
  this->get_Convert((Skype4comlib_tlb::IConversion**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Friends(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Friends"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeDispT<T>::get_Friends(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Friends((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::SearchForUsers(BSTR Target/*[in]*/, 
                               Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchForUsers"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeDispT<T>::SearchForUsers(BSTR Target/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->SearchForUsers(Target, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Calls(BSTR Target/*[in,def,opt]*/, 
                          Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Calls"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
ISkypeDispT<T>::get_Calls(BSTR Target/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_Calls(Target, (Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCalls"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
ISkypeDispT<T>::get_ActiveCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_MissedCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MissedCalls"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
ISkypeDispT<T>::get_MissedCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_MissedCalls((Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Messages(BSTR Target/*[in,def,opt]*/, 
                             Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Messages"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
ISkypeDispT<T>::get_Messages(BSTR Target/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_Messages(Target, (Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_MissedMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MissedMessages"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
ISkypeDispT<T>::get_MissedMessages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_MissedMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttachmentStatus"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TAttachmentStatus __fastcall
ISkypeDispT<T>::get_AttachmentStatus(void)
{
  Skype4comlib_tlb::TAttachmentStatus pVal;
  this->get_AttachmentStatus((Skype4comlib_tlb::TAttachmentStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Protocol(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeDispT<T>::get_Protocol(void)
{
  long pVal;
  this->get_Protocol((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Protocol(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protocol"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::Attach(long Protocol/*[in,def,opt]*/, VARIANT_BOOL Wait/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attach"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = Protocol /*[VT_I4:0]*/;
  _args[2] = Wait /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                          BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/, 
                          Skype4comlib_tlb::ICall** pCall/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaceCall"), DISPID(22));
  TAutoArgs<4> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  _args[2] = Target2 /*[VT_BSTR:0]*/;
  _args[3] = Target3 /*[VT_BSTR:0]*/;
  _args[4] = Target4 /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICall**)pCall /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
ISkypeDispT<T>::PlaceCall(BSTR Target/*[in]*/, BSTR Target2/*[in,def,opt]*/, 
                          BSTR Target3/*[in,def,opt]*/, BSTR Target4/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICall* pCall;
  this->PlaceCall(Target, Target2, Target3, Target4, (Skype4comlib_tlb::ICall**)&pCall);
  return pCall;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/, 
                            Skype4comlib_tlb::IChatMessage** pMessage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMessage"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessage**)pMessage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
ISkypeDispT<T>::SendMessage(BSTR Username/*[in]*/, BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pMessage;
  this->SendMessage(Username, Text, (Skype4comlib_tlb::IChatMessage**)&pMessage);
  return pMessage;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_User(BSTR Username/*[in,def,opt]*/, 
                         Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("User"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
ISkypeDispT<T>::get_User(BSTR Username/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_User(Username, (Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Message(long Id/*[in,def,opt]*/, 
                            Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
ISkypeDispT<T>::get_Message(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  this->get_Message(Id, (Skype4comlib_tlb::IChatMessage**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Call(long Id/*[in,def,opt]*/, Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Call"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICall**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
ISkypeDispT<T>::get_Call(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICall* pVal;
  this->get_Call(Id, (Skype4comlib_tlb::ICall**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::SendCommand(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendCommand"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Chats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Chats"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatCollection* __fastcall
ISkypeDispT<T>::get_Chats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  this->get_Chats((Skype4comlib_tlb::IChatCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Chat(BSTR Name/*[in,def,opt]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Chat"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeDispT<T>::get_Chat(BSTR Name/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  this->get_Chat(Name, (Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::ChangeUserStatus(Skype4comlib_tlb::TUserStatus newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangeUserStatus"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = (int)newVal /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Conference(long Id/*[in,def,opt]*/, 
                               Skype4comlib_tlb::IConference** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Conference"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IConference**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IConference* __fastcall
ISkypeDispT<T>::get_Conference(long Id/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IConference* pVal;
  this->get_Conference(Id, (Skype4comlib_tlb::IConference**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Conferences(Skype4comlib_tlb::IConferenceCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Conferences"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IConferenceCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IConferenceCollection* __fastcall
ISkypeDispT<T>::get_Conferences(void)
{
  Skype4comlib_tlb::IConferenceCollection* pVal;
  this->get_Conferences((Skype4comlib_tlb::IConferenceCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Profile(BSTR Property/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profile"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_Profile(BSTR Property/*[in]*/)
{
  BSTR pVal;
  this->get_Profile(Property, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Profile(BSTR Property/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profile"), DISPID(33));
  TAutoArgs<2> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ActiveChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveChats"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatCollection* __fastcall
ISkypeDispT<T>::get_ActiveChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  this->get_ActiveChats((Skype4comlib_tlb::IChatCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_MissedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MissedChats"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatCollection* __fastcall
ISkypeDispT<T>::get_MissedChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  this->get_MissedChats((Skype4comlib_tlb::IChatCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_RecentChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecentChats"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatCollection* __fastcall
ISkypeDispT<T>::get_RecentChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  this->get_RecentChats((Skype4comlib_tlb::IChatCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_BookmarkedChats(Skype4comlib_tlb::IChatCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BookmarkedChats"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatCollection* __fastcall
ISkypeDispT<T>::get_BookmarkedChats(void)
{
  Skype4comlib_tlb::IChatCollection* pVal;
  this->get_BookmarkedChats((Skype4comlib_tlb::IChatCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::CreateChatWith(BSTR Username/*[in]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateChatWith"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeDispT<T>::CreateChatWith(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  this->CreateChatWith(Username, (Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/, 
                                   Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateChatMultiple"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pMembers /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pChat /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeDispT<T>::CreateChatMultiple(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  this->CreateChatMultiple(pMembers, (Skype4comlib_tlb::IChat**)&pChat);
  return pChat;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Voicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Voicemails"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemailCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemailCollection* __fastcall
ISkypeDispT<T>::get_Voicemails(void)
{
  Skype4comlib_tlb::IVoicemailCollection* pVal;
  this->get_Voicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::SendVoicemail(BSTR Username/*[in]*/, 
                              Skype4comlib_tlb::IVoicemail** pVoicemail/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendVoicemail"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemail**)pVoicemail /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
ISkypeDispT<T>::SendVoicemail(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVoicemail;
  this->SendVoicemail(Username, (Skype4comlib_tlb::IVoicemail**)&pVoicemail);
  return pVoicemail;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_UsersWaitingAuthorization(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsersWaitingAuthorization"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeDispT<T>::get_UsersWaitingAuthorization(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_UsersWaitingAuthorization((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::ClearChatHistory()
{
  _TDispID _dispid(*this, OLETEXT("ClearChatHistory"), DISPID(43));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::ClearVoicemailHistory()
{
  _TDispID _dispid(*this, OLETEXT("ClearVoicemailHistory"), DISPID(44));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::ClearCallHistory(BSTR Username/*[in,def,opt]*/, 
                                 Skype4comlib_tlb::TCallHistory Type/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearCallHistory"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CommandId(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandId"), DISPID(46));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_CommandId(void)
{
  VARIANT_BOOL pVal;
  this->get_CommandId((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_CommandId(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandId"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Application(BSTR Name/*[in]*/, 
                                Skype4comlib_tlb::IApplication** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplication**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplication* __fastcall
ISkypeDispT<T>::get_Application(BSTR Name/*[in]*/)
{
  Skype4comlib_tlb::IApplication* pVal;
  this->get_Application(Name, (Skype4comlib_tlb::IApplication**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Greeting(BSTR Username/*[in,def,opt]*/, 
                             Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Greeting"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemail**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
ISkypeDispT<T>::get_Greeting(BSTR Username/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  this->get_Greeting(Username, (Skype4comlib_tlb::IVoicemail**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Cache(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cache"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_Cache(void)
{
  VARIANT_BOOL pVal;
  this->get_Cache((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_Cache(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cache"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::ResetCache()
{
  _TDispID _dispid(*this, OLETEXT("ResetCache"), DISPID(50));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CurrentUserProfile(Skype4comlib_tlb::IProfile** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUserProfile"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IProfile**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IProfile* __fastcall
ISkypeDispT<T>::get_CurrentUserProfile(void)
{
  Skype4comlib_tlb::IProfile* pVal;
  this->get_CurrentUserProfile((Skype4comlib_tlb::IProfile**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Groups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Groups"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IGroupCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IGroupCollection* __fastcall
ISkypeDispT<T>::get_Groups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  this->get_Groups((Skype4comlib_tlb::IGroupCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_CustomGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroups"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IGroupCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IGroupCollection* __fastcall
ISkypeDispT<T>::get_CustomGroups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  this->get_CustomGroups((Skype4comlib_tlb::IGroupCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_HardwiredGroups(Skype4comlib_tlb::IGroupCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HardwiredGroups"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IGroupCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IGroupCollection* __fastcall
ISkypeDispT<T>::get_HardwiredGroups(void)
{
  Skype4comlib_tlb::IGroupCollection* pVal;
  this->get_HardwiredGroups((Skype4comlib_tlb::IGroupCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::CreateGroup(BSTR GroupName/*[in]*/, 
                            Skype4comlib_tlb::IGroup** pGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateGroup"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = GroupName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IGroup**)pGroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IGroup* __fastcall
ISkypeDispT<T>::CreateGroup(BSTR GroupName/*[in]*/)
{
  Skype4comlib_tlb::IGroup* pGroup;
  this->CreateGroup(GroupName, (Skype4comlib_tlb::IGroup**)&pGroup);
  return pGroup;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::DeleteGroup(long GroupId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteGroup"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = GroupId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Settings(Skype4comlib_tlb::ISettings** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Settings"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISettings**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISettings* __fastcall
ISkypeDispT<T>::get_Settings(void)
{
  Skype4comlib_tlb::ISettings* pVal;
  this->get_Settings((Skype4comlib_tlb::ISettings**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Client(Skype4comlib_tlb::IClient** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Client"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IClient**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IClient* __fastcall
ISkypeDispT<T>::get_Client(void)
{
  Skype4comlib_tlb::IClient* pVal;
  this->get_Client((Skype4comlib_tlb::IClient**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_FriendlyName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FriendlyName"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, BSTR Reply/*[in,def,opt]*/, 
                            VARIANT_BOOL Block/*[in,def,opt]*/, long Timeout/*[in,def,opt]*/, 
                            Skype4comlib_tlb::ICommand** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Command"), DISPID(60));
  TAutoArgs<5> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  _args[2] = Command /*[VT_BSTR:0]*/;
  _args[3] = Reply /*[VT_BSTR:0]*/;
  _args[4] = Block /*[VT_BOOL:0]*/;
  _args[5] = Timeout /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICommand**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICommand* __fastcall
ISkypeDispT<T>::get_Command(long Id/*[in]*/, BSTR Command/*[in]*/, BSTR Reply/*[in,def,opt]*/, 
                            VARIANT_BOOL Block/*[in,def,opt]*/, long Timeout/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ICommand* pVal;
  this->get_Command(Id, Command, Reply, Block, Timeout, (Skype4comlib_tlb::ICommand**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Voicemail(long Id/*[in]*/, Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Voicemail"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemail**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
ISkypeDispT<T>::get_Voicemail(long Id/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  this->get_Voicemail(Id, (Skype4comlib_tlb::IVoicemail**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_MissedVoicemails(Skype4comlib_tlb::IVoicemailCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MissedVoicemails"), DISPID(62));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemailCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemailCollection* __fastcall
ISkypeDispT<T>::get_MissedVoicemails(void)
{
  Skype4comlib_tlb::IVoicemailCollection* pVal;
  this->get_MissedVoicemails((Skype4comlib_tlb::IVoicemailCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::EnableApiSecurityContext(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableApiSecurityContext"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = (int)Context /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/
                                              , VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApiSecurityContextEnabled"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = (int)Context /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_ApiSecurityContextEnabled(Skype4comlib_tlb::TApiSecurityContext Context/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ApiSecurityContextEnabled(Context, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                          BSTR TargetNumbers/*[in]*/, 
                          Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateSms"), DISPID(65));
  TAutoArgs<2> _args;
  _args[1] = (int)MessageType /*[VT_USERDEFINED:0]*/;
  _args[2] = TargetNumbers /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessage**)pMessage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
ISkypeDispT<T>::CreateSms(Skype4comlib_tlb::TSmsMessageType MessageType/*[in]*/, 
                          BSTR TargetNumbers/*[in]*/)
{
  Skype4comlib_tlb::ISmsMessage* pMessage;
  this->CreateSms(MessageType, TargetNumbers, (Skype4comlib_tlb::ISmsMessage**)&pMessage);
  return pMessage;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_Smss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Smss"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessageCollection* __fastcall
ISkypeDispT<T>::get_Smss(void)
{
  Skype4comlib_tlb::ISmsMessageCollection* pVal;
  this->get_Smss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_MissedSmss(Skype4comlib_tlb::ISmsMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MissedSmss"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessageCollection* __fastcall
ISkypeDispT<T>::get_MissedSmss(void)
{
  Skype4comlib_tlb::ISmsMessageCollection* pVal;
  this->get_MissedSmss((Skype4comlib_tlb::ISmsMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                        BSTR ReplyToNumber/*[in,def,opt]*/, 
                        Skype4comlib_tlb::ISmsMessage** pMessage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendSms"), DISPID(68));
  TAutoArgs<3> _args;
  _args[1] = TargetNumbers /*[VT_BSTR:0]*/;
  _args[2] = MessageText /*[VT_BSTR:0]*/;
  _args[3] = ReplyToNumber /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessage**)pMessage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
ISkypeDispT<T>::SendSms(BSTR TargetNumbers/*[in]*/, BSTR MessageText/*[in]*/, 
                        BSTR ReplyToNumber/*[in,def,opt]*/)
{
  Skype4comlib_tlb::ISmsMessage* pMessage;
  this->SendSms(TargetNumbers, MessageText, ReplyToNumber, (Skype4comlib_tlb::ISmsMessage**)&pMessage);
  return pMessage;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::AsyncSearchUsers(BSTR Target/*[in]*/, long* pCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsyncSearchUsers"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pCookie /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ISkypeDispT<T>::AsyncSearchUsers(BSTR Target/*[in]*/)
{
  long pCookie;
  this->AsyncSearchUsers(Target, (long*)&pCookie);
  return pCookie;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ApiWrapperVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApiWrapperVersion"), DISPID(70));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_ApiWrapperVersion(void)
{
  BSTR pVal;
  this->get_ApiWrapperVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_SilentMode(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SilentMode"), DISPID(71));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeDispT<T>::get_SilentMode(void)
{
  VARIANT_BOOL pVal;
  this->get_SilentMode((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::set_SilentMode(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SilentMode"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_FileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransfers"), DISPID(72));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IFileTransferCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IFileTransferCollection* __fastcall
ISkypeDispT<T>::get_FileTransfers(void)
{
  Skype4comlib_tlb::IFileTransferCollection* pVal;
  this->get_FileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_ActiveFileTransfers(Skype4comlib_tlb::IFileTransferCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveFileTransfers"), DISPID(73));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IFileTransferCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IFileTransferCollection* __fastcall
ISkypeDispT<T>::get_ActiveFileTransfers(void)
{
  Skype4comlib_tlb::IFileTransferCollection* pVal;
  this->get_ActiveFileTransfers((Skype4comlib_tlb::IFileTransferCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_FocusedContacts(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusedContacts"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeDispT<T>::get_FocusedContacts(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_FocusedContacts((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::FindChatUsingBlob(BSTR Blob/*[in]*/, Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindChatUsingBlob"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Blob /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pChat /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeDispT<T>::FindChatUsingBlob(BSTR Blob/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  this->FindChatUsingBlob(Blob, (Skype4comlib_tlb::IChat**)&pChat);
  return pChat;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::CreateChatUsingBlob(BSTR Blob/*[in]*/, 
                                    Skype4comlib_tlb::IChat** pChat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateChatUsingBlob"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = Blob /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pChat /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeDispT<T>::CreateChatUsingBlob(BSTR Blob/*[in]*/)
{
  Skype4comlib_tlb::IChat* pChat;
  this->CreateChatUsingBlob(Blob, (Skype4comlib_tlb::IChat**)&pChat);
  return pChat;
}

template <class T> HRESULT __fastcall
ISkypeDispT<T>::get_PredictiveDialerCountry(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PredictiveDialerCountry"), DISPID(77));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeDispT<T>::get_PredictiveDialerCountry(void)
{
  BSTR pVal;
  this->get_PredictiveDialerCountry((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIConversion
// Interface: IConversion
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIConversionT<T>::OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/, 
                                        BSTR* pVal/*[out,retval]*/)
{
  return (*this)->OnlineStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->OnlineStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToOnlineStatus(BSTR Text/*[in]*/, 
                                        Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToOnlineStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TOnlineStatus __fastcall
TCOMIConversionT<T>::TextToOnlineStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TOnlineStatus pVal;
  OLECHECK(this->TextToOnlineStatus(, (Skype4comlib_tlb::TOnlineStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/, 
                                       BSTR* pVal/*[out,retval]*/)
{
  return (*this)->BuddyStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->BuddyStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToBuddyStatus(BSTR Text/*[in]*/, 
                                       Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToBuddyStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TBuddyStatus __fastcall
TCOMIConversionT<T>::TextToBuddyStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TBuddyStatus pVal;
  OLECHECK(this->TextToBuddyStatus(, (Skype4comlib_tlb::TBuddyStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  return (*this)->CallStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->CallStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToCallStatus(BSTR Text/*[in]*/, 
                                      Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToCallStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
TCOMIConversionT<T>::TextToCallStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TCallStatus pVal;
  OLECHECK(this->TextToCallStatus(, (Skype4comlib_tlb::TCallStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/, 
                                    BSTR* pVal/*[out,retval]*/)
{
  return (*this)->CallTypeToText(CallType, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->CallTypeToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToCallType(BSTR Text/*[in]*/, 
                                    Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  return (*this)->TextToCallType(Text, pVal);
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
TCOMIConversionT<T>::TextToCallType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TCallType pVal;
  OLECHECK(this->TextToCallType(, (Skype4comlib_tlb::TCallType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/, 
                                   BSTR* pVal/*[out,retval]*/)
{
  return (*this)->UserSexToText(Sex, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->UserSexToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToUserSex(BSTR Text/*[in]*/, 
                                   Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  return (*this)->TextToUserSex(Text, pVal);
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
TCOMIConversionT<T>::TextToUserSex(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TUserSex pVal;
  OLECHECK(this->TextToUserSex(, (Skype4comlib_tlb::TUserSex*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ConnectionStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->ConnectionStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToConnectionStatus(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToConnectionStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TConnectionStatus __fastcall
TCOMIConversionT<T>::TextToConnectionStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TConnectionStatus pVal;
  OLECHECK(this->TextToConnectionStatus(, (Skype4comlib_tlb::TConnectionStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  return (*this)->UserStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->UserStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToUserStatus(BSTR Text/*[in]*/, 
                                      Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToUserStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TUserStatus __fastcall
TCOMIConversionT<T>::TextToUserStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TUserStatus pVal;
  OLECHECK(this->TextToUserStatus(, (Skype4comlib_tlb::TUserStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/)
{
  return (*this)->CallFailureReasonToText(reason, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->CallFailureReasonToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  return (*this)->AttachmentStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->AttachmentStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ChatLeaveReasonToText(reason, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->ChatLeaveReasonToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ChatStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->ChatStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/, 
                                         BSTR* pVal/*[out,retval]*/)
{
  return (*this)->VoicemailTypeToText(Type, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->VoicemailTypeToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  return (*this)->VoicemailStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->VoicemailStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToVoicemailStatus(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToVoicemailStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TVoicemailStatus __fastcall
TCOMIConversionT<T>::TextToVoicemailStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TVoicemailStatus pVal;
  OLECHECK(this->TextToVoicemailStatus(, (Skype4comlib_tlb::TVoicemailStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/, 
                                                  BSTR* pVal/*[out,retval]*/)
{
  return (*this)->VoicemailFailureReasonToText(code, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->VoicemailFailureReasonToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ChatMessageStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->ChatMessageStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToChatMessageStatus(BSTR Text/*[in]*/, 
                                             Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToChatMessageStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TChatMessageStatus __fastcall
TCOMIConversionT<T>::TextToChatMessageStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageStatus pVal;
  OLECHECK(this->TextToChatMessageStatus(, (Skype4comlib_tlb::TChatMessageStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ChatMessageTypeToText(Type, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->ChatMessageTypeToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToChatMessageType(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/)
{
  return (*this)->TextToChatMessageType(Text, pVal);
}

template <class T> Skype4comlib_tlb::TChatMessageType __fastcall
TCOMIConversionT<T>::TextToChatMessageType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageType pVal;
  OLECHECK(this->TextToChatMessageType(, (Skype4comlib_tlb::TChatMessageType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToAttachmentStatus(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/)
{
  return (*this)->TextToAttachmentStatus(Text, pVal);
}

template <class T> Skype4comlib_tlb::TAttachmentStatus __fastcall
TCOMIConversionT<T>::TextToAttachmentStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TAttachmentStatus pVal;
  OLECHECK(this->TextToAttachmentStatus(, (Skype4comlib_tlb::TAttachmentStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/, 
                                     BSTR* pVal/*[out,retval]*/)
{
  return (*this)->GroupTypeToText(Type, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->GroupTypeToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::TextToGroupType(BSTR Text/*[in]*/, 
                                     Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/)
{
  return (*this)->TextToGroupType(Text, pVal);
}

template <class T> Skype4comlib_tlb::TGroupType __fastcall
TCOMIConversionT<T>::TextToGroupType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TGroupType pVal;
  OLECHECK(this->TextToGroupType(, (Skype4comlib_tlb::TGroupType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  return (*this)->CallVideoStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->CallVideoStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/, 
                                               BSTR* pVal/*[out,retval]*/)
{
  return (*this)->CallVideoSendStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->CallVideoSendStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Language(pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::get_Language(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Language((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::set_Language(BSTR pVal/*[in]*/)
{
  return (*this)->set_Language(pVal);
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  return (*this)->SmsMessageStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->SmsMessageStatusToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/, 
                                          BSTR* pVal/*[out,retval]*/)
{
  return (*this)->SmsMessageTypeToText(Type, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->SmsMessageTypeToText(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConversionT<T>::SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  return (*this)->SmsTargetStatusToText(Status, pVal);
}

template <class T> BSTR __fastcall
TCOMIConversionT<T>::SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->SmsTargetStatusToText(, (BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IConversion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D82F88A-B307-4074-8ED5-11C3BD213452}
// *********************************************************************//
template <class T> HRESULT __fastcall
IConversionDispT<T>::OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/, 
                                        BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnlineStatusToText"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::OnlineStatusToText(Skype4comlib_tlb::TOnlineStatus Status/*[in]*/)
{
  BSTR pVal;
  this->OnlineStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToOnlineStatus(BSTR Text/*[in]*/, 
                                        Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToOnlineStatus"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TOnlineStatus __fastcall
IConversionDispT<T>::TextToOnlineStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TOnlineStatus pVal;
  this->TextToOnlineStatus(Text, (Skype4comlib_tlb::TOnlineStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/, 
                                       BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuddyStatusToText"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::BuddyStatusToText(Skype4comlib_tlb::TBuddyStatus Status/*[in]*/)
{
  BSTR pVal;
  this->BuddyStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToBuddyStatus(BSTR Text/*[in]*/, 
                                       Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToBuddyStatus"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TBuddyStatus __fastcall
IConversionDispT<T>::TextToBuddyStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TBuddyStatus pVal;
  this->TextToBuddyStatus(Text, (Skype4comlib_tlb::TBuddyStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallStatusToText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::CallStatusToText(Skype4comlib_tlb::TCallStatus Status/*[in]*/)
{
  BSTR pVal;
  this->CallStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToCallStatus(BSTR Text/*[in]*/, 
                                      Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToCallStatus"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
IConversionDispT<T>::TextToCallStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->TextToCallStatus(Text, (Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/, 
                                    BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTypeToText"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)CallType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::CallTypeToText(Skype4comlib_tlb::TCallType CallType/*[in]*/)
{
  BSTR pVal;
  this->CallTypeToText(CallType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToCallType(BSTR Text/*[in]*/, 
                                    Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToCallType"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
IConversionDispT<T>::TextToCallType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TCallType pVal;
  this->TextToCallType(Text, (Skype4comlib_tlb::TCallType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/, 
                                   BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserSexToText"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)Sex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::UserSexToText(Skype4comlib_tlb::TUserSex Sex/*[in]*/)
{
  BSTR pVal;
  this->UserSexToText(Sex, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToUserSex(BSTR Text/*[in]*/, 
                                   Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToUserSex"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
IConversionDispT<T>::TextToUserSex(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TUserSex pVal;
  this->TextToUserSex(Text, (Skype4comlib_tlb::TUserSex*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionStatusToText"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::ConnectionStatusToText(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/)
{
  BSTR pVal;
  this->ConnectionStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToConnectionStatus(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TConnectionStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToConnectionStatus"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TConnectionStatus __fastcall
IConversionDispT<T>::TextToConnectionStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TConnectionStatus pVal;
  this->TextToConnectionStatus(Text, (Skype4comlib_tlb::TConnectionStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserStatusToText"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::UserStatusToText(Skype4comlib_tlb::TUserStatus Status/*[in]*/)
{
  BSTR pVal;
  this->UserStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToUserStatus(BSTR Text/*[in]*/, 
                                      Skype4comlib_tlb::TUserStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToUserStatus"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserStatus __fastcall
IConversionDispT<T>::TextToUserStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TUserStatus pVal;
  this->TextToUserStatus(Text, (Skype4comlib_tlb::TUserStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallFailureReasonToText"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int)reason /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::CallFailureReasonToText(Skype4comlib_tlb::TCallFailureReason reason/*[in]*/)
{
  BSTR pVal;
  this->CallFailureReasonToText(reason, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttachmentStatusToText"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::AttachmentStatusToText(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/)
{
  BSTR pVal;
  this->AttachmentStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatLeaveReasonToText"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)reason /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::ChatLeaveReasonToText(Skype4comlib_tlb::TChatLeaveReason reason/*[in]*/)
{
  BSTR pVal;
  this->ChatLeaveReasonToText(reason, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/, 
                                      BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatStatusToText"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::ChatStatusToText(Skype4comlib_tlb::TChatStatus Status/*[in]*/)
{
  BSTR pVal;
  this->ChatStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/, 
                                         BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailTypeToText"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::VoicemailTypeToText(Skype4comlib_tlb::TVoicemailType Type/*[in]*/)
{
  BSTR pVal;
  this->VoicemailTypeToText(Type, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailStatusToText"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::VoicemailStatusToText(Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/)
{
  BSTR pVal;
  this->VoicemailStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToVoicemailStatus(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToVoicemailStatus"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailStatus __fastcall
IConversionDispT<T>::TextToVoicemailStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TVoicemailStatus pVal;
  this->TextToVoicemailStatus(Text, (Skype4comlib_tlb::TVoicemailStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/
                                                  , BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailFailureReasonToText"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = (int)code /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::VoicemailFailureReasonToText(Skype4comlib_tlb::TVoicemailFailureReason code/*[in]*/)
{
  BSTR pVal;
  this->VoicemailFailureReasonToText(code, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/, 
                                             BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageStatusToText"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::ChatMessageStatusToText(Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/)
{
  BSTR pVal;
  this->ChatMessageStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToChatMessageStatus(BSTR Text/*[in]*/, 
                                             Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToChatMessageStatus"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageStatus __fastcall
IConversionDispT<T>::TextToChatMessageStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageStatus pVal;
  this->TextToChatMessageStatus(Text, (Skype4comlib_tlb::TChatMessageStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageTypeToText"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::ChatMessageTypeToText(Skype4comlib_tlb::TChatMessageType Type/*[in]*/)
{
  BSTR pVal;
  this->ChatMessageTypeToText(Type, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToChatMessageType(BSTR Text/*[in]*/, 
                                           Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToChatMessageType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageType __fastcall
IConversionDispT<T>::TextToChatMessageType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageType pVal;
  this->TextToChatMessageType(Text, (Skype4comlib_tlb::TChatMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToAttachmentStatus(BSTR Text/*[in]*/, 
                                            Skype4comlib_tlb::TAttachmentStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToAttachmentStatus"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TAttachmentStatus __fastcall
IConversionDispT<T>::TextToAttachmentStatus(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TAttachmentStatus pVal;
  this->TextToAttachmentStatus(Text, (Skype4comlib_tlb::TAttachmentStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/, 
                                     BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupTypeToText"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::GroupTypeToText(Skype4comlib_tlb::TGroupType Type/*[in]*/)
{
  BSTR pVal;
  this->GroupTypeToText(Type, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::TextToGroupType(BSTR Text/*[in]*/, 
                                     Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToGroupType"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TGroupType __fastcall
IConversionDispT<T>::TextToGroupType(BSTR Text/*[in]*/)
{
  Skype4comlib_tlb::TGroupType pVal;
  this->TextToGroupType(Text, (Skype4comlib_tlb::TGroupType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVideoStatusToText"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::CallVideoStatusToText(Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/)
{
  BSTR pVal;
  this->CallVideoStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/
                                               , BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVideoSendStatusToText"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::CallVideoSendStatusToText(Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
{
  BSTR pVal;
  this->CallVideoSendStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::get_Language(void)
{
  BSTR pVal;
  this->get_Language((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::set_Language(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsMessageStatusToText"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::SmsMessageStatusToText(Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/)
{
  BSTR pVal;
  this->SmsMessageStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/, 
                                          BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsMessageTypeToText"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::SmsMessageTypeToText(Skype4comlib_tlb::TSmsMessageType Type/*[in]*/)
{
  BSTR pVal;
  this->SmsMessageTypeToText(Type, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConversionDispT<T>::SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/, 
                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTargetStatusToText"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IConversionDispT<T>::SmsTargetStatusToText(Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/)
{
  BSTR pVal;
  this->SmsTargetStatusToText(Status, (BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICallCollection
// Interface: ICallCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMICallCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::Add(Skype4comlib_tlb::ICall* pCall/*[in]*/)
{
  return (*this)->Add(pCall);
}

template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
TCOMICallCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ICall* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::ICall**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMICallCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ICallCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {72E1EC13-0DF9-48AE-8A31-E2900D85BA55}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::Add(Skype4comlib_tlb::ICall* pCall/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::ICall** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICall**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICall* __fastcall
ICallCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ICall* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::ICall**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ICallCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIChatMessageCollection
// Interface: IChatMessageCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIChatMessageCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::Add(Skype4comlib_tlb::IChatMessage* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
TCOMIChatMessageCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IChatMessage**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIChatMessageCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChatMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9511117A-7BCA-4669-BE96-6EA6866975C1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatMessageCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::Add(Skype4comlib_tlb::IChatMessage* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChatMessage*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
IChatMessageCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IChatMessage**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IChatMessageCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIChatMessage
// Interface: IChatMessage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMIChatMessageT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Timestamp(pVal);
}

template <class T> DATE __fastcall
TCOMIChatMessageT<T>::get_Timestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_Timestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_FromHandle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FromHandle(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_FromHandle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FromHandle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_FromDisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FromDisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_FromDisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FromDisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Type(Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TChatMessageType __fastcall
TCOMIChatMessageT<T>::get_Type(void)
{
  Skype4comlib_tlb::TChatMessageType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TChatMessageType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Status(Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TChatMessageStatus __fastcall
TCOMIChatMessageT<T>::get_Status(void)
{
  Skype4comlib_tlb::TChatMessageStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TChatMessageStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_LeaveReason(Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/)
{
  return (*this)->get_LeaveReason(pVal);
}

template <class T> Skype4comlib_tlb::TChatLeaveReason __fastcall
TCOMIChatMessageT<T>::get_LeaveReason(void)
{
  Skype4comlib_tlb::TChatLeaveReason pVal;
  OLECHECK(this->get_LeaveReason((Skype4comlib_tlb::TChatLeaveReason*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Body(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Body(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_Body(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Body((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_ChatName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ChatName(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_ChatName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ChatName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Users(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Users(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Users(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIChatMessageT<T>::get_Users(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::set_Seen(VARIANT_BOOL Param1/*[in]*/)
{
  return (*this)->set_Seen(Param1);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::set_Seen(TOLEBOOL Param1/*[in]*/)
{
  return (*this)->set_Seen(VARIANT_BOOL)Param1);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  return (*this)->get_Chat(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Chat(Skype4comlib_tlb::IChatPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Chat(IChat**)pVal);
}

template <class T> Skype4comlib_tlb::IChatPtr __fastcall
TCOMIChatMessageT<T>::get_Chat(void)
{
  Skype4comlib_tlb::IChat* pVal;
  OLECHECK(this->get_Chat((Skype4comlib_tlb::IChat**)&pVal));
  return (Skype4comlib_tlb::IChatPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Sender(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  return (*this)->get_Sender(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Sender(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Sender(IUser**)pVal);
}

template <class T> Skype4comlib_tlb::IUserPtr __fastcall
TCOMIChatMessageT<T>::get_Sender(void)
{
  Skype4comlib_tlb::IUser* pVal;
  OLECHECK(this->get_Sender((Skype4comlib_tlb::IUser**)&pVal));
  return (Skype4comlib_tlb::IUserPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_EditedBy(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_EditedBy(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_EditedBy(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_EditedBy((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_EditedTimestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_EditedTimestamp(pVal);
}

template <class T> DATE __fastcall
TCOMIChatMessageT<T>::get_EditedTimestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_EditedTimestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::set_Body(BSTR pVal/*[in]*/)
{
  return (*this)->set_Body(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  return (*this)->get_Role(pVal);
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
TCOMIChatMessageT<T>::get_Role(void)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  OLECHECK(this->get_Role((Skype4comlib_tlb::TChatMemberRole*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Options(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Options(pVal);
}

template <class T> long __fastcall
TCOMIChatMessageT<T>::get_Options(void)
{
  long pVal;
  OLECHECK(this->get_Options((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_IsEditable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsEditable(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_IsEditable(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsEditable(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIChatMessageT<T>::get_IsEditable(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsEditable((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatMessageT<T>::get_Guid(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Guid(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatMessageT<T>::get_Guid(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Guid((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChatMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4CFF5C70-3C95-4566-824A-FA164586D535}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatMessageDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timestamp"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IChatMessageDispT<T>::get_Timestamp(void)
{
  DATE pVal;
  this->get_Timestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_FromHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromHandle"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_FromHandle(void)
{
  BSTR pVal;
  this->get_FromHandle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_FromDisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromDisplayName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_FromDisplayName(void)
{
  BSTR pVal;
  this->get_FromDisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Type(Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageType __fastcall
IChatMessageDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TChatMessageType pVal;
  this->get_Type((Skype4comlib_tlb::TChatMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Status(Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageStatus __fastcall
IChatMessageDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TChatMessageStatus pVal;
  this->get_Status((Skype4comlib_tlb::TChatMessageStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_LeaveReason(Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeaveReason"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatLeaveReason __fastcall
IChatMessageDispT<T>::get_LeaveReason(void)
{
  Skype4comlib_tlb::TChatLeaveReason pVal;
  this->get_LeaveReason((Skype4comlib_tlb::TChatLeaveReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Body(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Body"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_Body(void)
{
  BSTR pVal;
  this->get_Body((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_ChatName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatName"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_ChatName(void)
{
  BSTR pVal;
  this->get_ChatName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Users"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IChatMessageDispT<T>::get_Users(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::set_Seen(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seen"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Chat"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
IChatMessageDispT<T>::get_Chat(void)
{
  Skype4comlib_tlb::IChat* pVal;
  this->get_Chat((Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Sender(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sender"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
IChatMessageDispT<T>::get_Sender(void)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_Sender((Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_EditedBy(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditedBy"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_EditedBy(void)
{
  BSTR pVal;
  this->get_EditedBy((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_EditedTimestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditedTimestamp"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IChatMessageDispT<T>::get_EditedTimestamp(void)
{
  DATE pVal;
  this->get_EditedTimestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::set_Body(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Body"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Role"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
IChatMessageDispT<T>::get_Role(void)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_Role((Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Options(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatMessageDispT<T>::get_Options(void)
{
  long pVal;
  this->get_Options((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_IsEditable(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsEditable"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChatMessageDispT<T>::get_IsEditable(void)
{
  VARIANT_BOOL pVal;
  this->get_IsEditable((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMessageDispT<T>::get_Guid(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Guid"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMessageDispT<T>::get_Guid(void)
{
  BSTR pVal;
  this->get_Guid((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIChat
// Interface: IChat
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Messages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Messages(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Messages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Messages(IChatMessageCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall
TCOMIChatT<T>::get_Messages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  OLECHECK(this->get_Messages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
  return (Skype4comlib_tlb::IChatMessageCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Timestamp(pVal);
}

template <class T> DATE __fastcall
TCOMIChatT<T>::get_Timestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_Timestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Adder(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  return (*this)->get_Adder(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Adder(Skype4comlib_tlb::IUserPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Adder(IUser**)pVal);
}

template <class T> Skype4comlib_tlb::IUserPtr __fastcall
TCOMIChatT<T>::get_Adder(void)
{
  Skype4comlib_tlb::IUser* pVal;
  OLECHECK(this->get_Adder((Skype4comlib_tlb::IUser**)&pVal));
  return (Skype4comlib_tlb::IUserPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Status(Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TChatStatus __fastcall
TCOMIChatT<T>::get_Status(void)
{
  Skype4comlib_tlb::TChatStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TChatStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Posters(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Posters(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Posters(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Posters(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIChatT<T>::get_Posters(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Posters((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Members(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Members(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Members(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Members(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIChatT<T>::get_Members(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Members((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Topic(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Topic(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_Topic(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Topic((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_Topic(BSTR pVal/*[in]*/)
{
  return (*this)->set_Topic(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_ActiveMembers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveMembers(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_ActiveMembers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveMembers(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIChatT<T>::get_ActiveMembers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_ActiveMembers((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_FriendlyName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FriendlyName(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_FriendlyName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FriendlyName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::OpenWindow(void)
{
  return (*this)->OpenWindow();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::SendMessage(BSTR MessageText/*[in]*/, 
                           Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  return (*this)->SendMessage(MessageText, pVal);
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
TCOMIChatT<T>::SendMessage(BSTR MessageText/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  OLECHECK(this->SendMessage(, (Skype4comlib_tlb::IChatMessage**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Leave(void)
{
  return (*this)->Leave();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::AddMembers(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  return (*this)->AddMembers(pMembers);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_RecentMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_RecentMessages(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_RecentMessages(Skype4comlib_tlb::IChatMessageCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_RecentMessages(IChatMessageCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatMessageCollectionPtr __fastcall
TCOMIChatT<T>::get_RecentMessages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  OLECHECK(this->get_RecentMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal));
  return (Skype4comlib_tlb::IChatMessageCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Bookmarked(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Bookmarked(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Bookmarked(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Bookmarked(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIChatT<T>::get_Bookmarked(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Bookmarked((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Bookmark(void)
{
  return (*this)->Bookmark();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Unbookmark(void)
{
  return (*this)->Unbookmark();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_TopicXML(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TopicXML(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_TopicXML(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TopicXML((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_TopicXML(BSTR pVal/*[in]*/)
{
  return (*this)->set_TopicXML(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_MemberObjects(Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_MemberObjects(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_MemberObjects(Skype4comlib_tlb::IChatMemberCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_MemberObjects(IChatMemberCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IChatMemberCollectionPtr __fastcall
TCOMIChatT<T>::get_MemberObjects(void)
{
  Skype4comlib_tlb::IChatMemberCollection* pVal;
  OLECHECK(this->get_MemberObjects((Skype4comlib_tlb::IChatMemberCollection**)&pVal));
  return (Skype4comlib_tlb::IChatMemberCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Blob(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Blob(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_Blob(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Blob((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Options(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Options(pVal);
}

template <class T> long __fastcall
TCOMIChatT<T>::get_Options(void)
{
  long pVal;
  OLECHECK(this->get_Options((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_Options(long pVal/*[in]*/)
{
  return (*this)->set_Options(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_PasswordHint(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PasswordHint(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_PasswordHint(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PasswordHint((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::SetPassword(BSTR Password/*[in]*/, BSTR Hint/*[in,def,opt]*/)
{
  return (*this)->SetPassword(Password, Hint);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_GuideLines(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_GuideLines(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_GuideLines(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_GuideLines((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_GuideLines(BSTR pVal/*[in]*/)
{
  return (*this)->set_GuideLines(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_DialogPartner(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogPartner(pVal);
}

template <class T> BSTR __fastcall
TCOMIChatT<T>::get_DialogPartner(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DialogPartner((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_ActivityTimestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_ActivityTimestamp(pVal);
}

template <class T> DATE __fastcall
TCOMIChatT<T>::get_ActivityTimestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_ActivityTimestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_MyRole(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  return (*this)->get_MyRole(pVal);
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
TCOMIChatT<T>::get_MyRole(void)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  OLECHECK(this->get_MyRole((Skype4comlib_tlb::TChatMemberRole*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Applicants(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Applicants(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Applicants(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Applicants(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIChatT<T>::get_Applicants(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Applicants((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Join(void)
{
  return (*this)->Join();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Kick(BSTR Handle/*[in]*/)
{
  return (*this)->Kick(Handle);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::KickBan(BSTR Handle/*[in]*/)
{
  return (*this)->KickBan(Handle);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::Disband(void)
{
  return (*this)->Disband();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::EnterPassword(BSTR Password/*[in]*/)
{
  return (*this)->EnterPassword(Password);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::ClearRecentMessages(void)
{
  return (*this)->ClearRecentMessages();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::AcceptAdd(void)
{
  return (*this)->AcceptAdd();
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::set_AlertString(BSTR Param1/*[in]*/)
{
  return (*this)->set_AlertString(Param1);
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_Type(Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TChatType __fastcall
TCOMIChatT<T>::get_Type(void)
{
  Skype4comlib_tlb::TChatType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TChatType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatT<T>::get_MyStatus(Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_MyStatus(pVal);
}

template <class T> Skype4comlib_tlb::TChatMyStatus __fastcall
TCOMIChatT<T>::get_MyStatus(void)
{
  Skype4comlib_tlb::TChatMyStatus pVal;
  OLECHECK(this->get_MyStatus((Skype4comlib_tlb::TChatMyStatus*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C24106C-3368-4580-93E5-5ED4ACCDE306}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Messages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Messages"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
IChatDispT<T>::get_Messages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_Messages((Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timestamp"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IChatDispT<T>::get_Timestamp(void)
{
  DATE pVal;
  this->get_Timestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Adder(Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adder"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
IChatDispT<T>::get_Adder(void)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_Adder((Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Status(Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatStatus __fastcall
IChatDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TChatStatus pVal;
  this->get_Status((Skype4comlib_tlb::TChatStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Posters(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Posters"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IChatDispT<T>::get_Posters(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Posters((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Members(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Members"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IChatDispT<T>::get_Members(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Members((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Topic(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Topic"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_Topic(void)
{
  BSTR pVal;
  this->get_Topic((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_Topic(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Topic"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_ActiveMembers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMembers"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IChatDispT<T>::get_ActiveMembers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ActiveMembers((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_FriendlyName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FriendlyName"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_FriendlyName(void)
{
  BSTR pVal;
  this->get_FriendlyName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::OpenWindow()
{
  _TDispID _dispid(*this, OLETEXT("OpenWindow"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::SendMessage(BSTR MessageText/*[in]*/, 
                           Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMessage"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = MessageText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
IChatDispT<T>::SendMessage(BSTR MessageText/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  this->SendMessage(MessageText, (Skype4comlib_tlb::IChatMessage**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Leave()
{
  _TDispID _dispid(*this, OLETEXT("Leave"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::AddMembers(Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMembers"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pMembers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_RecentMessages(Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecentMessages"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
IChatDispT<T>::get_RecentMessages(void)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_RecentMessages((Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Bookmarked(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmarked"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChatDispT<T>::get_Bookmarked(void)
{
  VARIANT_BOOL pVal;
  this->get_Bookmarked((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Bookmark()
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Unbookmark()
{
  _TDispID _dispid(*this, OLETEXT("Unbookmark"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_TopicXML(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopicXML"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_TopicXML(void)
{
  BSTR pVal;
  this->get_TopicXML((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_TopicXML(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopicXML"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_MemberObjects(Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberObjects"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMemberCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMemberCollection* __fastcall
IChatDispT<T>::get_MemberObjects(void)
{
  Skype4comlib_tlb::IChatMemberCollection* pVal;
  this->get_MemberObjects((Skype4comlib_tlb::IChatMemberCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Blob(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Blob"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_Blob(void)
{
  BSTR pVal;
  this->get_Blob((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Options(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatDispT<T>::get_Options(void)
{
  long pVal;
  this->get_Options((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_Options(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_PasswordHint(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordHint"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_PasswordHint(void)
{
  BSTR pVal;
  this->get_PasswordHint((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::SetPassword(BSTR Password/*[in]*/, BSTR Hint/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPassword"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = Password /*[VT_BSTR:0]*/;
  _args[2] = Hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_GuideLines(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuideLines"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_GuideLines(void)
{
  BSTR pVal;
  this->get_GuideLines((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_GuideLines(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuideLines"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_DialogPartner(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DialogPartner"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatDispT<T>::get_DialogPartner(void)
{
  BSTR pVal;
  this->get_DialogPartner((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_ActivityTimestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivityTimestamp"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IChatDispT<T>::get_ActivityTimestamp(void)
{
  DATE pVal;
  this->get_ActivityTimestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_MyRole(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MyRole"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
IChatDispT<T>::get_MyRole(void)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_MyRole((Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Applicants(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Applicants"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IChatDispT<T>::get_Applicants(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Applicants((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Join()
{
  _TDispID _dispid(*this, OLETEXT("Join"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Kick(BSTR Handle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Kick"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Handle /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::KickBan(BSTR Handle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KickBan"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Handle /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::Disband()
{
  _TDispID _dispid(*this, OLETEXT("Disband"), DISPID(34));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::EnterPassword(BSTR Password/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterPassword"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::ClearRecentMessages()
{
  _TDispID _dispid(*this, OLETEXT("ClearRecentMessages"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::AcceptAdd()
{
  _TDispID _dispid(*this, OLETEXT("AcceptAdd"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::set_AlertString(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlertString"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_Type(Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatType __fastcall
IChatDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TChatType pVal;
  this->get_Type((Skype4comlib_tlb::TChatType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatDispT<T>::get_MyStatus(Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MyStatus"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMyStatus __fastcall
IChatDispT<T>::get_MyStatus(void)
{
  Skype4comlib_tlb::TChatMyStatus pVal;
  this->get_MyStatus((Skype4comlib_tlb::TChatMyStatus*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChatMemberCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8FFC686B-2E5E-4763-8B03-FF4FD3A0C4DA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatMemberCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatMemberCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                        Skype4comlib_tlb::IChatMember** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMember**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMember* __fastcall
IChatMemberCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IChatMember* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IChatMember**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IChatMemberCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChatMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9E9F0473-94C2-4FDD-85D2-43E3478765F9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMemberDispT<T>::get_Id(void)
{
  BSTR pVal;
  this->get_Id((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_Handle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Handle"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChatMemberDispT<T>::get_Handle(void)
{
  BSTR pVal;
  this->get_Handle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_Role(Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Role"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
IChatMemberDispT<T>::get_Role(void)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_Role((Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::set_Role(Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Role"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/, 
                                      VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSetRoleTo"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Role /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChatMemberDispT<T>::get_CanSetRoleTo(Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CanSetRoleTo(Role, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_IsActive(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsActive"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChatMemberDispT<T>::get_IsActive(void)
{
  VARIANT_BOOL pVal;
  this->get_IsActive((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatMemberDispT<T>::get_Chat(Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Chat"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
IChatMemberDispT<T>::get_Chat(void)
{
  Skype4comlib_tlb::IChat* pVal;
  this->get_Chat((Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICommand
// Interface: ICommand
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMICommandT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Id(long pVal/*[in]*/)
{
  return (*this)->set_Id(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Timeout(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Timeout(pVal);
}

template <class T> long __fastcall
TCOMICommandT<T>::get_Timeout(void)
{
  long pVal;
  OLECHECK(this->get_Timeout((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Timeout(long pVal/*[in]*/)
{
  return (*this)->set_Timeout(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Blocking(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Blocking(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Blocking(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Blocking(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandT<T>::get_Blocking(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Blocking((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Blocking(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_Blocking(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Blocking(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_Blocking(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Command(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Command(pVal);
}

template <class T> BSTR __fastcall
TCOMICommandT<T>::get_Command(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Command((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Command(BSTR pVal/*[in]*/)
{
  return (*this)->set_Command(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Reply(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Reply(pVal);
}

template <class T> BSTR __fastcall
TCOMICommandT<T>::get_Reply(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Reply((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Reply(BSTR pVal/*[in]*/)
{
  return (*this)->set_Reply(pVal);
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::get_Expected(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Expected(pVal);
}

template <class T> BSTR __fastcall
TCOMICommandT<T>::get_Expected(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Expected((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICommandT<T>::set_Expected(BSTR pVal/*[in]*/)
{
  return (*this)->set_Expected(pVal);
}

// *********************************************************************//
// DispIntf:  ICommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48E046A8-31D7-4E5F-A611-47BF32B86405}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommandDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Id(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Timeout(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommandDispT<T>::get_Timeout(void)
{
  long pVal;
  this->get_Timeout((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Timeout(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Blocking(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Blocking"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandDispT<T>::get_Blocking(void)
{
  VARIANT_BOOL pVal;
  this->get_Blocking((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Blocking(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Blocking"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Command(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Command"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandDispT<T>::get_Command(void)
{
  BSTR pVal;
  this->get_Command((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Command(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Command"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Reply(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reply"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandDispT<T>::get_Reply(void)
{
  BSTR pVal;
  this->get_Reply((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Reply(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reply"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::get_Expected(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandDispT<T>::get_Expected(void)
{
  BSTR pVal;
  this->get_Expected((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICommandDispT<T>::set_Expected(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expected"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIChatCollection
// Interface: IChatCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIChatCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::Add(Skype4comlib_tlb::IChat* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
TCOMIChatCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IChat**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChatCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIChatCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChatCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {052A4165-010A-457D-A874-E661B6322846}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChatCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::Add(Skype4comlib_tlb::IChat* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChat*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::get_Item(long Index/*[in]*/, Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
IChatCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChatCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IChatCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIConference
// Interface: IConference
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMIConferenceT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::get_Calls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Calls(pVal);
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::get_Calls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Calls(ICallCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ICallCollectionPtr __fastcall
TCOMIConferenceT<T>::get_Calls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  OLECHECK(this->get_Calls((Skype4comlib_tlb::ICallCollection**)&pVal));
  return (Skype4comlib_tlb::ICallCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveCalls(pVal);
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveCalls(ICallCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ICallCollectionPtr __fastcall
TCOMIConferenceT<T>::get_ActiveCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  OLECHECK(this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal));
  return (Skype4comlib_tlb::ICallCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::Hold(void)
{
  return (*this)->Hold();
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::Resume(void)
{
  return (*this)->Resume();
}

template <class T> HRESULT __fastcall
TCOMIConferenceT<T>::Finish(void)
{
  return (*this)->Finish();
}

// *********************************************************************//
// DispIntf:  IConference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AEB48497-5090-479C-8BE0-BD51597156A1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IConferenceDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConferenceDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConferenceDispT<T>::get_Calls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Calls"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
IConferenceDispT<T>::get_Calls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_Calls((Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConferenceDispT<T>::get_ActiveCalls(Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCalls"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
IConferenceDispT<T>::get_ActiveCalls(void)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_ActiveCalls((Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConferenceDispT<T>::Hold()
{
  _TDispID _dispid(*this, OLETEXT("Hold"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IConferenceDispT<T>::Resume()
{
  _TDispID _dispid(*this, OLETEXT("Resume"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IConferenceDispT<T>::Finish()
{
  _TDispID _dispid(*this, OLETEXT("Finish"), DISPID(6));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIConferenceCollection
// Interface: IConferenceCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIConferenceCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::Add(Skype4comlib_tlb::IConference* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::get_Item(long Index/*[in]*/, 
                                        Skype4comlib_tlb::IConference** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IConference* __fastcall
TCOMIConferenceCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IConference* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IConference**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIConferenceCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIConferenceCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IConferenceCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3E0C529-7D4F-4AF5-B501-27D25D4D2825}
// *********************************************************************//
template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConferenceCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::Add(Skype4comlib_tlb::IConference* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IConference*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                        Skype4comlib_tlb::IConference** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IConference**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IConference* __fastcall
IConferenceCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IConference* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IConference**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IConferenceCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IConferenceCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIVoicemailCollection
// Interface: IVoicemailCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIVoicemailCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::Add(Skype4comlib_tlb::IVoicemail* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::get_Item(long Index/*[in]*/, 
                                       Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
TCOMIVoicemailCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IVoicemail**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIVoicemailCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IVoicemailCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21494848-BBD5-4192-BE32-57D1A19D8E94}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVoicemailCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::Add(Skype4comlib_tlb::IVoicemail* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IVoicemail*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                       Skype4comlib_tlb::IVoicemail** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IVoicemail**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IVoicemail* __fastcall
IVoicemailCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IVoicemail* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IVoicemail**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IVoicemailCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIVoicemail
// Interface: IVoicemail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_Type(Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TVoicemailType __fastcall
TCOMIVoicemailT<T>::get_Type(void)
{
  Skype4comlib_tlb::TVoicemailType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TVoicemailType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PartnerHandle(pVal);
}

template <class T> BSTR __fastcall
TCOMIVoicemailT<T>::get_PartnerHandle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PartnerHandle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PartnerDisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMIVoicemailT<T>::get_PartnerDisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PartnerDisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_Status(Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TVoicemailStatus __fastcall
TCOMIVoicemailT<T>::get_Status(void)
{
  Skype4comlib_tlb::TVoicemailStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TVoicemailStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_FailureReason(Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/)
{
  return (*this)->get_FailureReason(pVal);
}

template <class T> Skype4comlib_tlb::TVoicemailFailureReason __fastcall
TCOMIVoicemailT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TVoicemailFailureReason pVal;
  OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TVoicemailFailureReason*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Timestamp(pVal);
}

template <class T> DATE __fastcall
TCOMIVoicemailT<T>::get_Timestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_Timestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Duration(pVal);
}

template <class T> long __fastcall
TCOMIVoicemailT<T>::get_Duration(void)
{
  long pVal;
  OLECHECK(this->get_Duration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_AllowedDuration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AllowedDuration(pVal);
}

template <class T> long __fastcall
TCOMIVoicemailT<T>::get_AllowedDuration(void)
{
  long pVal;
  OLECHECK(this->get_AllowedDuration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMIVoicemailT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::Open(void)
{
  return (*this)->Open();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::StartPlayback(void)
{
  return (*this)->StartPlayback();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::StopPlayback(void)
{
  return (*this)->StopPlayback();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::Upload(void)
{
  return (*this)->Upload();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::Download(void)
{
  return (*this)->Download();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::StartRecording(void)
{
  return (*this)->StartRecording();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::StopRecording(void)
{
  return (*this)->StopRecording();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::StartPlaybackInCall(void)
{
  return (*this)->StartPlaybackInCall();
}

template <class T> HRESULT __fastcall
TCOMIVoicemailT<T>::SetUnplayed(void)
{
  return (*this)->SetUnplayed();
}

// *********************************************************************//
// DispIntf:  IVoicemail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {120B425E-6313-4924-B5A9-3E9F2E444A00}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_Type(Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailType __fastcall
IVoicemailDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TVoicemailType pVal;
  this->get_Type((Skype4comlib_tlb::TVoicemailType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerHandle"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVoicemailDispT<T>::get_PartnerHandle(void)
{
  BSTR pVal;
  this->get_PartnerHandle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerDisplayName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVoicemailDispT<T>::get_PartnerDisplayName(void)
{
  BSTR pVal;
  this->get_PartnerDisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_Status(Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailStatus __fastcall
IVoicemailDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TVoicemailStatus pVal;
  this->get_Status((Skype4comlib_tlb::TVoicemailStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_FailureReason(Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FailureReason"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailFailureReason __fastcall
IVoicemailDispT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TVoicemailFailureReason pVal;
  this->get_FailureReason((Skype4comlib_tlb::TVoicemailFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timestamp"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IVoicemailDispT<T>::get_Timestamp(void)
{
  DATE pVal;
  this->get_Timestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVoicemailDispT<T>::get_Duration(void)
{
  long pVal;
  this->get_Duration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_AllowedDuration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowedDuration"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVoicemailDispT<T>::get_AllowedDuration(void)
{
  long pVal;
  this->get_AllowedDuration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVoicemailDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::StartPlayback()
{
  _TDispID _dispid(*this, OLETEXT("StartPlayback"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::StopPlayback()
{
  _TDispID _dispid(*this, OLETEXT("StopPlayback"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::Upload()
{
  _TDispID _dispid(*this, OLETEXT("Upload"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::Download()
{
  _TDispID _dispid(*this, OLETEXT("Download"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::StartRecording()
{
  _TDispID _dispid(*this, OLETEXT("StartRecording"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::StopRecording()
{
  _TDispID _dispid(*this, OLETEXT("StopRecording"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::StartPlaybackInCall()
{
  _TDispID _dispid(*this, OLETEXT("StartPlaybackInCall"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVoicemailDispT<T>::SetUnplayed()
{
  _TDispID _dispid(*this, OLETEXT("SetUnplayed"), DISPID(19));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIProfile
// Interface: IProfile
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FullName(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_FullName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FullName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_FullName(BSTR pVal/*[in]*/)
{
  return (*this)->set_FullName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Birthday(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Birthday(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_Birthday(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Birthday((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Birthday(BSTR pVal/*[in]*/)
{
  return (*this)->set_Birthday(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  return (*this)->get_Sex(pVal);
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
TCOMIProfileT<T>::get_Sex(void)
{
  Skype4comlib_tlb::TUserSex pVal;
  OLECHECK(this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Sex(Skype4comlib_tlb::TUserSex pVal/*[in]*/)
{
  return (*this)->set_Sex(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Languages(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Languages(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_Languages(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Languages((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Languages(BSTR pVal/*[in]*/)
{
  return (*this)->set_Languages(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Country(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_Country(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Country((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Country(BSTR pVal/*[in]*/)
{
  return (*this)->set_Country(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Province(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_Province(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Province((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Province(BSTR pVal/*[in]*/)
{
  return (*this)->set_Province(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_City(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_City(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_City((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_City(BSTR pVal/*[in]*/)
{
  return (*this)->set_City(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_PhoneHome(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneHome(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_PhoneHome(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneHome((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_PhoneHome(BSTR pVal/*[in]*/)
{
  return (*this)->set_PhoneHome(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_PhoneOffice(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneOffice(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_PhoneOffice(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneOffice((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_PhoneOffice(BSTR pVal/*[in]*/)
{
  return (*this)->set_PhoneOffice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_PhoneMobile(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PhoneMobile(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_PhoneMobile(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PhoneMobile((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_PhoneMobile(BSTR pVal/*[in]*/)
{
  return (*this)->set_PhoneMobile(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Homepage(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Homepage(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_Homepage(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Homepage((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Homepage(BSTR pVal/*[in]*/)
{
  return (*this)->set_Homepage(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_About(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_About(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_About(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_About((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_About(BSTR pVal/*[in]*/)
{
  return (*this)->set_About(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_MoodText(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_MoodText(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_MoodText(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_MoodText((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_MoodText(BSTR pVal/*[in]*/)
{
  return (*this)->set_MoodText(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Timezone(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Timezone(pVal);
}

template <class T> long __fastcall
TCOMIProfileT<T>::get_Timezone(void)
{
  long pVal;
  OLECHECK(this->get_Timezone((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_Timezone(long pVal/*[in]*/)
{
  return (*this)->set_Timezone(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallNoAnswerTimeout(short* pVal/*[out,retval]*/)
{
  return (*this)->get_CallNoAnswerTimeout(pVal);
}

template <class T> short __fastcall
TCOMIProfileT<T>::get_CallNoAnswerTimeout(void)
{
  short pVal;
  OLECHECK(this->get_CallNoAnswerTimeout((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallNoAnswerTimeout(short pVal/*[in]*/)
{
  return (*this)->set_CallNoAnswerTimeout(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallApplyCF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CallApplyCF(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallApplyCF(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CallApplyCF(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIProfileT<T>::get_CallApplyCF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_CallApplyCF((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallApplyCF(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_CallApplyCF(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallApplyCF(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_CallApplyCF(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallSendToVM(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CallSendToVM(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallSendToVM(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_CallSendToVM(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIProfileT<T>::get_CallSendToVM(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_CallSendToVM((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallSendToVM(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_CallSendToVM(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallSendToVM(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_CallSendToVM(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_CallForwardRules(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CallForwardRules(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_CallForwardRules(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CallForwardRules((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_CallForwardRules(BSTR pVal/*[in]*/)
{
  return (*this)->set_CallForwardRules(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_Balance(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Balance(pVal);
}

template <class T> long __fastcall
TCOMIProfileT<T>::get_Balance(void)
{
  long pVal;
  OLECHECK(this->get_Balance((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_BalanceCurrency(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_BalanceCurrency(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_BalanceCurrency(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_BalanceCurrency((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_BalanceToText(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_BalanceToText(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_BalanceToText(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_BalanceToText((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_IPCountry(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_IPCountry(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_IPCountry(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_IPCountry((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_ValidatedSmsNumbers(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ValidatedSmsNumbers(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_ValidatedSmsNumbers(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ValidatedSmsNumbers((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::get_RichMoodText(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RichMoodText(pVal);
}

template <class T> BSTR __fastcall
TCOMIProfileT<T>::get_RichMoodText(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RichMoodText((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProfileT<T>::set_RichMoodText(BSTR pVal/*[in]*/)
{
  return (*this)->set_RichMoodText(pVal);
}

// *********************************************************************//
// DispIntf:  IProfile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9A3D72F-04C1-4878-993C-D89F83E20569}
// *********************************************************************//
template <class T> HRESULT __fastcall
IProfileDispT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_FullName(void)
{
  BSTR pVal;
  this->get_FullName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_FullName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Birthday(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Birthday"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_Birthday(void)
{
  BSTR pVal;
  this->get_Birthday((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Birthday(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Birthday"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Sex(Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sex"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
IProfileDispT<T>::get_Sex(void)
{
  Skype4comlib_tlb::TUserSex pVal;
  this->get_Sex((Skype4comlib_tlb::TUserSex*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Sex(Skype4comlib_tlb::TUserSex pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sex"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Languages(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Languages"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_Languages(void)
{
  BSTR pVal;
  this->get_Languages((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Languages(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Languages"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Country"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_Country(void)
{
  BSTR pVal;
  this->get_Country((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Country(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Country"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Province"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_Province(void)
{
  BSTR pVal;
  this->get_Province((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Province(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Province"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("City"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_City(void)
{
  BSTR pVal;
  this->get_City((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_City(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("City"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_PhoneHome(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneHome"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_PhoneHome(void)
{
  BSTR pVal;
  this->get_PhoneHome((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_PhoneHome(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneHome"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_PhoneOffice(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneOffice"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_PhoneOffice(void)
{
  BSTR pVal;
  this->get_PhoneOffice((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_PhoneOffice(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneOffice"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_PhoneMobile(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneMobile"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_PhoneMobile(void)
{
  BSTR pVal;
  this->get_PhoneMobile((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_PhoneMobile(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhoneMobile"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Homepage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Homepage"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_Homepage(void)
{
  BSTR pVal;
  this->get_Homepage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Homepage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Homepage"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_About(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("About"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_About(void)
{
  BSTR pVal;
  this->get_About((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_About(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("About"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_MoodText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoodText"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_MoodText(void)
{
  BSTR pVal;
  this->get_MoodText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_MoodText(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoodText"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Timezone(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timezone"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProfileDispT<T>::get_Timezone(void)
{
  long pVal;
  this->get_Timezone((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_Timezone(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timezone"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_CallNoAnswerTimeout(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallNoAnswerTimeout"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IProfileDispT<T>::get_CallNoAnswerTimeout(void)
{
  short pVal;
  this->get_CallNoAnswerTimeout((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_CallNoAnswerTimeout(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallNoAnswerTimeout"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_CallApplyCF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallApplyCF"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProfileDispT<T>::get_CallApplyCF(void)
{
  VARIANT_BOOL pVal;
  this->get_CallApplyCF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_CallApplyCF(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallApplyCF"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_CallSendToVM(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallSendToVM"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProfileDispT<T>::get_CallSendToVM(void)
{
  VARIANT_BOOL pVal;
  this->get_CallSendToVM((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_CallSendToVM(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallSendToVM"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_CallForwardRules(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallForwardRules"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_CallForwardRules(void)
{
  BSTR pVal;
  this->get_CallForwardRules((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_CallForwardRules(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallForwardRules"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_Balance(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Balance"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProfileDispT<T>::get_Balance(void)
{
  long pVal;
  this->get_Balance((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_BalanceCurrency(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalanceCurrency"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_BalanceCurrency(void)
{
  BSTR pVal;
  this->get_BalanceCurrency((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_BalanceToText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalanceToText"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_BalanceToText(void)
{
  BSTR pVal;
  this->get_BalanceToText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_IPCountry(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IPCountry"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_IPCountry(void)
{
  BSTR pVal;
  this->get_IPCountry((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_ValidatedSmsNumbers(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidatedSmsNumbers"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_ValidatedSmsNumbers(void)
{
  BSTR pVal;
  this->get_ValidatedSmsNumbers((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::get_RichMoodText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RichMoodText"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProfileDispT<T>::get_RichMoodText(void)
{
  BSTR pVal;
  this->get_RichMoodText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProfileDispT<T>::set_RichMoodText(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RichMoodText"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIGroupCollection
// Interface: IGroupCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIGroupCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::Add(Skype4comlib_tlb::IGroup* pGroup/*[in]*/)
{
  return (*this)->Add(pGroup);
}

template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::get_Item(long Index/*[in]*/, 
                                   Skype4comlib_tlb::IGroup** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::IGroup* __fastcall
TCOMIGroupCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IGroup* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::IGroup**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMIGroupCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IGroupCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C5C99DC-09CF-4A9C-BD94-8D655454A1F4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IGroupCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::Add(Skype4comlib_tlb::IGroup* pGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                   Skype4comlib_tlb::IGroup** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IGroup**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IGroup* __fastcall
IGroupCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IGroup* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IGroup**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IGroupCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIGroup
// Interface: IGroup
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMIGroupT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_Type(Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TGroupType __fastcall
TCOMIGroupT<T>::get_Type(void)
{
  Skype4comlib_tlb::TGroupType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TGroupType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_CustomGroupId(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomGroupId(pVal);
}

template <class T> BSTR __fastcall
TCOMIGroupT<T>::get_CustomGroupId(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CustomGroupId((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DisplayName(pVal);
}

template <class T> BSTR __fastcall
TCOMIGroupT<T>::get_DisplayName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DisplayName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::set_DisplayName(BSTR pVal/*[in]*/)
{
  return (*this)->set_DisplayName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Users(pVal);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_Users(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Users(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIGroupT<T>::get_Users(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_OnlineUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_OnlineUsers(pVal);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_OnlineUsers(Skype4comlib_tlb::IUserCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_OnlineUsers(IUserCollection**)pVal);
}

template <class T> Skype4comlib_tlb::IUserCollectionPtr __fastcall
TCOMIGroupT<T>::get_OnlineUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  OLECHECK(this->get_OnlineUsers((Skype4comlib_tlb::IUserCollection**)&pVal));
  return (Skype4comlib_tlb::IUserCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_IsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_IsVisible(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsVisible(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIGroupT<T>::get_IsVisible(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsVisible((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_IsExpanded(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsExpanded(pVal);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::get_IsExpanded(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsExpanded(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIGroupT<T>::get_IsExpanded(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsExpanded((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::AddUser(BSTR Username/*[in]*/)
{
  return (*this)->AddUser(Username);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::RemoveUser(BSTR Username/*[in]*/)
{
  return (*this)->RemoveUser(Username);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::Share(BSTR MessageText/*[in,def,opt]*/)
{
  return (*this)->Share(MessageText);
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::Accept(void)
{
  return (*this)->Accept();
}

template <class T> HRESULT __fastcall
TCOMIGroupT<T>::Decline(void)
{
  return (*this)->Decline();
}

// *********************************************************************//
// DispIntf:  IGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84513274-9C49-4AAA-B8FC-316EB32CFE95}
// *********************************************************************//
template <class T> HRESULT __fastcall
IGroupDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IGroupDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_Type(Skype4comlib_tlb::TGroupType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TGroupType __fastcall
IGroupDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TGroupType pVal;
  this->get_Type((Skype4comlib_tlb::TGroupType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_CustomGroupId(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IGroupDispT<T>::get_CustomGroupId(void)
{
  BSTR pVal;
  this->get_CustomGroupId((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_DisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IGroupDispT<T>::get_DisplayName(void)
{
  BSTR pVal;
  this->get_DisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::set_DisplayName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_Users(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Users"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IGroupDispT<T>::get_Users(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_Users((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_OnlineUsers(Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnlineUsers"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
IGroupDispT<T>::get_OnlineUsers(void)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_OnlineUsers((Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_IsVisible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IGroupDispT<T>::get_IsVisible(void)
{
  VARIANT_BOOL pVal;
  this->get_IsVisible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::get_IsExpanded(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsExpanded"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IGroupDispT<T>::get_IsExpanded(void)
{
  VARIANT_BOOL pVal;
  this->get_IsExpanded((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::AddUser(BSTR Username/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddUser"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::RemoveUser(BSTR Username/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveUser"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::Share(BSTR MessageText/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Share"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = MessageText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::Accept()
{
  _TDispID _dispid(*this, OLETEXT("Accept"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IGroupDispT<T>::Decline()
{
  _TDispID _dispid(*this, OLETEXT("Decline"), DISPID(13));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMISettings
// Interface: ISettings
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AudioIn(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AudioIn(pVal);
}

template <class T> BSTR __fastcall
TCOMISettingsT<T>::get_AudioIn(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AudioIn((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AudioIn(BSTR pVal/*[in]*/)
{
  return (*this)->set_AudioIn(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AudioOut(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AudioOut(pVal);
}

template <class T> BSTR __fastcall
TCOMISettingsT<T>::get_AudioOut(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AudioOut((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AudioOut(BSTR pVal/*[in]*/)
{
  return (*this)->set_AudioOut(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AutoAway(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AutoAway(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AutoAway(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AutoAway(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISettingsT<T>::get_AutoAway(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_AutoAway((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AutoAway(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_AutoAway(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AutoAway(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_AutoAway(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_Ringer(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Ringer(pVal);
}

template <class T> BSTR __fastcall
TCOMISettingsT<T>::get_Ringer(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Ringer((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_Ringer(BSTR pVal/*[in]*/)
{
  return (*this)->set_Ringer(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_Avatar(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/)
{
  return (*this)->set_Avatar(Id, Param2);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_RingToneStatus(Id, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMISettingsT<T>::get_RingToneStatus(BSTR Id/*[in,def,opt]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_RingToneStatus(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_RingTone(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/)
{
  return (*this)->set_RingTone(Id, Param2);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_VideoIn(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_VideoIn(pVal);
}

template <class T> BSTR __fastcall
TCOMISettingsT<T>::get_VideoIn(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_VideoIn((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_VideoIn(BSTR pVal/*[in]*/)
{
  return (*this)->set_VideoIn(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_PCSpeaker(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_PCSpeaker(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_PCSpeaker(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_PCSpeaker(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISettingsT<T>::get_PCSpeaker(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_PCSpeaker((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_PCSpeaker(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_PCSpeaker(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_PCSpeaker(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_PCSpeaker(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AGC(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AGC(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AGC(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AGC(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISettingsT<T>::get_AGC(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_AGC((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AGC(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_AGC(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AGC(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_AGC(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AEC(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AEC(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_AEC(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_AEC(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISettingsT<T>::get_AEC(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_AEC((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AEC(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_AEC(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_AEC(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_AEC(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Language(pVal);
}

template <class T> BSTR __fastcall
TCOMISettingsT<T>::get_Language(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Language((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_Language(BSTR pVal/*[in]*/)
{
  return (*this)->set_Language(pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::set_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_RingToneStatus(Id, pVal);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::SaveAvatarToFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/)
{
  return (*this)->SaveAvatarToFile(Filename, AvatarId);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::LoadAvatarFromFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/)
{
  return (*this)->LoadAvatarFromFile(Filename, AvatarId);
}

template <class T> HRESULT __fastcall
TCOMISettingsT<T>::ResetIdleTimer(void)
{
  return (*this)->ResetIdleTimer();
}

// *********************************************************************//
// DispIntf:  ISettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2BC8C53B-3312-4A77-AC87-31DF18A1EC51}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_AudioIn(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioIn"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISettingsDispT<T>::get_AudioIn(void)
{
  BSTR pVal;
  this->get_AudioIn((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_AudioIn(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioIn"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_AudioOut(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioOut"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISettingsDispT<T>::get_AudioOut(void)
{
  BSTR pVal;
  this->get_AudioOut((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_AudioOut(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioOut"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_AutoAway(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAway"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISettingsDispT<T>::get_AutoAway(void)
{
  VARIANT_BOOL pVal;
  this->get_AutoAway((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_AutoAway(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAway"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_Ringer(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ringer"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISettingsDispT<T>::get_Ringer(void)
{
  BSTR pVal;
  this->get_Ringer((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_Ringer(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ringer"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_Avatar(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Avatar"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RingToneStatus"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISettingsDispT<T>::get_RingToneStatus(BSTR Id/*[in,def,opt]*/)
{
  VARIANT_BOOL pVal;
  this->get_RingToneStatus(Id, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_RingTone(BSTR Id/*[in,def,opt]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RingTone"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_VideoIn(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoIn"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISettingsDispT<T>::get_VideoIn(void)
{
  BSTR pVal;
  this->get_VideoIn((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_VideoIn(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoIn"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_PCSpeaker(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCSpeaker"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISettingsDispT<T>::get_PCSpeaker(void)
{
  VARIANT_BOOL pVal;
  this->get_PCSpeaker((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_PCSpeaker(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCSpeaker"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_AGC(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AGC"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISettingsDispT<T>::get_AGC(void)
{
  VARIANT_BOOL pVal;
  this->get_AGC((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_AGC(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AGC"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_AEC(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AEC"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISettingsDispT<T>::get_AEC(void)
{
  VARIANT_BOOL pVal;
  this->get_AEC((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_AEC(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AEC"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::get_Language(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISettingsDispT<T>::get_Language(void)
{
  BSTR pVal;
  this->get_Language((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_Language(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::set_RingToneStatus(BSTR Id/*[in,def,opt]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RingToneStatus"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::SaveAvatarToFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAvatarToFile"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = AvatarId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::LoadAvatarFromFile(BSTR Filename/*[in]*/, BSTR AvatarId/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadAvatarFromFile"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = AvatarId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISettingsDispT<T>::ResetIdleTimer()
{
  _TDispID _dispid(*this, OLETEXT("ResetIdleTimer"), DISPID(15));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIClient
// Interface: IClient
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIClientT<T>::Start(VARIANT_BOOL Minimized/*[in,def,opt]*/, VARIANT_BOOL Nosplash/*[in,def,opt]*/)
{
  return (*this)->Start(Minimized, Nosplash);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::Minimize(void)
{
  return (*this)->Minimize();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::Shutdown(void)
{
  return (*this)->Shutdown();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::get_IsRunning(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsRunning(pVal);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::get_IsRunning(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsRunning(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIClientT<T>::get_IsRunning(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsRunning((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenProfileDialog(void)
{
  return (*this)->OpenProfileDialog();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenUserInfoDialog(BSTR Username/*[in]*/)
{
  return (*this)->OpenUserInfoDialog(Username);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenConferenceDialog(void)
{
  return (*this)->OpenConferenceDialog();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenSearchDialog(void)
{
  return (*this)->OpenSearchDialog();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenOptionsDialog(BSTR Page/*[in]*/)
{
  return (*this)->OpenOptionsDialog(Page);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenCallHistoryTab(void)
{
  return (*this)->OpenCallHistoryTab();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenContactsTab(void)
{
  return (*this)->OpenContactsTab();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenDialpadTab(void)
{
  return (*this)->OpenDialpadTab();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenSendContactsDialog(BSTR Username/*[in,def,opt]*/)
{
  return (*this)->OpenSendContactsDialog(Username);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenBlockedUsersDialog(void)
{
  return (*this)->OpenBlockedUsersDialog();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenImportContactsWizard(void)
{
  return (*this)->OpenImportContactsWizard();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenGettingStartedWizard(void)
{
  return (*this)->OpenGettingStartedWizard();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenAuthorizationDialog(BSTR Username/*[in]*/)
{
  return (*this)->OpenAuthorizationDialog(Username);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenDialog(BSTR Name/*[in]*/, BSTR Param1/*[in,def,opt]*/, 
                            BSTR Param2/*[in,def,opt]*/)
{
  return (*this)->OpenDialog(Name, Param1, Param2);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenVideoTestDialog(void)
{
  return (*this)->OpenVideoTestDialog();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenAddContactDialog(BSTR Username/*[in,def,opt]*/)
{
  return (*this)->OpenAddContactDialog(Username);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenMessageDialog(BSTR Username/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  return (*this)->OpenMessageDialog(Username, Text);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenFileTransferDialog(BSTR User/*[in]*/, BSTR Folder/*[in]*/)
{
  return (*this)->OpenFileTransferDialog(User, Folder);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::Focus(void)
{
  return (*this)->Focus();
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::ButtonPressed(BSTR Key/*[in]*/)
{
  return (*this)->ButtonPressed(Key);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::ButtonReleased(BSTR Key/*[in]*/)
{
  return (*this)->ButtonReleased(Key);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenSmsDialog(BSTR SmsId/*[in]*/)
{
  return (*this)->OpenSmsDialog(SmsId);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, BSTR Hint/*[in]*/, 
                             Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/)
{
  return (*this)->CreateEvent(EventId, Caption, Hint, pEvent);
}

template <class T> Skype4comlib_tlb::IPluginEvent* __fastcall
TCOMIClientT<T>::CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, BSTR Hint/*[in]*/)
{
  Skype4comlib_tlb::IPluginEvent* pEvent;
  OLECHECK(this->CreateEvent(, (Skype4comlib_tlb::IPluginEvent**)&pEvent));
  return pEvent;
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                BSTR IconPath/*[in,def,opt]*/, VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/)
{
  return (*this)->CreateMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, Enabled, 
                                 ContactType, MultipleContacts, pMenuItem);
}

template <class T> Skype4comlib_tlb::IPluginMenuItem* __fastcall
TCOMIClientT<T>::CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                BSTR IconPath/*[in,def,opt]*/, VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                VARIANT_BOOL MultipleContacts/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IPluginMenuItem* pMenuItem;
  OLECHECK(this->CreateMenuItem(, (Skype4comlib_tlb::IPluginMenuItem**)&pMenuItem));
  return pMenuItem;
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::get_Wallpaper(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Wallpaper(pVal);
}

template <class T> BSTR __fastcall
TCOMIClientT<T>::get_Wallpaper(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Wallpaper((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::set_Wallpaper(BSTR pVal/*[in]*/)
{
  return (*this)->set_Wallpaper(pVal);
}

template <class T> HRESULT __fastcall
TCOMIClientT<T>::OpenLiveTab(void)
{
  return (*this)->OpenLiveTab();
}

// *********************************************************************//
// DispIntf:  IClient
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {838731B0-88E7-4BED-81DC-B35CA8433341}
// *********************************************************************//
template <class T> HRESULT __fastcall
IClientDispT<T>::Start(VARIANT_BOOL Minimized/*[in,def,opt]*/, VARIANT_BOOL Nosplash/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = Minimized /*[VT_BOOL:0]*/;
  _args[2] = Nosplash /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::Minimize()
{
  _TDispID _dispid(*this, OLETEXT("Minimize"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::get_IsRunning(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRunning"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientDispT<T>::get_IsRunning(void)
{
  VARIANT_BOOL pVal;
  this->get_IsRunning((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenProfileDialog()
{
  _TDispID _dispid(*this, OLETEXT("OpenProfileDialog"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenUserInfoDialog(BSTR Username/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenUserInfoDialog"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenConferenceDialog()
{
  _TDispID _dispid(*this, OLETEXT("OpenConferenceDialog"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenSearchDialog()
{
  _TDispID _dispid(*this, OLETEXT("OpenSearchDialog"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenOptionsDialog(BSTR Page/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenOptionsDialog"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Page /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenCallHistoryTab()
{
  _TDispID _dispid(*this, OLETEXT("OpenCallHistoryTab"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenContactsTab()
{
  _TDispID _dispid(*this, OLETEXT("OpenContactsTab"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenDialpadTab()
{
  _TDispID _dispid(*this, OLETEXT("OpenDialpadTab"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenSendContactsDialog(BSTR Username/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenSendContactsDialog"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenBlockedUsersDialog()
{
  _TDispID _dispid(*this, OLETEXT("OpenBlockedUsersDialog"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenImportContactsWizard()
{
  _TDispID _dispid(*this, OLETEXT("OpenImportContactsWizard"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenGettingStartedWizard()
{
  _TDispID _dispid(*this, OLETEXT("OpenGettingStartedWizard"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenAuthorizationDialog(BSTR Username/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenAuthorizationDialog"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenDialog(BSTR Name/*[in]*/, BSTR Param1/*[in,def,opt]*/, 
                            BSTR Param2/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenDialog"), DISPID(18));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Param1 /*[VT_BSTR:0]*/;
  _args[3] = Param2 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenVideoTestDialog()
{
  _TDispID _dispid(*this, OLETEXT("OpenVideoTestDialog"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenAddContactDialog(BSTR Username/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenAddContactDialog"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenMessageDialog(BSTR Username/*[in]*/, BSTR Text/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenMessageDialog"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenFileTransferDialog(BSTR User/*[in]*/, BSTR Folder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFileTransferDialog"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = User /*[VT_BSTR:0]*/;
  _args[2] = Folder /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::Focus()
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::ButtonPressed(BSTR Key/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonPressed"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::ButtonReleased(BSTR Key/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonReleased"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenSmsDialog(BSTR SmsId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenSmsDialog"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, BSTR Hint/*[in]*/, 
                             Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateEvent"), DISPID(27));
  TAutoArgs<3> _args;
  _args[1] = EventId /*[VT_BSTR:0]*/;
  _args[2] = Caption /*[VT_BSTR:0]*/;
  _args[3] = Hint /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IPluginEvent**)pEvent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IPluginEvent* __fastcall
IClientDispT<T>::CreateEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, BSTR Hint/*[in]*/)
{
  Skype4comlib_tlb::IPluginEvent* pEvent;
  this->CreateEvent(EventId, Caption, Hint, (Skype4comlib_tlb::IPluginEvent**)&pEvent);
  return pEvent;
}

template <class T> HRESULT __fastcall
IClientDispT<T>::CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                BSTR IconPath/*[in,def,opt]*/, VARIANT_BOOL Enabled/*[in,def,opt]*/
                                , Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateMenuItem"), DISPID(28));
  TAutoArgs<8> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  _args[2] = (int)PluginContext /*[VT_USERDEFINED:0]*/;
  _args[3] = CaptionText /*[VT_BSTR:0]*/;
  _args[4] = HintText /*[VT_BSTR:0]*/;
  _args[5] = IconPath /*[VT_BSTR:0]*/;
  _args[6] = Enabled /*[VT_BOOL:0]*/;
  _args[7] = (int)ContactType /*[VT_USERDEFINED:0]*/;
  _args[8] = MultipleContacts /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IPluginMenuItem**)pMenuItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IPluginMenuItem* __fastcall
IClientDispT<T>::CreateMenuItem(BSTR MenuItemId/*[in]*/, 
                                Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                BSTR IconPath/*[in,def,opt]*/, VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                VARIANT_BOOL MultipleContacts/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IPluginMenuItem* pMenuItem;
  this->CreateMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, Enabled, 
                       ContactType, MultipleContacts, (Skype4comlib_tlb::IPluginMenuItem**)&pMenuItem);
  return pMenuItem;
}

template <class T> HRESULT __fastcall
IClientDispT<T>::get_Wallpaper(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Wallpaper"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IClientDispT<T>::get_Wallpaper(void)
{
  BSTR pVal;
  this->get_Wallpaper((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IClientDispT<T>::set_Wallpaper(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Wallpaper"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientDispT<T>::OpenLiveTab()
{
  _TDispID _dispid(*this, OLETEXT("OpenLiveTab"), DISPID(30));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIPluginEvent
// Interface: IPluginEvent
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPluginEventT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> BSTR __fastcall
TCOMIPluginEventT<T>::get_Id(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Id((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPluginEventT<T>::Delete(void)
{
  return (*this)->Delete();
}

// *********************************************************************//
// DispIntf:  IPluginEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4DF5F83A-0ABA-417D-A6FC-62A68AE06EF7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPluginEventDispT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPluginEventDispT<T>::get_Id(void)
{
  BSTR pVal;
  this->get_Id((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPluginEventDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIPluginMenuItem
// Interface: IPluginMenuItem
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> BSTR __fastcall
TCOMIPluginMenuItemT<T>::get_Id(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Id((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  return (*this)->set_Caption(Param1);
}

template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::set_Hint(BSTR Param1/*[in]*/)
{
  return (*this)->set_Hint(Param1);
}

template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::set_Enabled(VARIANT_BOOL Param1/*[in]*/)
{
  return (*this)->set_Enabled(Param1);
}

template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::set_Enabled(TOLEBOOL Param1/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Param1);
}

template <class T> HRESULT __fastcall
TCOMIPluginMenuItemT<T>::Delete(void)
{
  return (*this)->Delete();
}

// *********************************************************************//
// DispIntf:  IPluginMenuItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C4BDF667-3FF7-4B44-A9F4-F3937E3E6D86}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPluginMenuItemDispT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPluginMenuItemDispT<T>::get_Id(void)
{
  BSTR pVal;
  this->get_Id((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPluginMenuItemDispT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPluginMenuItemDispT<T>::set_Hint(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hint"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPluginMenuItemDispT<T>::set_Enabled(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPluginMenuItemDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMISmsMessage
// Interface: ISmsMessage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMISmsMessageT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Type(Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Skype4comlib_tlb::TSmsMessageType __fastcall
TCOMISmsMessageT<T>::get_Type(void)
{
  Skype4comlib_tlb::TSmsMessageType pVal;
  OLECHECK(this->get_Type((Skype4comlib_tlb::TSmsMessageType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Status(Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TSmsMessageStatus __fastcall
TCOMISmsMessageT<T>::get_Status(void)
{
  Skype4comlib_tlb::TSmsMessageStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TSmsMessageStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_FailureReason(Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/)
{
  return (*this)->get_FailureReason(pVal);
}

template <class T> Skype4comlib_tlb::TSmsFailureReason __fastcall
TCOMISmsMessageT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TSmsFailureReason pVal;
  OLECHECK(this->get_FailureReason((Skype4comlib_tlb::TSmsFailureReason*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_IsFailedUnseen(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsFailedUnseen(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_IsFailedUnseen(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsFailedUnseen(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMISmsMessageT<T>::get_IsFailedUnseen(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsFailedUnseen((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::set_Seen(VARIANT_BOOL Param1/*[in]*/)
{
  return (*this)->set_Seen(Param1);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::set_Seen(TOLEBOOL Param1/*[in]*/)
{
  return (*this)->set_Seen(VARIANT_BOOL)Param1);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Price(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Price(pVal);
}

template <class T> long __fastcall
TCOMISmsMessageT<T>::get_Price(void)
{
  long pVal;
  OLECHECK(this->get_Price((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_PricePrecision(long* pVal/*[out,retval]*/)
{
  return (*this)->get_PricePrecision(pVal);
}

template <class T> long __fastcall
TCOMISmsMessageT<T>::get_PricePrecision(void)
{
  long pVal;
  OLECHECK(this->get_PricePrecision((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_PriceCurrency(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PriceCurrency(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsMessageT<T>::get_PriceCurrency(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PriceCurrency((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_ReplyToNumber(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ReplyToNumber(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsMessageT<T>::get_ReplyToNumber(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ReplyToNumber((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::set_ReplyToNumber(BSTR pVal/*[in]*/)
{
  return (*this)->set_ReplyToNumber(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Targets(Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Targets(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Targets(Skype4comlib_tlb::ISmsTargetCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Targets(ISmsTargetCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsTargetCollectionPtr __fastcall
TCOMISmsMessageT<T>::get_Targets(void)
{
  Skype4comlib_tlb::ISmsTargetCollection* pVal;
  OLECHECK(this->get_Targets((Skype4comlib_tlb::ISmsTargetCollection**)&pVal));
  return (Skype4comlib_tlb::ISmsTargetCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Body(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Body(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsMessageT<T>::get_Body(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Body((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::set_Body(BSTR pVal/*[in]*/)
{
  return (*this)->set_Body(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Chunks(Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/)
{
  return (*this)->get_Chunks(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Chunks(Skype4comlib_tlb::ISmsChunkCollectionPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Chunks(ISmsChunkCollection**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsChunkCollectionPtr __fastcall
TCOMISmsMessageT<T>::get_Chunks(void)
{
  Skype4comlib_tlb::ISmsChunkCollection* pVal;
  OLECHECK(this->get_Chunks((Skype4comlib_tlb::ISmsChunkCollection**)&pVal));
  return (Skype4comlib_tlb::ISmsChunkCollectionPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  return (*this)->get_Timestamp(pVal);
}

template <class T> DATE __fastcall
TCOMISmsMessageT<T>::get_Timestamp(void)
{
  DATE pVal;
  OLECHECK(this->get_Timestamp((DATE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::Send(void)
{
  return (*this)->Send();
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::get_TargetNumbers(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TargetNumbers(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsMessageT<T>::get_TargetNumbers(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TargetNumbers((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageT<T>::set_TargetNumbers(BSTR pVal/*[in]*/)
{
  return (*this)->set_TargetNumbers(pVal);
}

// *********************************************************************//
// DispIntf:  ISmsMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D97F2A-0E17-40F3-8E01-24937F936FF4}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsMessageDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Type(Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsMessageType __fastcall
ISmsMessageDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TSmsMessageType pVal;
  this->get_Type((Skype4comlib_tlb::TSmsMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Status(Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsMessageStatus __fastcall
ISmsMessageDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TSmsMessageStatus pVal;
  this->get_Status((Skype4comlib_tlb::TSmsMessageStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_FailureReason(Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FailureReason"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsFailureReason __fastcall
ISmsMessageDispT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TSmsFailureReason pVal;
  this->get_FailureReason((Skype4comlib_tlb::TSmsFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_IsFailedUnseen(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFailedUnseen"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmsMessageDispT<T>::get_IsFailedUnseen(void)
{
  VARIANT_BOOL pVal;
  this->get_IsFailedUnseen((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::set_Seen(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seen"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Price(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Price"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsMessageDispT<T>::get_Price(void)
{
  long pVal;
  this->get_Price((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_PricePrecision(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PricePrecision"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsMessageDispT<T>::get_PricePrecision(void)
{
  long pVal;
  this->get_PricePrecision((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_PriceCurrency(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PriceCurrency"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsMessageDispT<T>::get_PriceCurrency(void)
{
  BSTR pVal;
  this->get_PriceCurrency((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_ReplyToNumber(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplyToNumber"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsMessageDispT<T>::get_ReplyToNumber(void)
{
  BSTR pVal;
  this->get_ReplyToNumber((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::set_ReplyToNumber(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplyToNumber"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Targets(Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Targets"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsTargetCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsTargetCollection* __fastcall
ISmsMessageDispT<T>::get_Targets(void)
{
  Skype4comlib_tlb::ISmsTargetCollection* pVal;
  this->get_Targets((Skype4comlib_tlb::ISmsTargetCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Body(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Body"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsMessageDispT<T>::get_Body(void)
{
  BSTR pVal;
  this->get_Body((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::set_Body(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Body"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Chunks(Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Chunks"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsChunkCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsChunkCollection* __fastcall
ISmsMessageDispT<T>::get_Chunks(void)
{
  Skype4comlib_tlb::ISmsChunkCollection* pVal;
  this->get_Chunks((Skype4comlib_tlb::ISmsChunkCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_Timestamp(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timestamp"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISmsMessageDispT<T>::get_Timestamp(void)
{
  DATE pVal;
  this->get_Timestamp((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::Send()
{
  _TDispID _dispid(*this, OLETEXT("Send"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::get_TargetNumbers(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetNumbers"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsMessageDispT<T>::get_TargetNumbers(void)
{
  BSTR pVal;
  this->get_TargetNumbers((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageDispT<T>::set_TargetNumbers(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetNumbers"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMISmsTargetCollection
// Interface: ISmsTargetCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMISmsTargetCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::Add(Skype4comlib_tlb::ISmsTarget* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::get_Item(long Index/*[in]*/, 
                                       Skype4comlib_tlb::ISmsTarget** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::ISmsTarget* __fastcall
TCOMISmsTargetCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsTarget* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::ISmsTarget**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsTargetCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMISmsTargetCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISmsTargetCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2365EF3-4805-4DD3-A9D4-1A8AE3E17D84}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsTargetCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::Add(Skype4comlib_tlb::ISmsTarget* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsTarget*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                       Skype4comlib_tlb::ISmsTarget** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsTarget**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsTarget* __fastcall
ISmsTargetCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsTarget* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::ISmsTarget**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsTargetCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ISmsTargetCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMISmsTarget
// Interface: ISmsTarget
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsTargetT<T>::get_Status(Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Skype4comlib_tlb::TSmsTargetStatus __fastcall
TCOMISmsTargetT<T>::get_Status(void)
{
  Skype4comlib_tlb::TSmsTargetStatus pVal;
  OLECHECK(this->get_Status((Skype4comlib_tlb::TSmsTargetStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsTargetT<T>::get_Number(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Number(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsTargetT<T>::get_Number(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Number((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsTargetT<T>::get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  return (*this)->get_Message(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsTargetT<T>::get_Message(Skype4comlib_tlb::ISmsMessagePtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Message(ISmsMessage**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsMessagePtr __fastcall
TCOMISmsTargetT<T>::get_Message(void)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  OLECHECK(this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal));
  return (Skype4comlib_tlb::ISmsMessagePtr)pVal;
}

// *********************************************************************//
// DispIntf:  ISmsTarget
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9B9C33A-49A6-41D5-B13F-2AA4F284F406}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsTargetDispT<T>::get_Status(Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsTargetStatus __fastcall
ISmsTargetDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TSmsTargetStatus pVal;
  this->get_Status((Skype4comlib_tlb::TSmsTargetStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsTargetDispT<T>::get_Number(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Number"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsTargetDispT<T>::get_Number(void)
{
  BSTR pVal;
  this->get_Number((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsTargetDispT<T>::get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
ISmsTargetDispT<T>::get_Message(void)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMISmsChunkCollection
// Interface: ISmsChunkCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMISmsChunkCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::Add(Skype4comlib_tlb::ISmsChunk* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsChunk** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::ISmsChunk* __fastcall
TCOMISmsChunkCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsChunk* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::ISmsChunk**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsChunkCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMISmsChunkCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISmsChunkCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBDA7D2D-B1C2-4AF9-AB5B-D762341D8903}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsChunkCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::Add(Skype4comlib_tlb::ISmsChunk* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsChunk*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                      Skype4comlib_tlb::ISmsChunk** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsChunk**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsChunk* __fastcall
ISmsChunkCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsChunk* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::ISmsChunk**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsChunkCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ISmsChunkCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMISmsChunk
// Interface: ISmsChunk
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsChunkT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Id(pVal);
}

template <class T> long __fastcall
TCOMISmsChunkT<T>::get_Id(void)
{
  long pVal;
  OLECHECK(this->get_Id((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsChunkT<T>::get_CharactersLeft(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CharactersLeft(pVal);
}

template <class T> long __fastcall
TCOMISmsChunkT<T>::get_CharactersLeft(void)
{
  long pVal;
  OLECHECK(this->get_CharactersLeft((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsChunkT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Text(pVal);
}

template <class T> BSTR __fastcall
TCOMISmsChunkT<T>::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Text((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsChunkT<T>::get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  return (*this)->get_Message(pVal);
}

template <class T> HRESULT __fastcall
TCOMISmsChunkT<T>::get_Message(Skype4comlib_tlb::ISmsMessagePtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Message(ISmsMessage**)pVal);
}

template <class T> Skype4comlib_tlb::ISmsMessagePtr __fastcall
TCOMISmsChunkT<T>::get_Message(void)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  OLECHECK(this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal));
  return (Skype4comlib_tlb::ISmsMessagePtr)pVal;
}

// *********************************************************************//
// DispIntf:  ISmsChunk
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9062508-C926-4415-ABB7-A5A46DB34456}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsChunkDispT<T>::get_Id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsChunkDispT<T>::get_Id(void)
{
  long pVal;
  this->get_Id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsChunkDispT<T>::get_CharactersLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CharactersLeft"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsChunkDispT<T>::get_CharactersLeft(void)
{
  long pVal;
  this->get_CharactersLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsChunkDispT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmsChunkDispT<T>::get_Text(void)
{
  BSTR pVal;
  this->get_Text((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsChunkDispT<T>::get_Message(Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
ISmsChunkDispT<T>::get_Message(void)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  this->get_Message((Skype4comlib_tlb::ISmsMessage**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMISmsMessageCollection
// Interface: ISmsMessageCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMISmsMessageCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::Add(Skype4comlib_tlb::ISmsMessage* pItem/*[in]*/)
{
  return (*this)->Add(pItem);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::get_Item(long Index/*[in]*/, 
                                        Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
TCOMISmsMessageCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::ISmsMessage**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISmsMessageCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMISmsMessageCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISmsMessageCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D5BAB2E-69CC-4136-8E02-FC20767DC9E2}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmsMessageCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::Add(Skype4comlib_tlb::ISmsMessage* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsMessage*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                        Skype4comlib_tlb::ISmsMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsMessage* __fastcall
ISmsMessageCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ISmsMessage* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::ISmsMessage**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISmsMessageCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ISmsMessageCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IFileTransferCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70A59A25-E823-4C3F-8F33-775008895EE3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFileTransferCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::Add(Skype4comlib_tlb::IFileTransfer* pItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IFileTransfer*)pItem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                          Skype4comlib_tlb::IFileTransfer** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IFileTransfer**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IFileTransfer* __fastcall
IFileTransferCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::IFileTransfer* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::IFileTransfer**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IFileTransferCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IFileTransfer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D36B368-B88C-45FA-B136-3EF77B2EAD39}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_Id(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_Id(void)
{
  BSTR pVal;
  this->get_Id((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_Type(Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferType __fastcall
IFileTransferDispT<T>::get_Type(void)
{
  Skype4comlib_tlb::TFileTransferType pVal;
  this->get_Type((Skype4comlib_tlb::TFileTransferType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_Status(Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferStatus __fastcall
IFileTransferDispT<T>::get_Status(void)
{
  Skype4comlib_tlb::TFileTransferStatus pVal;
  this->get_Status((Skype4comlib_tlb::TFileTransferStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_FailureReason(Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FailureReason"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferFailureReason __fastcall
IFileTransferDispT<T>::get_FailureReason(void)
{
  Skype4comlib_tlb::TFileTransferFailureReason pVal;
  this->get_FailureReason((Skype4comlib_tlb::TFileTransferFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_PartnerHandle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerHandle"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_PartnerHandle(void)
{
  BSTR pVal;
  this->get_PartnerHandle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_PartnerDisplayName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartnerDisplayName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_PartnerDisplayName(void)
{
  BSTR pVal;
  this->get_PartnerDisplayName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_StartTime(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartTime"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IFileTransferDispT<T>::get_StartTime(void)
{
  DATE pVal;
  this->get_StartTime((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_FinishTime(DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinishTime"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IFileTransferDispT<T>::get_FinishTime(void)
{
  DATE pVal;
  this->get_FinishTime((DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_FilePath(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilePath"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_FilePath(void)
{
  BSTR pVal;
  this->get_FilePath((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_Filename(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filename"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_Filename(void)
{
  BSTR pVal;
  this->get_Filename((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_BytesPerSecond(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BytesPerSecond"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_BytesPerSecond(void)
{
  BSTR pVal;
  this->get_BytesPerSecond((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFileTransferDispT<T>::get_BytesTransferred(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BytesTransferred"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileTransferDispT<T>::get_BytesTransferred(void)
{
  BSTR pVal;
  this->get_BytesTransferred((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICallChannelCollection
// Interface: ICallChannelCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMICallChannelCollectionT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::Add(Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/)
{
  return (*this)->Add(pChannel);
}

template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::Remove(long Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::RemoveAll(void)
{
  return (*this)->RemoveAll();
}

template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::ICallChannel** pVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pVal);
}

template <class T> Skype4comlib_tlb::ICallChannel* __fastcall
TCOMICallChannelCollectionT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ICallChannel* pVal;
  OLECHECK(this->get_Item(, (Skype4comlib_tlb::ICallChannel**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelCollectionT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(pVal);
}

template <class T> LPUNKNOWN __fastcall
TCOMICallChannelCollectionT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ICallChannelCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CB09087-E389-4C6D-A6A2-7D4BCA8545D9}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICallChannelCollectionDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::Add(Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannel*)pChannel /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::Remove(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::RemoveAll()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                         Skype4comlib_tlb::ICallChannel** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallChannel**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallChannel* __fastcall
ICallChannelCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Skype4comlib_tlb::ICallChannel* pVal;
  this->get_Item(Index, (Skype4comlib_tlb::ICallChannel**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelCollectionDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ICallChannelCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICallChannelMessage
// Interface: ICallChannelMessage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICallChannelMessageT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Text(pVal);
}

template <class T> BSTR __fastcall
TCOMICallChannelMessageT<T>::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Text((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICallChannelMessageT<T>::set_Text(BSTR pVal/*[in]*/)
{
  return (*this)->set_Text(pVal);
}

// *********************************************************************//
// DispIntf:  ICallChannelMessage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0EF6FD5D-607D-4EA3-9C90-683D73449E9D}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICallChannelMessageDispT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICallChannelMessageDispT<T>::get_Text(void)
{
  BSTR pVal;
  this->get_Text((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICallChannelMessageDispT<T>::set_Text(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISkypeApplication
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55A5200C-B2E8-4795-A6FA-858CA3FE2F26}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::CreateApplication(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateApplication"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::DeleteApplication(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteApplication"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::get_ApplicationStreams(BSTR AppName/*[in]*/, 
                                                  Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationStreams"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
ISkypeApplicationDispT<T>::get_ApplicationStreams(BSTR AppName/*[in]*/)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_ApplicationStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::ConnectApplicationUser(BSTR AppName/*[in]*/, BSTR Username/*[in]*/, 
                                                  VARIANT_BOOL WaitConnected/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectApplicationUser"), DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  _args[2] = Username /*[VT_BSTR:0]*/;
  _args[3] = WaitConnected /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::ReadApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/, 
                                                 BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadApplicationStream"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  _args[2] = StreamHandle /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeApplicationDispT<T>::ReadApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/)
{
  BSTR pVal;
  this->ReadApplicationStream(AppName, StreamHandle, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::WriteApplicationStream(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/, 
                                                  BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteApplicationStream"), DISPID(6));
  TAutoArgs<3> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  _args[2] = StreamHandle /*[VT_BSTR:0]*/;
  _args[3] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::get_ApplicationConnectableUsers(BSTR AppName/*[in]*/, 
                                                           Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationConnectableUsers"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeApplicationDispT<T>::get_ApplicationConnectableUsers(BSTR AppName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ApplicationConnectableUsers(AppName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::get_ApplicationConnectingUsers(BSTR AppName/*[in]*/, 
                                                          Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationConnectingUsers"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeApplicationDispT<T>::get_ApplicationConnectingUsers(BSTR AppName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ApplicationConnectingUsers(AppName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::DisconnectApplicationUser(BSTR AppName/*[in]*/, BSTR Username/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectApplicationUser"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  _args[2] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::SendApplicationDatagram(BSTR AppName/*[in]*/, BSTR StreamHandle/*[in]*/, 
                                                   BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendApplicationDatagram"), DISPID(10));
  TAutoArgs<3> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  _args[2] = StreamHandle /*[VT_BSTR:0]*/;
  _args[3] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::get_ApplicationSendingStreams(BSTR AppName/*[in]*/, 
                                                         Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationSendingStreams"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
ISkypeApplicationDispT<T>::get_ApplicationSendingStreams(BSTR AppName/*[in]*/)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_ApplicationSendingStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeApplicationDispT<T>::get_ApplicationReceivedStreams(BSTR AppName/*[in]*/, 
                                                          Skype4comlib_tlb::IApplicationStreamCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplicationReceivedStreams"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = AppName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IApplicationStreamCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IApplicationStreamCollection* __fastcall
ISkypeApplicationDispT<T>::get_ApplicationReceivedStreams(BSTR AppName/*[in]*/)
{
  Skype4comlib_tlb::IApplicationStreamCollection* pVal;
  this->get_ApplicationReceivedStreams(AppName, (Skype4comlib_tlb::IApplicationStreamCollection**)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeCall
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54590FC3-0405-4A2D-B4A5-BEAC026577F2}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTimestamp(BSTR CallId/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTimestamp"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeCallDispT<T>::get_CallTimestamp(BSTR CallId/*[in]*/)
{
  DATE pVal;
  this->get_CallTimestamp(CallId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallPartnerHandle(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallPartnerHandle"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallPartnerHandle(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallPartnerHandle(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallPartnerDisplayName(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallPartnerDisplayName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallPartnerDisplayName(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallPartnerDisplayName(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallConferenceId(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallConferenceId"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallConferenceId(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallConferenceId(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallType(BSTR CallId/*[in]*/, 
                                 Skype4comlib_tlb::TCallType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallType"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallType __fastcall
ISkypeCallDispT<T>::get_CallType(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallType pVal;
  this->get_CallType(CallId, (Skype4comlib_tlb::TCallType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallStatus(BSTR CallId/*[in]*/, 
                                   Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallStatus"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
ISkypeCallDispT<T>::get_CallStatus(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->get_CallStatus(CallId, (Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallStatus(BSTR CallId/*[in]*/, Skype4comlib_tlb::TCallStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallStatus"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallFailureReason(BSTR CallId/*[in]*/, 
                                          Skype4comlib_tlb::TCallFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallFailureReason"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallFailureReason __fastcall
ISkypeCallDispT<T>::get_CallFailureReason(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallFailureReason pVal;
  this->get_CallFailureReason(CallId, (Skype4comlib_tlb::TCallFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallSubject(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallSubject"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallSubject(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallSubject(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallPstnNumber(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallPstnNumber"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallPstnNumber(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallPstnNumber(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallDuration"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeCallDispT<T>::get_CallDuration(BSTR CallId/*[in]*/)
{
  long pVal;
  this->get_CallDuration(CallId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallPstnStatus(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallPstnStatus"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallPstnStatus(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallPstnStatus(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallSeenStatus(BSTR CallId/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallSeenStatus"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::CallHold(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallHold"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::CallResume(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallResume"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::CallFinish(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallFinish"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::CallAnswer(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallAnswer"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallDTMF(BSTR CallId/*[in]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallDTMF"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallParticipants(BSTR CallId/*[in]*/, 
                                         Skype4comlib_tlb::IParticipantCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallParticipants"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IParticipantCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IParticipantCollection* __fastcall
ISkypeCallDispT<T>::get_CallParticipants(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::IParticipantCollection* pVal;
  this->get_CallParticipants(CallId, (Skype4comlib_tlb::IParticipantCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::CallJoin(BSTR CallId1/*[in]*/, BSTR CallId2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallJoin"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = CallId1 /*[VT_BSTR:0]*/;
  _args[2] = CallId2 /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallVmDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVmDuration"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeCallDispT<T>::get_CallVmDuration(BSTR CallId/*[in]*/)
{
  long pVal;
  this->get_CallVmDuration(CallId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallVmAllowedDuration(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVmAllowedDuration"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeCallDispT<T>::get_CallVmAllowedDuration(BSTR CallId/*[in]*/)
{
  long pVal;
  this->get_CallVmAllowedDuration(CallId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallVideoStatus(BSTR CallId/*[in]*/, 
                                        Skype4comlib_tlb::TCallVideoStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVideoStatus"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoStatus __fastcall
ISkypeCallDispT<T>::get_CallVideoStatus(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallVideoStatus pVal;
  this->get_CallVideoStatus(CallId, (Skype4comlib_tlb::TCallVideoStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallVideoSendStatus(BSTR CallId/*[in]*/, 
                                            Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVideoSendStatus"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
ISkypeCallDispT<T>::get_CallVideoSendStatus(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  this->get_CallVideoSendStatus(CallId, (Skype4comlib_tlb::TCallVideoSendStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallVideoReceiveStatus(BSTR CallId/*[in]*/, 
                                               Skype4comlib_tlb::TCallVideoSendStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallVideoReceiveStatus"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallVideoSendStatus __fastcall
ISkypeCallDispT<T>::get_CallVideoReceiveStatus(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallVideoSendStatus pVal;
  this->get_CallVideoReceiveStatus(CallId, (Skype4comlib_tlb::TCallVideoSendStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::StartCallVideoSend(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartCallVideoSend"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::StopCallVideoSend(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopCallVideoSend"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::StartCallVideoReceive(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartCallVideoReceive"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::StopCallVideoReceive(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopCallVideoReceive"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::RedirectCallToVoicemail(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectCallToVoicemail"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::ForwardCall(BSTR CallId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForwardCall"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallRate(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallRate"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeCallDispT<T>::get_CallRate(BSTR CallId/*[in]*/)
{
  long pVal;
  this->get_CallRate(CallId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallRateCurrency(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallRateCurrency"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallRateCurrency(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallRateCurrency(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallRatePrecision(BSTR CallId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallRatePrecision"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeCallDispT<T>::get_CallRatePrecision(BSTR CallId/*[in]*/)
{
  long pVal;
  this->get_CallRatePrecision(CallId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallInputDevice(BSTR CallId/*[in]*/, 
                                        Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                        BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallInputDevice"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallInputDevice(BSTR CallId/*[in]*/, 
                                        Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_CallInputDevice(CallId, DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallInputDevice(BSTR CallId/*[in]*/, 
                                        Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                        BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallInputDevice"), DISPID(34));
  TAutoArgs<3> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[3] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                         Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                         BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallOutputDevice"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallOutputDevice(BSTR CallId/*[in]*/, 
                                         Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_CallOutputDevice(CallId, DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallOutputDevice(BSTR CallId/*[in]*/, 
                                         Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/, 
                                         BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallOutputDevice"), DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[3] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                             Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                             , BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallCaptureMicDevice"), DISPID(36));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                             Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/)
{
  BSTR pVal;
  this->get_CallCaptureMicDevice(CallId, DeviceType, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::set_CallCaptureMicDevice(BSTR CallId/*[in]*/, 
                                             Skype4comlib_tlb::TCallIoDeviceType DeviceType/*[in]*/
                                             , BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallCaptureMicDevice"), DISPID(36));
  TAutoArgs<3> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = (int)DeviceType /*[VT_USERDEFINED:0]*/;
  _args[3] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallInputStatus(BSTR CallId/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallInputStatus"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeCallDispT<T>::get_CallInputStatus(BSTR CallId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CallInputStatus(CallId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallForwardedBy(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallForwardedBy"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallForwardedBy(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallForwardedBy(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallSeenStatus(BSTR CallId/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallSeenStatus"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeCallDispT<T>::get_CallSeenStatus(BSTR CallId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CallSeenStatus(CallId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallCanTransfer"), DISPID(39));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = Target /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeCallDispT<T>::get_CallCanTransfer(BSTR CallId/*[in]*/, BSTR Target/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CallCanTransfer(CallId, Target, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTransferStatus(BSTR CallId/*[in]*/, 
                                           Skype4comlib_tlb::TCallStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTransferStatus"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TCallStatus __fastcall
ISkypeCallDispT<T>::get_CallTransferStatus(BSTR CallId/*[in]*/)
{
  Skype4comlib_tlb::TCallStatus pVal;
  this->get_CallTransferStatus(CallId, (Skype4comlib_tlb::TCallStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTransferActive(BSTR CallId/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTransferActive"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeCallDispT<T>::get_CallTransferActive(BSTR CallId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CallTransferActive(CallId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTransferredBy(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTransferredBy"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallTransferredBy(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallTransferredBy(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTransferredTo(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTransferredTo"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallTransferredTo(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallTransferredTo(CallId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::TransferCall(BSTR CallId/*[in]*/, BSTR Target/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferCall"), DISPID(44));
  TAutoArgs<2> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  _args[2] = Target /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeCallDispT<T>::get_CallTargetIdentity(BSTR CallId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallTargetIdentity"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = CallId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeCallDispT<T>::get_CallTargetIdentity(BSTR CallId/*[in]*/)
{
  BSTR pVal;
  this->get_CallTargetIdentity(CallId, (BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeChat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F6758D2-1D3C-4A8F-BD99-6FC6B0E2DC8F}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatTimestamp(BSTR ChatName/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatTimestamp"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeChatDispT<T>::get_ChatTimestamp(BSTR ChatName/*[in]*/)
{
  DATE pVal;
  this->get_ChatTimestamp(ChatName, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatAdder(BSTR ChatName/*[in]*/, 
                                  Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatAdder"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
ISkypeChatDispT<T>::get_ChatAdder(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_ChatAdder(ChatName, (Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatStatus(BSTR ChatName/*[in]*/, 
                                   Skype4comlib_tlb::TChatStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatStatus"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatStatus __fastcall
ISkypeChatDispT<T>::get_ChatStatus(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::TChatStatus pVal;
  this->get_ChatStatus(ChatName, (Skype4comlib_tlb::TChatStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatPosters(BSTR ChatName/*[in]*/, 
                                    Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatPosters"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeChatDispT<T>::get_ChatPosters(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ChatPosters(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatMembers(BSTR ChatName/*[in]*/, 
                                    Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMembers"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeChatDispT<T>::get_ChatMembers(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ChatMembers(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatTopic(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatTopic"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatTopic(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatTopic(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatTopic(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatTopic"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatActiveMembers(BSTR ChatName/*[in]*/, 
                                          Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatActiveMembers"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeChatDispT<T>::get_ChatActiveMembers(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ChatActiveMembers(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatFriendlyName(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatFriendlyName"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatFriendlyName(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatFriendlyName(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatMessages(BSTR ChatName/*[in]*/, 
                                     Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessages"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
ISkypeChatDispT<T>::get_ChatMessages(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_ChatMessages(ChatName, (Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::OpenChatWindow(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenChatWindow"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::SendChatMessage(BSTR ChatName/*[in]*/, BSTR MessageText/*[in]*/, 
                                    Skype4comlib_tlb::IChatMessage** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendChatMessage"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = MessageText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessage**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessage* __fastcall
ISkypeChatDispT<T>::SendChatMessage(BSTR ChatName/*[in]*/, BSTR MessageText/*[in]*/)
{
  Skype4comlib_tlb::IChatMessage* pVal;
  this->SendChatMessage(ChatName, MessageText, (Skype4comlib_tlb::IChatMessage**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::LeaveChat(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeaveChat"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::AddChatMembers(BSTR ChatName/*[in]*/, 
                                   Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChatMembers"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pMembers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatRecentMessages(BSTR ChatName/*[in]*/, 
                                           Skype4comlib_tlb::IChatMessageCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatRecentMessages"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMessageCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMessageCollection* __fastcall
ISkypeChatDispT<T>::get_ChatRecentMessages(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IChatMessageCollection* pVal;
  this->get_ChatRecentMessages(ChatName, (Skype4comlib_tlb::IChatMessageCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatBookmarked(BSTR ChatName/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatBookmarked"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeChatDispT<T>::get_ChatBookmarked(BSTR ChatName/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ChatBookmarked(ChatName, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::BookmarkChat(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BookmarkChat"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::UnbookmarkChat(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnbookmarkChat"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatTopicXML(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatTopicXML"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatTopicXML(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatTopicXML(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatTopicXML(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatTopicXML"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatMemberObjects(BSTR ChatName/*[in]*/, 
                                          Skype4comlib_tlb::IChatMemberCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMemberObjects"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChatMemberCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChatMemberCollection* __fastcall
ISkypeChatDispT<T>::get_ChatMemberObjects(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IChatMemberCollection* pVal;
  this->get_ChatMemberObjects(ChatName, (Skype4comlib_tlb::IChatMemberCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatBlob(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatBlob"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatBlob(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatBlob(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatOptions(BSTR ChatName/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatOptions"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeChatDispT<T>::get_ChatOptions(BSTR ChatName/*[in]*/)
{
  long pVal;
  this->get_ChatOptions(ChatName, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatOptions(BSTR ChatName/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatOptions"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatPasswordHint(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatPasswordHint"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatPasswordHint(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatPasswordHint(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::SetChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/, 
                                    BSTR Hint/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetChatPassword"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_BSTR:0]*/;
  _args[3] = Hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatGuideLines(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatGuideLines"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatGuideLines(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatGuideLines(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatGuideLines(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatGuideLines"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatDescription(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatDescription"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatDescription(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatDescription(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatDescription(BSTR ChatName/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatDescription"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatDialogPartner(BSTR ChatName/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatDialogPartner"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatDispT<T>::get_ChatDialogPartner(BSTR ChatName/*[in]*/)
{
  BSTR pVal;
  this->get_ChatDialogPartner(ChatName, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatActivityTimestamp(BSTR ChatName/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatActivityTimestamp"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeChatDispT<T>::get_ChatActivityTimestamp(BSTR ChatName/*[in]*/)
{
  DATE pVal;
  this->get_ChatActivityTimestamp(ChatName, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatMyRole(BSTR ChatName/*[in]*/, 
                                   Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMyRole"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
ISkypeChatDispT<T>::get_ChatMyRole(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_ChatMyRole(ChatName, (Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatApplicants(BSTR ChatName/*[in]*/, 
                                       Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatApplicants"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeChatDispT<T>::get_ChatApplicants(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ChatApplicants(ChatName, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::JoinChat(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JoinChat"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::KickChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KickChatMember"), DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = Handle /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::KickBanChatMember(BSTR ChatName/*[in]*/, BSTR Handle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KickBanChatMember"), DISPID(32));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = Handle /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::DisbandChat(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisbandChat"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::EnterChatPassword(BSTR ChatName/*[in]*/, BSTR Password/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterChatPassword"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::ClearChatRecentMessages(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearChatRecentMessages"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::AcceptSharedGroupAdd(BSTR ChatName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceptSharedGroupAdd"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::set_ChatAlertString(BSTR ChatName/*[in]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatAlertString"), DISPID(37));
  TAutoArgs<2> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatType(BSTR ChatName/*[in]*/, 
                                 Skype4comlib_tlb::TChatType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatType"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatType __fastcall
ISkypeChatDispT<T>::get_ChatType(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::TChatType pVal;
  this->get_ChatType(ChatName, (Skype4comlib_tlb::TChatType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatDispT<T>::get_ChatMyStatus(BSTR ChatName/*[in]*/, 
                                     Skype4comlib_tlb::TChatMyStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMyStatus"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = ChatName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMyStatus __fastcall
ISkypeChatDispT<T>::get_ChatMyStatus(BSTR ChatName/*[in]*/)
{
  Skype4comlib_tlb::TChatMyStatus pVal;
  this->get_ChatMyStatus(ChatName, (Skype4comlib_tlb::TChatMyStatus*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeChatMessage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A569B841-CC8A-4C12-B937-CBC17D9E64F0}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageTimestamp(BSTR MessageId/*[in]*/, 
                                                    DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageTimestamp"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageTimestamp(BSTR MessageId/*[in]*/)
{
  DATE pVal;
  this->get_ChatMessageTimestamp(MessageId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageFromHandle(BSTR MessageId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageFromHandle"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageFromHandle(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageFromHandle(MessageId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageFromDisplayName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageFromDisplayName(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageFromDisplayName(MessageId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageType(BSTR MessageId/*[in]*/, 
                                               Skype4comlib_tlb::TChatMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageType __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageType(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageType pVal;
  this->get_ChatMessageType(MessageId, (Skype4comlib_tlb::TChatMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageStatus(BSTR MessageId/*[in]*/, 
                                                 Skype4comlib_tlb::TChatMessageStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageStatus"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMessageStatus __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageStatus(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::TChatMessageStatus pVal;
  this->get_ChatMessageStatus(MessageId, (Skype4comlib_tlb::TChatMessageStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/, 
                                                      Skype4comlib_tlb::TChatLeaveReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageLeaveReason"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatLeaveReason __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageLeaveReason(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::TChatLeaveReason pVal;
  this->get_ChatMessageLeaveReason(MessageId, (Skype4comlib_tlb::TChatLeaveReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageBody(BSTR MessageId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageBody"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageBody(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageBody(MessageId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageChatname(BSTR MessageId/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageChatname"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageChatname(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageChatname(MessageId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageUsers(BSTR MessageId/*[in]*/, 
                                                Skype4comlib_tlb::IUserCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageUsers"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUserCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUserCollection* __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageUsers(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::IUserCollection* pVal;
  this->get_ChatMessageUsers(MessageId, (Skype4comlib_tlb::IUserCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::set_ChatMessageSeen(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageSeen"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageSender(BSTR MessageId/*[in]*/, 
                                                 Skype4comlib_tlb::IUser** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageSender"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IUser**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IUser* __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageSender(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::IUser* pVal;
  this->get_ChatMessageSender(MessageId, (Skype4comlib_tlb::IUser**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageIsEditable(BSTR MessageId/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageIsEditable"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageIsEditable(BSTR MessageId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ChatMessageIsEditable(MessageId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageEditedBy(BSTR MessageId/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageEditedBy"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageEditedBy(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageEditedBy(MessageId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageEditedTimestamp(BSTR MessageId, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageEditedTimestamp"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageEditedTimestamp(BSTR MessageId)
{
  DATE pVal;
  this->get_ChatMessageEditedTimestamp(MessageId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::set_ChatMessageBody(BSTR MessageId/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageBody"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageRole(BSTR MessageId/*[in]*/, 
                                               Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageRole"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageRole(BSTR MessageId/*[in]*/)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_ChatMessageRole(MessageId, (Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageOptons(BSTR MessageId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageOptons"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageOptons(BSTR MessageId/*[in]*/)
{
  long pVal;
  this->get_ChatMessageOptons(MessageId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageGuid(BSTR MessageId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMessageGuid"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = MessageId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMessageDispT<T>::get_ChatMessageGuid(BSTR MessageId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMessageGuid(MessageId, (BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeChatMember
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6CF6DBDE-AB7C-4635-96ED-2FF525AB4457}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberHandle(BSTR MemberId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMemberHandle"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberHandle(BSTR MemberId/*[in]*/)
{
  BSTR pVal;
  this->get_ChatMemberHandle(MemberId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                             Skype4comlib_tlb::TChatMemberRole* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMemberRole"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TChatMemberRole __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberRole(BSTR MemberId/*[in]*/)
{
  Skype4comlib_tlb::TChatMemberRole pVal;
  this->get_ChatMemberRole(MemberId, (Skype4comlib_tlb::TChatMemberRole*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::set_ChatMemberRole(BSTR MemberId/*[in]*/, 
                                             Skype4comlib_tlb::TChatMemberRole pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMemberRole"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMemberRole Role/*[in]*/
                                                     , VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSetChatMemberRoleTo"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  _args[2] = (int)Role /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeChatMemberDispT<T>::get_CanSetChatMemberRoleTo(BSTR MemberId/*[in]*/, 
                                                     Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_CanSetChatMemberRoleTo(MemberId, Role, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::get_IsChatMemberActive(BSTR MemberId/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsChatMemberActive"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeChatMemberDispT<T>::get_IsChatMemberActive(BSTR MemberId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsChatMemberActive(MemberId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberChat(BSTR MemberId/*[in]*/, 
                                             Skype4comlib_tlb::IChat** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChatMemberChat"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = MemberId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IChat**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IChat* __fastcall
ISkypeChatMemberDispT<T>::get_ChatMemberChat(BSTR MemberId/*[in]*/)
{
  Skype4comlib_tlb::IChat* pVal;
  this->get_ChatMemberChat(MemberId, (Skype4comlib_tlb::IChat**)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeConference
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30678F8A-C104-40C0-A6AE-7C150E83300E}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeConferenceDispT<T>::get_ConferenceCalls(BSTR ConfId/*[in]*/, 
                                              Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConferenceCalls"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = ConfId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
ISkypeConferenceDispT<T>::get_ConferenceCalls(BSTR ConfId/*[in]*/)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_ConferenceCalls(ConfId, (Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeConferenceDispT<T>::get_ConferenceActiveCalls(BSTR ConfId/*[in]*/, 
                                                    Skype4comlib_tlb::ICallCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConferenceActiveCalls"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ConfId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ICallCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ICallCollection* __fastcall
ISkypeConferenceDispT<T>::get_ConferenceActiveCalls(BSTR ConfId/*[in]*/)
{
  Skype4comlib_tlb::ICallCollection* pVal;
  this->get_ConferenceActiveCalls(ConfId, (Skype4comlib_tlb::ICallCollection**)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeFileTransfer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B929860-6AF4-40DF-9D77-308CA7C23E66}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferType(BSTR TransferId/*[in]*/, 
                                                 Skype4comlib_tlb::TFileTransferType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferType"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferType __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferType(BSTR TransferId/*[in]*/)
{
  Skype4comlib_tlb::TFileTransferType pVal;
  this->get_FileTransferType(TransferId, (Skype4comlib_tlb::TFileTransferType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferStatus(BSTR TransferId/*[in]*/, 
                                                   Skype4comlib_tlb::TFileTransferStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferStatus"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferStatus __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferStatus(BSTR TransferId/*[in]*/)
{
  Skype4comlib_tlb::TFileTransferStatus pVal;
  this->get_FileTransferStatus(TransferId, (Skype4comlib_tlb::TFileTransferStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFailureReason(BSTR TransferId/*[in]*/, 
                                                          Skype4comlib_tlb::TFileTransferFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferFailureReason"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TFileTransferFailureReason __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFailureReason(BSTR TransferId/*[in]*/)
{
  Skype4comlib_tlb::TFileTransferFailureReason pVal;
  this->get_FileTransferFailureReason(TransferId, (Skype4comlib_tlb::TFileTransferFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/, 
                                                          BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferPartnerHandle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferPartnerHandle(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferPartnerHandle(TransferId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/, 
                                                               BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferPartnerDisplayName"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferPartnerDisplayName(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferPartnerDisplayName(TransferId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferStartTime(BSTR TransferId/*[in]*/, 
                                                      DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferStartTime"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferStartTime(BSTR TransferId/*[in]*/)
{
  DATE pVal;
  this->get_FileTransferStartTime(TransferId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFinishTime(BSTR TransferId/*[in]*/, 
                                                       DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferFinishTime"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFinishTime(BSTR TransferId/*[in]*/)
{
  DATE pVal;
  this->get_FileTransferFinishTime(TransferId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFilePath(BSTR TransferId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferFilePath"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFilePath(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferFilePath(TransferId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFileName(BSTR TransferId/*[in]*/, 
                                                     BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferFileName"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferFileName(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferFileName(TransferId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/, 
                                                           BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferBytesPerSecond"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferBytesPerSecond(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferBytesPerSecond(TransferId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/, 
                                                             BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileTransferBytesTransferred"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = TransferId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeFileTransferDispT<T>::get_FileTransferBytesTransferred(BSTR TransferId/*[in]*/)
{
  BSTR pVal;
  this->get_FileTransferBytesTransferred(TransferId, (BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeSms
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D0B4547-771D-4C4F-B3E8-98A33FD24D2B}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsMessageType(BSTR SmsId/*[in]*/, 
                                      Skype4comlib_tlb::TSmsMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsMessageType"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsMessageType __fastcall
ISkypeSmsDispT<T>::get_SmsMessageType(BSTR SmsId/*[in]*/)
{
  Skype4comlib_tlb::TSmsMessageType pVal;
  this->get_SmsMessageType(SmsId, (Skype4comlib_tlb::TSmsMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsMessageStatus(BSTR SmsId/*[in]*/, 
                                        Skype4comlib_tlb::TSmsMessageStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsMessageStatus"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsMessageStatus __fastcall
ISkypeSmsDispT<T>::get_SmsMessageStatus(BSTR SmsId/*[in]*/)
{
  Skype4comlib_tlb::TSmsMessageStatus pVal;
  this->get_SmsMessageStatus(SmsId, (Skype4comlib_tlb::TSmsMessageStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsFailureReason(BSTR SmsId/*[in]*/, 
                                        Skype4comlib_tlb::TSmsFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsFailureReason"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsFailureReason __fastcall
ISkypeSmsDispT<T>::get_SmsFailureReason(BSTR SmsId/*[in]*/)
{
  Skype4comlib_tlb::TSmsFailureReason pVal;
  this->get_SmsFailureReason(SmsId, (Skype4comlib_tlb::TSmsFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsIsFailedUnseen"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeSmsDispT<T>::get_SmsIsFailedUnseen(BSTR SmsId/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SmsIsFailedUnseen(SmsId, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::set_SmsSeen(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsSeen"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsPrice(BSTR SmsId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsPrice"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeSmsDispT<T>::get_SmsPrice(BSTR SmsId/*[in]*/)
{
  long pVal;
  this->get_SmsPrice(SmsId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsPriceCurrency(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsPriceCurrency"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeSmsDispT<T>::get_SmsPriceCurrency(BSTR SmsId/*[in]*/)
{
  BSTR pVal;
  this->get_SmsPriceCurrency(SmsId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsPricePrecision(BSTR SmsId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsPricePrecision"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeSmsDispT<T>::get_SmsPricePrecision(BSTR SmsId/*[in]*/)
{
  long pVal;
  this->get_SmsPricePrecision(SmsId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsReplyToNumber(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsReplyToNumber"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeSmsDispT<T>::get_SmsReplyToNumber(BSTR SmsId/*[in]*/)
{
  BSTR pVal;
  this->get_SmsReplyToNumber(SmsId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::set_SmsReplyToNumber(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsReplyToNumber"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsTargets(BSTR SmsId/*[in]*/, 
                                  Skype4comlib_tlb::ISmsTargetCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTargets"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsTargetCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsTargetCollection* __fastcall
ISkypeSmsDispT<T>::get_SmsTargets(BSTR SmsId/*[in]*/)
{
  Skype4comlib_tlb::ISmsTargetCollection* pVal;
  this->get_SmsTargets(SmsId, (Skype4comlib_tlb::ISmsTargetCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsBody(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsBody"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeSmsDispT<T>::get_SmsBody(BSTR SmsId/*[in]*/)
{
  BSTR pVal;
  this->get_SmsBody(SmsId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::set_SmsBody(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsBody"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsChunks(BSTR SmsId/*[in]*/, 
                                 Skype4comlib_tlb::ISmsChunkCollection** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsChunks"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::ISmsChunkCollection**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::ISmsChunkCollection* __fastcall
ISkypeSmsDispT<T>::get_SmsChunks(BSTR SmsId/*[in]*/)
{
  Skype4comlib_tlb::ISmsChunkCollection* pVal;
  this->get_SmsChunks(SmsId, (Skype4comlib_tlb::ISmsChunkCollection**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::SendSmsMessage(BSTR SmsId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendSmsMessage"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::DeleteSmsMessage(BSTR SmsId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteSmsMessage"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsTargetStatus(BSTR SmsId/*[in]*/, BSTR Number/*[in]*/, 
                                       Skype4comlib_tlb::TSmsTargetStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTargetStatus"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = Number /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TSmsTargetStatus __fastcall
ISkypeSmsDispT<T>::get_SmsTargetStatus(BSTR SmsId/*[in]*/, BSTR Number/*[in]*/)
{
  Skype4comlib_tlb::TSmsTargetStatus pVal;
  this->get_SmsTargetStatus(SmsId, Number, (Skype4comlib_tlb::TSmsTargetStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/, 
                                    BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsChunkText"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = ChunkId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeSmsDispT<T>::get_SmsChunkText(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/)
{
  BSTR pVal;
  this->get_SmsChunkText(SmsId, ChunkId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/, 
                                              long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsChunkCharactersLeft"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = ChunkId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeSmsDispT<T>::get_SmsChunkCharactersLeft(BSTR SmsId/*[in]*/, BSTR ChunkId/*[in]*/)
{
  long pVal;
  this->get_SmsChunkCharactersLeft(SmsId, ChunkId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsTimestamp(BSTR SmsId/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTimestamp"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeSmsDispT<T>::get_SmsTimestamp(BSTR SmsId/*[in]*/)
{
  DATE pVal;
  this->get_SmsTimestamp(SmsId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::get_SmsTargetNumbers(BSTR SmsId/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTargetNumbers"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeSmsDispT<T>::get_SmsTargetNumbers(BSTR SmsId/*[in]*/)
{
  BSTR pVal;
  this->get_SmsTargetNumbers(SmsId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeSmsDispT<T>::set_SmsTargetNumbers(BSTR SmsId/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmsTargetNumbers"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = SmsId /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISkypeUser
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C219279C-F557-4BAD-B3BE-750E91CA9944}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserFullName(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserFullName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserFullName(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserFullName(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserBirthday(BSTR Username/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserBirthday"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeUserDispT<T>::get_UserBirthday(BSTR Username/*[in]*/)
{
  DATE pVal;
  this->get_UserBirthday(Username, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserSex(BSTR Username/*[in]*/, 
                                Skype4comlib_tlb::TUserSex* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserSex"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TUserSex __fastcall
ISkypeUserDispT<T>::get_UserSex(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::TUserSex pVal;
  this->get_UserSex(Username, (Skype4comlib_tlb::TUserSex*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserCountry(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserCountry"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserCountry(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserCountry(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserProvince(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserProvince"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserProvince(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserProvince(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserCity(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserCity"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserCity(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserCity(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserPhoneHome(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPhoneHome"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserPhoneHome(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserPhoneHome(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserPhoneOffice(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPhoneOffice"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserPhoneOffice(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserPhoneOffice(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserPhoneMobile(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPhoneMobile"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserPhoneMobile(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserPhoneMobile(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserHomepage(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserHomepage"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserHomepage(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserHomepage(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserAbout(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserAbout"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserAbout(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserAbout(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserHasCallEquipment(BSTR Username/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserHasCallEquipment"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserHasCallEquipment(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserHasCallEquipment(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserBuddyStatus(BSTR Username/*[in]*/, 
                                        Skype4comlib_tlb::TBuddyStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserBuddyStatus"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TBuddyStatus __fastcall
ISkypeUserDispT<T>::get_UserBuddyStatus(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::TBuddyStatus pVal;
  this->get_UserBuddyStatus(Username, (Skype4comlib_tlb::TBuddyStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::set_UserBuddyStatus(BSTR Username/*[in]*/, 
                                        Skype4comlib_tlb::TBuddyStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserBuddyStatus"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserIsAuthorized(BSTR Username/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsAuthorized"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserIsAuthorized(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserIsAuthorized(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::set_UserIsAuthorized(BSTR Username/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsAuthorized"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserIsBlocked(BSTR Username/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsBlocked"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserIsBlocked(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserIsBlocked(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::set_UserIsBlocked(BSTR Username/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsBlocked"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserDisplayName(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserDisplayName"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserDisplayName(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserDisplayName(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserOnlineStatus(BSTR Username/*[in]*/, 
                                         Skype4comlib_tlb::TOnlineStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserOnlineStatus"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TOnlineStatus __fastcall
ISkypeUserDispT<T>::get_UserOnlineStatus(BSTR Username/*[in]*/)
{
  Skype4comlib_tlb::TOnlineStatus pVal;
  this->get_UserOnlineStatus(Username, (Skype4comlib_tlb::TOnlineStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserLastOnline(BSTR Username/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserLastOnline"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeUserDispT<T>::get_UserLastOnline(BSTR Username/*[in]*/)
{
  DATE pVal;
  this->get_UserLastOnline(Username, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserCountryCode(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserCountryCode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserCountryCode(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserCountryCode(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserReceivedAuthRequest(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserReceivedAuthRequest"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserReceivedAuthRequest(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserReceivedAuthRequest(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserSpeedDial(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserSpeedDial"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserSpeedDial(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserSpeedDial(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::set_UserSpeedDial(BSTR Username/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserSpeedDial"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserCanLeaveVoicemail(BSTR Username/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserCanLeaveVoicemail"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserCanLeaveVoicemail(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserCanLeaveVoicemail(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserMoodText(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserMoodText"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserMoodText(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserMoodText(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserAliases(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserAliases"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserAliases(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserAliases(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserTimezone(BSTR Username/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTimezone"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeUserDispT<T>::get_UserTimezone(BSTR Username/*[in]*/)
{
  long pVal;
  this->get_UserTimezone(Username, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_IsCallForwardActive(BSTR Username/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsCallForwardActive"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_IsCallForwardActive(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsCallForwardActive(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserLanguage(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserLanguage"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserLanguage(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserLanguage(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserLanguageCode(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserLanguageCode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserLanguageCode(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserLanguageCode(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserIsVideoCapable(BSTR Username/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsVideoCapable"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserIsVideoCapable(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserIsVideoCapable(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserNumberOfAuthBuddies"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeUserDispT<T>::get_UserNumberOfAuthBuddies(BSTR Username/*[in]*/)
{
  long pVal;
  this->get_UserNumberOfAuthBuddies(Username, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::set_UserDisplayName(BSTR Username/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserDisplayName"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserRichMoodText(BSTR Username/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserRichMoodText"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeUserDispT<T>::get_UserRichMoodText(BSTR Username/*[in]*/)
{
  BSTR pVal;
  this->get_UserRichMoodText(Username, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeUserDispT<T>::get_UserIsVoicemailCapable(BSTR Username/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserIsVoicemailCapable"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISkypeUserDispT<T>::get_UserIsVoicemailCapable(BSTR Username/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_UserIsVoicemailCapable(Username, (VARIANT_BOOL*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ISkypeVoicemail
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D33E14E-9921-4860-92F4-5DC1586F403C}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailType(BSTR VoicemailId/*[in]*/, 
                                           Skype4comlib_tlb::TVoicemailType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailType"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailType __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailType(BSTR VoicemailId/*[in]*/)
{
  Skype4comlib_tlb::TVoicemailType pVal;
  this->get_VoicemailType(VoicemailId, (Skype4comlib_tlb::TVoicemailType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/, 
                                                    BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailPartnerHandle"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailPartnerHandle(BSTR VoicemailId/*[in]*/)
{
  BSTR pVal;
  this->get_VoicemailPartnerHandle(VoicemailId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/, 
                                                         BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailPartnerDisplayName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailPartnerDisplayName(BSTR VoicemailId/*[in]*/)
{
  BSTR pVal;
  this->get_VoicemailPartnerDisplayName(VoicemailId, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailStatus(BSTR VoicemailId/*[in]*/, 
                                             Skype4comlib_tlb::TVoicemailStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailStatus"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailStatus __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailStatus(BSTR VoicemailId/*[in]*/)
{
  Skype4comlib_tlb::TVoicemailStatus pVal;
  this->get_VoicemailStatus(VoicemailId, (Skype4comlib_tlb::TVoicemailStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/, 
                                                    Skype4comlib_tlb::TVoicemailFailureReason* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailFailureReason"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Skype4comlib_tlb::TVoicemailFailureReason __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailFailureReason(BSTR VoicemailId/*[in]*/)
{
  Skype4comlib_tlb::TVoicemailFailureReason pVal;
  this->get_VoicemailFailureReason(VoicemailId, (Skype4comlib_tlb::TVoicemailFailureReason*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/, DATE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailTimestamp"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailTimestamp(BSTR VoicemailId/*[in]*/)
{
  DATE pVal;
  this->get_VoicemailTimestamp(VoicemailId, (DATE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailDuration(BSTR VoicemailId/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailDuration"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailDuration(BSTR VoicemailId/*[in]*/)
{
  long pVal;
  this->get_VoicemailDuration(VoicemailId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/, 
                                                      long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VoicemailAllowedDuration"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISkypeVoicemailDispT<T>::get_VoicemailAllowedDuration(BSTR VoicemailId/*[in]*/)
{
  long pVal;
  this->get_VoicemailAllowedDuration(VoicemailId, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::OpenVoicemail(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenVoicemail"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::StartVoicemailPlayback(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartVoicemailPlayback"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::StopVoicemailPlayback(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopVoicemailPlayback"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::UploadVoicemail(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UploadVoicemail"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::DownloadVoicemail(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadVoicemail"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::StartVoicemailRecording(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartVoicemailRecording"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::StopVoicemailRecording(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopVoicemailRecording"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::DeleteVoicemail(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteVoicemail"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::StartVoicemailPlaybackInCall(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartVoicemailPlaybackInCall"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypeVoicemailDispT<T>::SetVoicemailUnplayed(BSTR VoicemailId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVoicemailUnplayed"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = VoicemailId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _ISkypeEvents
// Flags:     (4096) Dispatchable
// GUID:      {F4F90CDD-C620-4118-945E-CAA1BBEBA435}
// *********************************************************************//
template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::Command(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
{
  _TDispID _dispid(/* Command */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::Reply(Skype4comlib_tlb::ICommand* pCommand/*[in]*/)
{
  _TDispID _dispid(/* Reply */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::Error(Skype4comlib_tlb::ICommand* pCommand/*[in]*/, long Number/*[in]*/, 
                             BSTR Description/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICommand*)pCommand /*[VT_USERDEFINED:1]*/;
  _args[2] = Number /*[VT_I4:0]*/;
  _args[3] = Description /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus Status/*[in]*/)
{
  _TDispID _dispid(/* AttachmentStatus */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ConnectionStatus(Skype4comlib_tlb::TConnectionStatus Status/*[in]*/)
{
  _TDispID _dispid(/* ConnectionStatus */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::UserStatus(Skype4comlib_tlb::TUserStatus Status/*[in]*/)
{
  _TDispID _dispid(/* UserStatus */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::OnlineStatus(Skype4comlib_tlb::IUser* pUser/*[in]*/, 
                                    Skype4comlib_tlb::TOnlineStatus Status/*[in]*/)
{
  _TDispID _dispid(/* OnlineStatus */ DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallStatus(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                  Skype4comlib_tlb::TCallStatus Status/*[in]*/)
{
  _TDispID _dispid(/* CallStatus */ DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallHistory()
{
  _TDispID _dispid(/* CallHistory */ DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::Mute(VARIANT_BOOL Mute/*[in]*/)
{
  _TDispID _dispid(/* Mute */ DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Mute /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::MessageStatus(Skype4comlib_tlb::IChatMessage* pMessage/*[in]*/, 
                                     Skype4comlib_tlb::TChatMessageStatus Status/*[in]*/)
{
  _TDispID _dispid(/* MessageStatus */ DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChatMessage*)pMessage /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::MessageHistory(BSTR Username/*[in]*/)
{
  _TDispID _dispid(/* MessageHistory */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::AutoAway(VARIANT_BOOL Automatic/*[in]*/)
{
  _TDispID _dispid(/* AutoAway */ DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Automatic /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallDtmfReceived(Skype4comlib_tlb::ICall* pCall/*[in]*/, BSTR code/*[in]*/)
{
  _TDispID _dispid(/* CallDtmfReceived */ DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = code /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::VoicemailStatus(Skype4comlib_tlb::IVoicemail* pMail/*[in]*/, 
                                       Skype4comlib_tlb::TVoicemailStatus Status/*[in]*/)
{
  _TDispID _dispid(/* VoicemailStatus */ DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IVoicemail*)pMail /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ApplicationConnecting(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                             Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
{
  _TDispID _dispid(/* ApplicationConnecting */ DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ApplicationStreams(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
{
  _TDispID _dispid(/* ApplicationStreams */ DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ApplicationDatagram(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                           Skype4comlib_tlb::IApplicationStream* pStream/*[in]*/, 
                                           BSTR Text/*[in]*/)
{
  _TDispID _dispid(/* ApplicationDatagram */ DISPID(18));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStream*)pStream /*[VT_USERDEFINED:1]*/;
  _args[3] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ApplicationSending(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
{
  _TDispID _dispid(/* ApplicationSending */ DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ApplicationReceiving(Skype4comlib_tlb::IApplication* pApp/*[in]*/, 
                                            Skype4comlib_tlb::IApplicationStreamCollection* pStreams/*[in]*/)
{
  _TDispID _dispid(/* ApplicationReceiving */ DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IApplication*)pApp /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IApplicationStreamCollection*)pStreams /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ContactsFocused(BSTR Username/*[in]*/)
{
  _TDispID _dispid(/* ContactsFocused */ DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Username /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::GroupVisible(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                    VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(/* GroupVisible */ DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
  _args[2] = Visible /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::GroupExpanded(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                     VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(/* GroupExpanded */ DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
  _args[2] = Expanded /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::GroupUsers(Skype4comlib_tlb::IGroup* pGroup/*[in]*/, 
                                  Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
{
  _TDispID _dispid(/* GroupUsers */ DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IGroup*)pGroup /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::GroupDeleted(long GroupId/*[in]*/)
{
  _TDispID _dispid(/* GroupDeleted */ DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = GroupId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::UserMood(Skype4comlib_tlb::IUser* pUser/*[in]*/, BSTR MoodText/*[in]*/)
{
  _TDispID _dispid(/* UserMood */ DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
  _args[2] = MoodText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::SmsMessageStatusChanged(Skype4comlib_tlb::ISmsMessage* pMessage/*[in]*/, 
                                               Skype4comlib_tlb::TSmsMessageStatus Status/*[in]*/)
{
  _TDispID _dispid(/* SmsMessageStatusChanged */ DISPID(27));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsMessage*)pMessage /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::SmsTargetStatusChanged(Skype4comlib_tlb::ISmsTarget* pTarget/*[in]*/, 
                                              Skype4comlib_tlb::TSmsTargetStatus Status/*[in]*/)
{
  _TDispID _dispid(/* SmsTargetStatusChanged */ DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ISmsTarget*)pTarget /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallInputStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                              VARIANT_BOOL Status/*[in]*/)
{
  _TDispID _dispid(/* CallInputStatusChanged */ DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = Status /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::AsyncSearchUsersFinished(long Cookie/*[in]*/, 
                                                Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/)
{
  _TDispID _dispid(/* AsyncSearchUsersFinished */ DISPID(30));
  TAutoArgs<2> _args;
  _args[1] = Cookie /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallSeenStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                             VARIANT_BOOL Status)
{
  _TDispID _dispid(/* CallSeenStatusChanged */ DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = Status /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::PluginEventClicked(Skype4comlib_tlb::IPluginEvent* pEvent/*[in]*/)
{
  _TDispID _dispid(/* PluginEventClicked */ DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IPluginEvent*)pEvent /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::PluginMenuItemClicked(Skype4comlib_tlb::IPluginMenuItem* pMenuItem/*[in]*/, 
                                             Skype4comlib_tlb::IUserCollection* pUsers/*[in]*/, 
                                             Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/
                                             , BSTR ContextId/*[in]*/)
{
  _TDispID _dispid(/* PluginMenuItemClicked */ DISPID(33));
  TAutoArgs<4> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IPluginMenuItem*)pMenuItem /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pUsers /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)PluginContext /*[VT_USERDEFINED:0]*/;
  _args[4] = ContextId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::WallpaperChanged(BSTR Path/*[in]*/)
{
  _TDispID _dispid(/* WallpaperChanged */ DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::FileTransferStatusChanged(Skype4comlib_tlb::IFileTransfer* pTransfer/*[in]*/
                                                 , 
                                                 Skype4comlib_tlb::TFileTransferStatus Status/*[in]*/)
{
  _TDispID _dispid(/* FileTransferStatusChanged */ DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IFileTransfer*)pTransfer /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallTransferStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                 Skype4comlib_tlb::TCallStatus Status/*[in]*/)
{
  _TDispID _dispid(/* CallTransferStatusChanged */ DISPID(36));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ChatMembersChanged(Skype4comlib_tlb::IChat* pChat/*[in]*/, 
                                          Skype4comlib_tlb::IUserCollection* pMembers/*[in]*/)
{
  _TDispID _dispid(/* ChatMembersChanged */ DISPID(37));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChat*)pChat /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::IUserCollection*)pMembers /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::ChatMemberRoleChanged(Skype4comlib_tlb::IChatMember* pMember/*[in]*/, 
                                             Skype4comlib_tlb::TChatMemberRole Role/*[in]*/)
{
  _TDispID _dispid(/* ChatMemberRoleChanged */ DISPID(38));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IChatMember*)pMember /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Role /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallVideoStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                              Skype4comlib_tlb::TCallVideoStatus Status/*[in]*/)
{
  _TDispID _dispid(/* CallVideoStatusChanged */ DISPID(39));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallVideoSendStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                  Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
{
  _TDispID _dispid(/* CallVideoSendStatusChanged */ DISPID(40));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::CallVideoReceiveStatusChanged(Skype4comlib_tlb::ICall* pCall/*[in]*/, 
                                                     Skype4comlib_tlb::TCallVideoSendStatus Status/*[in]*/)
{
  _TDispID _dispid(/* CallVideoReceiveStatusChanged */ DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICall*)pCall /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::SilentModeStatusChanged(VARIANT_BOOL Silent/*[in]*/)
{
  _TDispID _dispid(/* SilentModeStatusChanged */ DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Silent /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::UILanguageChanged(BSTR code/*[in]*/)
{
  _TDispID _dispid(/* UILanguageChanged */ DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = code /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISkypeEventsDispT<T>::UserAuthorizationRequestReceived(Skype4comlib_tlb::IUser* pUser/*[in]*/)
{
  _TDispID _dispid(/* UserAuthorizationRequestReceived */ DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::IUser*)pUser /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _ICallChannelManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {497ABB45-20AE-49D1-A39D-CBE84A31B20C}
// *********************************************************************//
template <class T> HRESULT __fastcall
_ICallChannelManagerEventsDispT<T>::Channels(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/
                                             , 
                                             Skype4comlib_tlb::ICallChannelCollection* pChannels/*[in]*/)
{
  _TDispID _dispid(/* Channels */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelManager*)pManager /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelCollection*)pChannels /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ICallChannelManagerEventsDispT<T>::Message(Skype4comlib_tlb::ICallChannelManager* pManager/*[in]*/
                                            , Skype4comlib_tlb::ICallChannel* pChannel/*[in]*/, 
                                            Skype4comlib_tlb::ICallChannelMessage* pMessage/*[in]*/)
{
  _TDispID _dispid(/* Message */ DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelManager*)pManager /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannel*)pChannel /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Skype4comlib_tlb::ICallChannelMessage*)pMessage /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ICallChannelManagerEventsDispT<T>::Created()
{
  _TDispID _dispid(/* Created */ DISPID(3));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ISkypePlugin
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B77A3D1F-6847-402F-BB82-A0564379088E}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::CreatePluginEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                        BSTR Hint/*[in]*/, 
                                        Skype4comlib_tlb::IPluginEvent** pEvent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreatePluginEvent"), DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = EventId /*[VT_BSTR:0]*/;
  _args[2] = Caption /*[VT_BSTR:0]*/;
  _args[3] = Hint /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IPluginEvent**)pEvent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IPluginEvent* __fastcall
ISkypePluginDispT<T>::CreatePluginEvent(BSTR EventId/*[in]*/, BSTR Caption/*[in]*/, 
                                        BSTR Hint/*[in]*/)
{
  Skype4comlib_tlb::IPluginEvent* pEvent;
  this->CreatePluginEvent(EventId, Caption, Hint, (Skype4comlib_tlb::IPluginEvent**)&pEvent);
  return pEvent;
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::DeletePluginEvent(BSTR EventId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeletePluginEvent"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = EventId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                           Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                           BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                           BSTR IconPath/*[in,def,opt]*/, 
                                           VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                           Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/
                                           , VARIANT_BOOL MultipleContacts/*[in,def,opt]*/, 
                                           Skype4comlib_tlb::IPluginMenuItem** pMenuItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreatePluginMenuItem"), DISPID(3));
  TAutoArgs<8> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  _args[2] = (int)PluginContext /*[VT_USERDEFINED:0]*/;
  _args[3] = CaptionText /*[VT_BSTR:0]*/;
  _args[4] = HintText /*[VT_BSTR:0]*/;
  _args[5] = IconPath /*[VT_BSTR:0]*/;
  _args[6] = Enabled /*[VT_BOOL:0]*/;
  _args[7] = (int)ContactType /*[VT_USERDEFINED:0]*/;
  _args[8] = MultipleContacts /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Skype4comlib_tlb::IPluginMenuItem**)pMenuItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Skype4comlib_tlb::IPluginMenuItem* __fastcall
ISkypePluginDispT<T>::CreatePluginMenuItem(BSTR MenuItemId/*[in]*/, 
                                           Skype4comlib_tlb::TPluginContext PluginContext/*[in]*/, 
                                           BSTR CaptionText/*[in]*/, BSTR HintText/*[in,def,opt]*/, 
                                           BSTR IconPath/*[in,def,opt]*/, 
                                           VARIANT_BOOL Enabled/*[in,def,opt]*/, 
                                           Skype4comlib_tlb::TPluginContactType ContactType/*[in,def,opt]*/, 
                                           VARIANT_BOOL MultipleContacts/*[in,def,opt]*/)
{
  Skype4comlib_tlb::IPluginMenuItem* pMenuItem;
  this->CreatePluginMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, Enabled, 
                             ContactType, MultipleContacts, (Skype4comlib_tlb::IPluginMenuItem**)&pMenuItem);
  return pMenuItem;
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::DeletePluginMenuItem(BSTR MenuItemId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeletePluginMenuItem"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::set_PluginMenuItemCaption(BSTR MenuItemId/*[in]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginMenuItemCaption"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::set_PluginMenuItemHint(BSTR MenuItemId/*[in]*/, BSTR Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginMenuItemHint"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  _args[2] = Param2 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISkypePluginDispT<T>::EnablePluginMenuItem(BSTR MenuItemId/*[in]*/, VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePluginMenuItem"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = MenuItemId /*[VT_BSTR:0]*/;
  _args[2] = Enabled /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : User
// Interface: TCOMIUser
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIUser, IUser, &CLSID_User, &IID_IUser> CoUser;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : UserCollection
// Interface: TCOMIUserCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIUserCollection, IUserCollection, &CLSID_UserCollection, &IID_IUserCollection> CoUserCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Conversion
// Interface: TCOMIConversion
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIConversion, IConversion, &CLSID_Conversion, &IID_IConversion> CoConversion;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Call
// Interface: TCOMICall
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICall, ICall, &CLSID_Call, &IID_ICall> CoCall;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CallCollection
// Interface: TCOMICallCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICallCollection, ICallCollection, &CLSID_CallCollection, &IID_ICallCollection> CoCallCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Chat
// Interface: TCOMIChat
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChat, IChat, &CLSID_Chat, &IID_IChat> CoChat;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ChatCollection
// Interface: TCOMIChatCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChatCollection, IChatCollection, &CLSID_ChatCollection, &IID_IChatCollection> CoChatCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Participant
// Interface: TCOMIParticipant
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIParticipant, IParticipant, &CLSID_Participant, &IID_IParticipant> CoParticipant;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ParticipantCollection
// Interface: TCOMIParticipantCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIParticipantCollection, IParticipantCollection, &CLSID_ParticipantCollection, &IID_IParticipantCollection> CoParticipantCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Conference
// Interface: TCOMIConference
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIConference, IConference, &CLSID_Conference, &IID_IConference> CoConference;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ConferenceCollection
// Interface: TCOMIConferenceCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIConferenceCollection, IConferenceCollection, &CLSID_ConferenceCollection, &IID_IConferenceCollection> CoConferenceCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Voicemail
// Interface: TCOMIVoicemail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVoicemail, IVoicemail, &CLSID_Voicemail, &IID_IVoicemail> CoVoicemail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VoicemailCollection
// Interface: TCOMIVoicemailCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVoicemailCollection, IVoicemailCollection, &CLSID_VoicemailCollection, &IID_IVoicemailCollection> CoVoicemailCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : App
// Interface: TCOMIApplication
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIApplication, IApplication, &CLSID_App, &IID_IApplication> CoApp;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ApplicationStream
// Interface: TCOMIApplicationStream
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIApplicationStream, IApplicationStream, &CLSID_ApplicationStream, &IID_IApplicationStream> CoApplicationStream;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ApplicationStreamCollection
// Interface: TCOMIApplicationStreamCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIApplicationStreamCollection, IApplicationStreamCollection, &CLSID_ApplicationStreamCollection, &IID_IApplicationStreamCollection> CoApplicationStreamCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ChatMessage
// Interface: TCOMIChatMessage
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChatMessage, IChatMessage, &CLSID_ChatMessage, &IID_IChatMessage> CoChatMessage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ChatMessageCollection
// Interface: TCOMIChatMessageCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChatMessageCollection, IChatMessageCollection, &CLSID_ChatMessageCollection, &IID_IChatMessageCollection> CoChatMessageCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Profile
// Interface: TCOMIProfile
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIProfile, IProfile, &CLSID_Profile, &IID_IProfile> CoProfile;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Group
// Interface: TCOMIGroup
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIGroup, IGroup, &CLSID_Group, &IID_IGroup> CoGroup;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : GroupCollection
// Interface: TCOMIGroupCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIGroupCollection, IGroupCollection, &CLSID_GroupCollection, &IID_IGroupCollection> CoGroupCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Settings
// Interface: TCOMISettings
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISettings, ISettings, &CLSID_Settings, &IID_ISettings> CoSettings;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Client
// Interface: TCOMIClient
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIClient, IClient, &CLSID_Client, &IID_IClient> CoClient;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Command
// Interface: TCOMICommand
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICommand, ICommand, &CLSID_Command, &IID_ICommand> CoCommand;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CallChannel
// Interface: TCOMICallChannel
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICallChannel, ICallChannel, &CLSID_CallChannel, &IID_ICallChannel> CoCallChannel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CallChannelCollection
// Interface: TCOMICallChannelCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICallChannelCollection, ICallChannelCollection, &CLSID_CallChannelCollection, &IID_ICallChannelCollection> CoCallChannelCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CallChannelManager
// Interface: TCOMICallChannelManager
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICallChannelManager, ICallChannelManager, &CLSID_CallChannelManager, &IID_ICallChannelManager> CoCallChannelManager;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CallChannelMessage
// Interface: TCOMICallChannelMessage
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICallChannelMessage, ICallChannelMessage, &CLSID_CallChannelMessage, &IID_ICallChannelMessage> CoCallChannelMessage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsMessage
// Interface: TCOMISmsMessage
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsMessage, ISmsMessage, &CLSID_SmsMessage, &IID_ISmsMessage> CoSmsMessage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsMessageCollection
// Interface: TCOMISmsMessageCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsMessageCollection, ISmsMessageCollection, &CLSID_SmsMessageCollection, &IID_ISmsMessageCollection> CoSmsMessageCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsChunk
// Interface: TCOMISmsChunk
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsChunk, ISmsChunk, &CLSID_SmsChunk, &IID_ISmsChunk> CoSmsChunk;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsChunkCollection
// Interface: TCOMISmsChunkCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsChunkCollection, ISmsChunkCollection, &CLSID_SmsChunkCollection, &IID_ISmsChunkCollection> CoSmsChunkCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsTarget
// Interface: TCOMISmsTarget
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsTarget, ISmsTarget, &CLSID_SmsTarget, &IID_ISmsTarget> CoSmsTarget;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SmsTargetCollection
// Interface: TCOMISmsTargetCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISmsTargetCollection, ISmsTargetCollection, &CLSID_SmsTargetCollection, &IID_ISmsTargetCollection> CoSmsTargetCollection;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PluginMenuItem
// Interface: TCOMIPluginMenuItem
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPluginMenuItem, IPluginMenuItem, &CLSID_PluginMenuItem, &IID_IPluginMenuItem> CoPluginMenuItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PluginEvent
// Interface: TCOMIPluginEvent
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPluginEvent, IPluginEvent, &CLSID_PluginEvent, &IID_IPluginEvent> CoPluginEvent;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Skype
// Event Interface : _ISkypeEvents
// *********************************************************************//
template <class T>
class TEvents_Skype : public IConnectionPointImpl<T,
                                                 &DIID__ISkypeEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_Command(Skype4comlib_tlb::ICommand* pCommand);
  HRESULT         Fire_Reply(Skype4comlib_tlb::ICommand* pCommand);
  HRESULT         Fire_Error(Skype4comlib_tlb::ICommand* pCommand, long Number, BSTR Description);
  HRESULT         Fire_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus Status);
  HRESULT         Fire_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus Status);
  HRESULT         Fire_UserStatus(Skype4comlib_tlb::TUserStatus Status);
  HRESULT         Fire_OnlineStatus(Skype4comlib_tlb::IUser* pUser, 
                                    Skype4comlib_tlb::TOnlineStatus Status);
  HRESULT         Fire_CallStatus(Skype4comlib_tlb::ICall* pCall, 
                                  Skype4comlib_tlb::TCallStatus Status);
  HRESULT         Fire_CallHistory(void);
  HRESULT         Fire_Mute(VARIANT_BOOL Mute);
  HRESULT         Fire_MessageStatus(Skype4comlib_tlb::IChatMessage* pMessage, 
                                     Skype4comlib_tlb::TChatMessageStatus Status);
  HRESULT         Fire_MessageHistory(BSTR Username);
  HRESULT         Fire_AutoAway(VARIANT_BOOL Automatic);
  HRESULT         Fire_CallDtmfReceived(Skype4comlib_tlb::ICall* pCall, BSTR code);
  HRESULT         Fire_VoicemailStatus(Skype4comlib_tlb::IVoicemail* pMail, 
                                       Skype4comlib_tlb::TVoicemailStatus Status);
  HRESULT         Fire_ApplicationConnecting(Skype4comlib_tlb::IApplication* pApp, 
                                             Skype4comlib_tlb::IUserCollection* pUsers);
  HRESULT         Fire_ApplicationStreams(Skype4comlib_tlb::IApplication* pApp, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams);
  HRESULT         Fire_ApplicationDatagram(Skype4comlib_tlb::IApplication* pApp, 
                                           Skype4comlib_tlb::IApplicationStream* pStream, BSTR Text);
  HRESULT         Fire_ApplicationSending(Skype4comlib_tlb::IApplication* pApp, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams);
  HRESULT         Fire_ApplicationReceiving(Skype4comlib_tlb::IApplication* pApp, 
                                            Skype4comlib_tlb::IApplicationStreamCollection* pStreams);
  HRESULT         Fire_ContactsFocused(BSTR Username);
  HRESULT         Fire_GroupVisible(Skype4comlib_tlb::IGroup* pGroup, VARIANT_BOOL Visible);
  HRESULT         Fire_GroupExpanded(Skype4comlib_tlb::IGroup* pGroup, VARIANT_BOOL Expanded);
  HRESULT         Fire_GroupUsers(Skype4comlib_tlb::IGroup* pGroup, 
                                  Skype4comlib_tlb::IUserCollection* pUsers);
  HRESULT         Fire_GroupDeleted(long GroupId);
  HRESULT         Fire_UserMood(Skype4comlib_tlb::IUser* pUser, BSTR MoodText);
  HRESULT         Fire_SmsMessageStatusChanged(Skype4comlib_tlb::ISmsMessage* pMessage, 
                                               Skype4comlib_tlb::TSmsMessageStatus Status);
  HRESULT         Fire_SmsTargetStatusChanged(Skype4comlib_tlb::ISmsTarget* pTarget, 
                                              Skype4comlib_tlb::TSmsTargetStatus Status);
  HRESULT         Fire_CallInputStatusChanged(Skype4comlib_tlb::ICall* pCall, VARIANT_BOOL Status);
  HRESULT         Fire_AsyncSearchUsersFinished(long Cookie, 
                                                Skype4comlib_tlb::IUserCollection* pUsers);
  HRESULT         Fire_CallSeenStatusChanged(Skype4comlib_tlb::ICall* pCall, VARIANT_BOOL Status);
  HRESULT         Fire_PluginEventClicked(Skype4comlib_tlb::IPluginEvent* pEvent);
  HRESULT         Fire_PluginMenuItemClicked(Skype4comlib_tlb::IPluginMenuItem* pMenuItem, 
                                             Skype4comlib_tlb::IUserCollection* pUsers, 
                                             Skype4comlib_tlb::TPluginContext PluginContext, 
                                             BSTR ContextId);
  HRESULT         Fire_WallpaperChanged(BSTR Path);
  HRESULT         Fire_FileTransferStatusChanged(Skype4comlib_tlb::IFileTransfer* pTransfer, 
                                                 Skype4comlib_tlb::TFileTransferStatus Status);
  HRESULT         Fire_CallTransferStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                 Skype4comlib_tlb::TCallStatus Status);
  HRESULT         Fire_ChatMembersChanged(Skype4comlib_tlb::IChat* pChat, 
                                          Skype4comlib_tlb::IUserCollection* pMembers);
  HRESULT         Fire_ChatMemberRoleChanged(Skype4comlib_tlb::IChatMember* pMember, 
                                             Skype4comlib_tlb::TChatMemberRole Role);
  HRESULT         Fire_CallVideoStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                              Skype4comlib_tlb::TCallVideoStatus Status);
  HRESULT         Fire_CallVideoSendStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                  Skype4comlib_tlb::TCallVideoSendStatus Status);
  HRESULT         Fire_CallVideoReceiveStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                     Skype4comlib_tlb::TCallVideoSendStatus Status);
  HRESULT         Fire_SilentModeStatusChanged(VARIANT_BOOL Silent);
  HRESULT         Fire_UILanguageChanged(BSTR code);
  HRESULT         Fire_UserAuthorizationRequestReceived(Skype4comlib_tlb::IUser* pUser);
protected:
  _ISkypeEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_Skype<T>::Fire_Command(Skype4comlib_tlb::ICommand* pCommand)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Command(pCommand);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_Reply(Skype4comlib_tlb::ICommand* pCommand)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Reply(pCommand);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_Error(Skype4comlib_tlb::ICommand* pCommand, long Number, BSTR Description)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(pCommand, Number, Description);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_AttachmentStatus(Skype4comlib_tlb::TAttachmentStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AttachmentStatus(Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ConnectionStatus(Skype4comlib_tlb::TConnectionStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ConnectionStatus(Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_UserStatus(Skype4comlib_tlb::TUserStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.UserStatus(Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_OnlineStatus(Skype4comlib_tlb::IUser* pUser, 
                                    Skype4comlib_tlb::TOnlineStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnlineStatus(pUser, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallStatus(Skype4comlib_tlb::ICall* pCall, 
                                  Skype4comlib_tlb::TCallStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallStatus(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallHistory(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallHistory();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_Mute(VARIANT_BOOL Mute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Mute(Mute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_MessageStatus(Skype4comlib_tlb::IChatMessage* pMessage, 
                                     Skype4comlib_tlb::TChatMessageStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MessageStatus(pMessage, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_MessageHistory(BSTR Username)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MessageHistory(Username);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_AutoAway(VARIANT_BOOL Automatic)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AutoAway(Automatic);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallDtmfReceived(Skype4comlib_tlb::ICall* pCall, BSTR code)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallDtmfReceived(pCall, code);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_VoicemailStatus(Skype4comlib_tlb::IVoicemail* pMail, 
                                       Skype4comlib_tlb::TVoicemailStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.VoicemailStatus(pMail, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ApplicationConnecting(Skype4comlib_tlb::IApplication* pApp, 
                                             Skype4comlib_tlb::IUserCollection* pUsers)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ApplicationConnecting(pApp, pUsers);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ApplicationStreams(Skype4comlib_tlb::IApplication* pApp, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ApplicationStreams(pApp, pStreams);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ApplicationDatagram(Skype4comlib_tlb::IApplication* pApp, 
                                           Skype4comlib_tlb::IApplicationStream* pStream, BSTR Text)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ApplicationDatagram(pApp, pStream, Text);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ApplicationSending(Skype4comlib_tlb::IApplication* pApp, 
                                          Skype4comlib_tlb::IApplicationStreamCollection* pStreams)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ApplicationSending(pApp, pStreams);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ApplicationReceiving(Skype4comlib_tlb::IApplication* pApp, 
                                            Skype4comlib_tlb::IApplicationStreamCollection* pStreams)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ApplicationReceiving(pApp, pStreams);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ContactsFocused(BSTR Username)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ContactsFocused(Username);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_GroupVisible(Skype4comlib_tlb::IGroup* pGroup, VARIANT_BOOL Visible)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GroupVisible(pGroup, Visible);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_GroupExpanded(Skype4comlib_tlb::IGroup* pGroup, VARIANT_BOOL Expanded)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GroupExpanded(pGroup, Expanded);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_GroupUsers(Skype4comlib_tlb::IGroup* pGroup, 
                                  Skype4comlib_tlb::IUserCollection* pUsers)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GroupUsers(pGroup, pUsers);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_GroupDeleted(long GroupId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GroupDeleted(GroupId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_UserMood(Skype4comlib_tlb::IUser* pUser, BSTR MoodText)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.UserMood(pUser, MoodText);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_SmsMessageStatusChanged(Skype4comlib_tlb::ISmsMessage* pMessage, 
                                               Skype4comlib_tlb::TSmsMessageStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SmsMessageStatusChanged(pMessage, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_SmsTargetStatusChanged(Skype4comlib_tlb::ISmsTarget* pTarget, 
                                              Skype4comlib_tlb::TSmsTargetStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SmsTargetStatusChanged(pTarget, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallInputStatusChanged(Skype4comlib_tlb::ICall* pCall, VARIANT_BOOL Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallInputStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_AsyncSearchUsersFinished(long Cookie, 
                                                Skype4comlib_tlb::IUserCollection* pUsers)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AsyncSearchUsersFinished(Cookie, pUsers);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallSeenStatusChanged(Skype4comlib_tlb::ICall* pCall, VARIANT_BOOL Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallSeenStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_PluginEventClicked(Skype4comlib_tlb::IPluginEvent* pEvent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PluginEventClicked(pEvent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_PluginMenuItemClicked(Skype4comlib_tlb::IPluginMenuItem* pMenuItem, 
                                             Skype4comlib_tlb::IUserCollection* pUsers, 
                                             Skype4comlib_tlb::TPluginContext PluginContext, 
                                             BSTR ContextId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PluginMenuItemClicked(pMenuItem, pUsers, PluginContext, ContextId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_WallpaperChanged(BSTR Path)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WallpaperChanged(Path);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_FileTransferStatusChanged(Skype4comlib_tlb::IFileTransfer* pTransfer, 
                                                 Skype4comlib_tlb::TFileTransferStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.FileTransferStatusChanged(pTransfer, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallTransferStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                 Skype4comlib_tlb::TCallStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallTransferStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ChatMembersChanged(Skype4comlib_tlb::IChat* pChat, 
                                          Skype4comlib_tlb::IUserCollection* pMembers)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ChatMembersChanged(pChat, pMembers);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_ChatMemberRoleChanged(Skype4comlib_tlb::IChatMember* pMember, 
                                             Skype4comlib_tlb::TChatMemberRole Role)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ChatMemberRoleChanged(pMember, Role);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallVideoStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                              Skype4comlib_tlb::TCallVideoStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallVideoStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallVideoSendStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                  Skype4comlib_tlb::TCallVideoSendStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallVideoSendStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_CallVideoReceiveStatusChanged(Skype4comlib_tlb::ICall* pCall, 
                                                     Skype4comlib_tlb::TCallVideoSendStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CallVideoReceiveStatusChanged(pCall, Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_SilentModeStatusChanged(VARIANT_BOOL Silent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SilentModeStatusChanged(Silent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_UILanguageChanged(BSTR code)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.UILanguageChanged(code);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_Skype<T>::Fire_UserAuthorizationRequestReceived(Skype4comlib_tlb::IUser* pUser)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.UserAuthorizationRequestReceived(pUser);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CallChannelManager
// Event Interface : _ICallChannelManagerEvents
// *********************************************************************//
template <class T>
class TEvents_CallChannelManager : public IConnectionPointImpl<T,
                                                 &DIID__ICallChannelManagerEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_Channels(Skype4comlib_tlb::ICallChannelManager* pManager, 
                                Skype4comlib_tlb::ICallChannelCollection* pChannels);
  HRESULT         Fire_Message(Skype4comlib_tlb::ICallChannelManager* pManager, 
                               Skype4comlib_tlb::ICallChannel* pChannel, 
                               Skype4comlib_tlb::ICallChannelMessage* pMessage);
  HRESULT         Fire_Created(void);
protected:
  _ICallChannelManagerEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_CallChannelManager<T>::Fire_Channels(Skype4comlib_tlb::ICallChannelManager* pManager, 
                                             Skype4comlib_tlb::ICallChannelCollection* pChannels)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Channels(pManager, pChannels);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_CallChannelManager<T>::Fire_Message(Skype4comlib_tlb::ICallChannelManager* pManager, 
                                            Skype4comlib_tlb::ICallChannel* pChannel, 
                                            Skype4comlib_tlb::ICallChannelMessage* pMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Message(pManager, pChannel, pMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_CallChannelManager<T>::Fire_Created(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Created();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Skype4comlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Skype4comlib_tlb;
#endif

#pragma option pop

#endif // SKYPE4COMLib_TLBH
